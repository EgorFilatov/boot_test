
boot_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f98  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08008144  08008144  00018144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081b8  080081b8  00020170  2**0
                  CONTENTS
  4 .ARM          00000008  080081b8  080081b8  000181b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081c0  080081c0  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080081c0  080081c0  000181c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080081c8  080081c8  000181c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  080081d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020170  2**0
                  CONTENTS
 10 .bss          00001d94  20000170  20000170  00020170  2**2
                  ALLOC
 11 ._user_heap_stack 00000804  20001f04  20001f04  00020170  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000119cd  00000000  00000000  000201e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000032b7  00000000  00000000  00031bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e48  00000000  00000000  00034e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a8a  00000000  00000000  00035cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00008128  00000000  00000000  0003673a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000112f9  00000000  00000000  0003e862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000db8a6  00000000  00000000  0004fb5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000040c8  00000000  00000000  0012b404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  0012f4cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000170 	.word	0x20000170
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800812c 	.word	0x0800812c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000174 	.word	0x20000174
 80001e8:	0800812c 	.word	0x0800812c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	6039      	str	r1, [r7, #0]
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	4618      	mov	r0, r3
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr

08000500 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	6878      	ldr	r0, [r7, #4]
 800050a:	f000 fa3c 	bl	8000986 <_ZNSaIhED1Ev>
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	4618      	mov	r0, r3
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	4618      	mov	r0, r3
 8000524:	f000 fa1f 	bl	8000966 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	4618      	mov	r0, r3
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}

08000532 <_ZNSt6vectorIhSaIhEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8000532:	b580      	push	{r7, lr}
 8000534:	b082      	sub	sp, #8
 8000536:	af00      	add	r7, sp, #0
 8000538:	6078      	str	r0, [r7, #4]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	4618      	mov	r0, r3
 800053e:	f7ff ffeb 	bl	8000518 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4618      	mov	r0, r3
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}

0800054c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000552:	f001 f86d 	bl	8001630 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000556:	f000 f889 	bl	800066c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055a:	f000 f8fb 	bl	8000754 <_ZL12MX_GPIO_Initv>
  MX_USB_DEVICE_Init();
 800055e:	f006 fed7 	bl	8007310 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  rxCounter = INIT_RX_BYTES_NUM;
 8000562:	4b3b      	ldr	r3, [pc, #236]	; (8000650 <main+0x104>)
 8000564:	2204      	movs	r2, #4
 8000566:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if (rxFlag) {
 8000568:	4b3a      	ldr	r3, [pc, #232]	; (8000654 <main+0x108>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d0fb      	beq.n	8000568 <main+0x1c>
			rxFlag = 0;
 8000570:	4b38      	ldr	r3, [pc, #224]	; (8000654 <main+0x108>)
 8000572:	2200      	movs	r2, #0
 8000574:	701a      	strb	r2, [r3, #0]

			if (rxBuffLength >= rxCounter) {
 8000576:	4b36      	ldr	r3, [pc, #216]	; (8000650 <main+0x104>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	461a      	mov	r2, r3
 800057c:	4b36      	ldr	r3, [pc, #216]	; (8000658 <main+0x10c>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	429a      	cmp	r2, r3
 8000582:	d847      	bhi.n	8000614 <main+0xc8>
				for (uint8_t i = 0; i < rxCounter; i++) {
 8000584:	2300      	movs	r3, #0
 8000586:	71fb      	strb	r3, [r7, #7]
 8000588:	e00a      	b.n	80005a0 <main+0x54>
					rxBuff.push_back(rxBuffPtr[i]);
 800058a:	4b34      	ldr	r3, [pc, #208]	; (800065c <main+0x110>)
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	4413      	add	r3, r2
 8000592:	4619      	mov	r1, r3
 8000594:	4832      	ldr	r0, [pc, #200]	; (8000660 <main+0x114>)
 8000596:	f000 fa1a 	bl	80009ce <_ZNSt6vectorIhSaIhEE9push_backERKh>
				for (uint8_t i = 0; i < rxCounter; i++) {
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	3301      	adds	r3, #1
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	4b2b      	ldr	r3, [pc, #172]	; (8000650 <main+0x104>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	79fa      	ldrb	r2, [r7, #7]
 80005a6:	429a      	cmp	r2, r3
 80005a8:	d3ef      	bcc.n	800058a <main+0x3e>
				}
				if (rxBuff[0] == 0x70 && rxBuff[1] == 0x72 && rxBuff[2] == 0x63  && rxBuff[3] == 0x30) {
 80005aa:	2100      	movs	r1, #0
 80005ac:	482c      	ldr	r0, [pc, #176]	; (8000660 <main+0x114>)
 80005ae:	f000 fa33 	bl	8000a18 <_ZNSt6vectorIhSaIhEEixEj>
 80005b2:	4603      	mov	r3, r0
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b70      	cmp	r3, #112	; 0x70
 80005b8:	d119      	bne.n	80005ee <main+0xa2>
 80005ba:	2101      	movs	r1, #1
 80005bc:	4828      	ldr	r0, [pc, #160]	; (8000660 <main+0x114>)
 80005be:	f000 fa2b 	bl	8000a18 <_ZNSt6vectorIhSaIhEEixEj>
 80005c2:	4603      	mov	r3, r0
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b72      	cmp	r3, #114	; 0x72
 80005c8:	d111      	bne.n	80005ee <main+0xa2>
 80005ca:	2102      	movs	r1, #2
 80005cc:	4824      	ldr	r0, [pc, #144]	; (8000660 <main+0x114>)
 80005ce:	f000 fa23 	bl	8000a18 <_ZNSt6vectorIhSaIhEEixEj>
 80005d2:	4603      	mov	r3, r0
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b63      	cmp	r3, #99	; 0x63
 80005d8:	d109      	bne.n	80005ee <main+0xa2>
 80005da:	2103      	movs	r1, #3
 80005dc:	4820      	ldr	r0, [pc, #128]	; (8000660 <main+0x114>)
 80005de:	f000 fa1b 	bl	8000a18 <_ZNSt6vectorIhSaIhEEixEj>
 80005e2:	4603      	mov	r3, r0
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b30      	cmp	r3, #48	; 0x30
 80005e8:	d101      	bne.n	80005ee <main+0xa2>
 80005ea:	2301      	movs	r3, #1
 80005ec:	e000      	b.n	80005f0 <main+0xa4>
 80005ee:	2300      	movs	r3, #0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d004      	beq.n	80005fe <main+0xb2>
					CDC_Transmit_FS(Message.programmingMode, 28);
 80005f4:	211c      	movs	r1, #28
 80005f6:	481b      	ldr	r0, [pc, #108]	; (8000664 <main+0x118>)
 80005f8:	f006 ff58 	bl	80074ac <CDC_Transmit_FS>
 80005fc:	e003      	b.n	8000606 <main+0xba>
				} else {
					CDC_Transmit_FS(Message.error, 7);
 80005fe:	2107      	movs	r1, #7
 8000600:	4819      	ldr	r0, [pc, #100]	; (8000668 <main+0x11c>)
 8000602:	f006 ff53 	bl	80074ac <CDC_Transmit_FS>
				}
				rxBuff.clear();
 8000606:	4816      	ldr	r0, [pc, #88]	; (8000660 <main+0x114>)
 8000608:	f000 fa15 	bl	8000a36 <_ZNSt6vectorIhSaIhEE5clearEv>
				rxCounter = INIT_RX_BYTES_NUM;
 800060c:	4b10      	ldr	r3, [pc, #64]	; (8000650 <main+0x104>)
 800060e:	2204      	movs	r2, #4
 8000610:	701a      	strb	r2, [r3, #0]
 8000612:	e7a9      	b.n	8000568 <main+0x1c>
			} else {
				for (uint8_t i = 0; i < rxBuffLength; i++) {
 8000614:	2300      	movs	r3, #0
 8000616:	71bb      	strb	r3, [r7, #6]
 8000618:	e00a      	b.n	8000630 <main+0xe4>
					rxBuff.push_back(rxBuffPtr[i]);
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <main+0x110>)
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	79bb      	ldrb	r3, [r7, #6]
 8000620:	4413      	add	r3, r2
 8000622:	4619      	mov	r1, r3
 8000624:	480e      	ldr	r0, [pc, #56]	; (8000660 <main+0x114>)
 8000626:	f000 f9d2 	bl	80009ce <_ZNSt6vectorIhSaIhEE9push_backERKh>
				for (uint8_t i = 0; i < rxBuffLength; i++) {
 800062a:	79bb      	ldrb	r3, [r7, #6]
 800062c:	3301      	adds	r3, #1
 800062e:	71bb      	strb	r3, [r7, #6]
 8000630:	79ba      	ldrb	r2, [r7, #6]
 8000632:	4b09      	ldr	r3, [pc, #36]	; (8000658 <main+0x10c>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	429a      	cmp	r2, r3
 8000638:	d3ef      	bcc.n	800061a <main+0xce>
				}
				rxCounter = rxCounter - rxBuffLength;
 800063a:	4b05      	ldr	r3, [pc, #20]	; (8000650 <main+0x104>)
 800063c:	781a      	ldrb	r2, [r3, #0]
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <main+0x10c>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	b2db      	uxtb	r3, r3
 8000644:	1ad3      	subs	r3, r2, r3
 8000646:	b2da      	uxtb	r2, r3
 8000648:	4b01      	ldr	r3, [pc, #4]	; (8000650 <main+0x104>)
 800064a:	701a      	strb	r2, [r3, #0]


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 800064c:	e78c      	b.n	8000568 <main+0x1c>
 800064e:	bf00      	nop
 8000650:	200001a1 	.word	0x200001a1
 8000654:	200001a0 	.word	0x200001a0
 8000658:	2000019c 	.word	0x2000019c
 800065c:	20000198 	.word	0x20000198
 8000660:	2000018c 	.word	0x2000018c
 8000664:	20000000 	.word	0x20000000
 8000668:	2000001c 	.word	0x2000001c

0800066c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b094      	sub	sp, #80	; 0x50
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	2230      	movs	r2, #48	; 0x30
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f007 fc82 	bl	8007f84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	4b2d      	ldr	r3, [pc, #180]	; (800074c <_Z18SystemClock_Configv+0xe0>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	4a2c      	ldr	r2, [pc, #176]	; (800074c <_Z18SystemClock_Configv+0xe0>)
 800069a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069e:	6413      	str	r3, [r2, #64]	; 0x40
 80006a0:	4b2a      	ldr	r3, [pc, #168]	; (800074c <_Z18SystemClock_Configv+0xe0>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ac:	2300      	movs	r3, #0
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	4b27      	ldr	r3, [pc, #156]	; (8000750 <_Z18SystemClock_Configv+0xe4>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a26      	ldr	r2, [pc, #152]	; (8000750 <_Z18SystemClock_Configv+0xe4>)
 80006b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ba:	6013      	str	r3, [r2, #0]
 80006bc:	4b24      	ldr	r3, [pc, #144]	; (8000750 <_Z18SystemClock_Configv+0xe4>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c8:	2301      	movs	r3, #1
 80006ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006cc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d2:	2302      	movs	r3, #2
 80006d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006dc:	2304      	movs	r3, #4
 80006de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006e0:	23a8      	movs	r3, #168	; 0xa8
 80006e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006e8:	2307      	movs	r3, #7
 80006ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	f107 0320 	add.w	r3, r7, #32
 80006f0:	4618      	mov	r0, r3
 80006f2:	f002 fd87 	bl	8003204 <HAL_RCC_OscConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	bf14      	ite	ne
 80006fc:	2301      	movne	r3, #1
 80006fe:	2300      	moveq	r3, #0
 8000700:	b2db      	uxtb	r3, r3
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8000706:	f000 f929 	bl	800095c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070a:	230f      	movs	r3, #15
 800070c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070e:	2302      	movs	r3, #2
 8000710:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000716:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800071a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800071c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000720:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000722:	f107 030c 	add.w	r3, r7, #12
 8000726:	2105      	movs	r1, #5
 8000728:	4618      	mov	r0, r3
 800072a:	f002 ffe3 	bl	80036f4 <HAL_RCC_ClockConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	bf14      	ite	ne
 8000734:	2301      	movne	r3, #1
 8000736:	2300      	moveq	r3, #0
 8000738:	b2db      	uxtb	r3, r3
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 800073e:	f000 f90d 	bl	800095c <Error_Handler>
  }
}
 8000742:	bf00      	nop
 8000744:	3750      	adds	r7, #80	; 0x50
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800
 8000750:	40007000 	.word	0x40007000

08000754 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08c      	sub	sp, #48	; 0x30
 8000758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
 800076e:	4b75      	ldr	r3, [pc, #468]	; (8000944 <_ZL12MX_GPIO_Initv+0x1f0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a74      	ldr	r2, [pc, #464]	; (8000944 <_ZL12MX_GPIO_Initv+0x1f0>)
 8000774:	f043 0304 	orr.w	r3, r3, #4
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b72      	ldr	r3, [pc, #456]	; (8000944 <_ZL12MX_GPIO_Initv+0x1f0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	61bb      	str	r3, [r7, #24]
 8000784:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
 800078a:	4b6e      	ldr	r3, [pc, #440]	; (8000944 <_ZL12MX_GPIO_Initv+0x1f0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a6d      	ldr	r2, [pc, #436]	; (8000944 <_ZL12MX_GPIO_Initv+0x1f0>)
 8000790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b6b      	ldr	r3, [pc, #428]	; (8000944 <_ZL12MX_GPIO_Initv+0x1f0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
 80007a6:	4b67      	ldr	r3, [pc, #412]	; (8000944 <_ZL12MX_GPIO_Initv+0x1f0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a66      	ldr	r2, [pc, #408]	; (8000944 <_ZL12MX_GPIO_Initv+0x1f0>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b64      	ldr	r3, [pc, #400]	; (8000944 <_ZL12MX_GPIO_Initv+0x1f0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	4b60      	ldr	r3, [pc, #384]	; (8000944 <_ZL12MX_GPIO_Initv+0x1f0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a5f      	ldr	r2, [pc, #380]	; (8000944 <_ZL12MX_GPIO_Initv+0x1f0>)
 80007c8:	f043 0302 	orr.w	r3, r3, #2
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b5d      	ldr	r3, [pc, #372]	; (8000944 <_ZL12MX_GPIO_Initv+0x1f0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	4b59      	ldr	r3, [pc, #356]	; (8000944 <_ZL12MX_GPIO_Initv+0x1f0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a58      	ldr	r2, [pc, #352]	; (8000944 <_ZL12MX_GPIO_Initv+0x1f0>)
 80007e4:	f043 0308 	orr.w	r3, r3, #8
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b56      	ldr	r3, [pc, #344]	; (8000944 <_ZL12MX_GPIO_Initv+0x1f0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0308 	and.w	r3, r3, #8
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b52      	ldr	r3, [pc, #328]	; (8000944 <_ZL12MX_GPIO_Initv+0x1f0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a51      	ldr	r2, [pc, #324]	; (8000944 <_ZL12MX_GPIO_Initv+0x1f0>)
 8000800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b4f      	ldr	r3, [pc, #316]	; (8000944 <_ZL12MX_GPIO_Initv+0x1f0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	f244 0181 	movw	r1, #16513	; 0x4081
 8000818:	484b      	ldr	r0, [pc, #300]	; (8000948 <_ZL12MX_GPIO_Initv+0x1f4>)
 800081a:	f001 fa5d 	bl	8001cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	2140      	movs	r1, #64	; 0x40
 8000822:	484a      	ldr	r0, [pc, #296]	; (800094c <_ZL12MX_GPIO_Initv+0x1f8>)
 8000824:	f001 fa58 	bl	8001cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000828:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800082e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 031c 	add.w	r3, r7, #28
 800083c:	4619      	mov	r1, r3
 800083e:	4844      	ldr	r0, [pc, #272]	; (8000950 <_ZL12MX_GPIO_Initv+0x1fc>)
 8000840:	f001 f89e 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000844:	2332      	movs	r3, #50	; 0x32
 8000846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000848:	2302      	movs	r3, #2
 800084a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000850:	2303      	movs	r3, #3
 8000852:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000854:	230b      	movs	r3, #11
 8000856:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	4619      	mov	r1, r3
 800085e:	483c      	ldr	r0, [pc, #240]	; (8000950 <_ZL12MX_GPIO_Initv+0x1fc>)
 8000860:	f001 f88e 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000864:	2386      	movs	r3, #134	; 0x86
 8000866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000868:	2302      	movs	r3, #2
 800086a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000870:	2303      	movs	r3, #3
 8000872:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000874:	230b      	movs	r3, #11
 8000876:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	4619      	mov	r1, r3
 800087e:	4835      	ldr	r0, [pc, #212]	; (8000954 <_ZL12MX_GPIO_Initv+0x200>)
 8000880:	f001 f87e 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000884:	f244 0381 	movw	r3, #16513	; 0x4081
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	482a      	ldr	r0, [pc, #168]	; (8000948 <_ZL12MX_GPIO_Initv+0x1f4>)
 800089e:	f001 f86f 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	2302      	movs	r3, #2
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b0:	2303      	movs	r3, #3
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008b4:	230b      	movs	r3, #11
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	4822      	ldr	r0, [pc, #136]	; (8000948 <_ZL12MX_GPIO_Initv+0x1f4>)
 80008c0:	f001 f85e 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80008c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d2:	2303      	movs	r3, #3
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008d6:	2307      	movs	r3, #7
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	481d      	ldr	r0, [pc, #116]	; (8000958 <_ZL12MX_GPIO_Initv+0x204>)
 80008e2:	f001 f84d 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008e6:	2340      	movs	r3, #64	; 0x40
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	4813      	ldr	r0, [pc, #76]	; (800094c <_ZL12MX_GPIO_Initv+0x1f8>)
 80008fe:	f001 f83f 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000902:	2380      	movs	r3, #128	; 0x80
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000906:	2300      	movs	r3, #0
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	480d      	ldr	r0, [pc, #52]	; (800094c <_ZL12MX_GPIO_Initv+0x1f8>)
 8000916:	f001 f833 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800091a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800091e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000920:	2302      	movs	r3, #2
 8000922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000928:	2303      	movs	r3, #3
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800092c:	230b      	movs	r3, #11
 800092e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	4805      	ldr	r0, [pc, #20]	; (800094c <_ZL12MX_GPIO_Initv+0x1f8>)
 8000938:	f001 f822 	bl	8001980 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800093c:	bf00      	nop
 800093e:	3730      	adds	r7, #48	; 0x30
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40023800 	.word	0x40023800
 8000948:	40020400 	.word	0x40020400
 800094c:	40021800 	.word	0x40021800
 8000950:	40020800 	.word	0x40020800
 8000954:	40020000 	.word	0x40020000
 8000958:	40020c00 	.word	0x40020c00

0800095c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000960:	b672      	cpsid	i
}
 8000962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000964:	e7fe      	b.n	8000964 <Error_Handler+0x8>

08000966 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f000 f86f 	bl	8000a52 <_ZNSaIhEC1Ev>
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4618      	mov	r0, r3
 8000978:	f000 f877 	bl	8000a6a <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	{ }
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4618      	mov	r0, r3
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <_ZNSaIhED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8000986:	b580      	push	{r7, lr}
 8000988:	b082      	sub	sp, #8
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f000 f87f 	bl	8000a92 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4618      	mov	r0, r3
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800099e:	b580      	push	{r7, lr}
 80009a0:	b082      	sub	sp, #8
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	689a      	ldr	r2, [r3, #8]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 80009b4:	461a      	mov	r2, r3
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f000 f876 	bl	8000aa8 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
      }
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fd9e 	bl	8000500 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4618      	mov	r0, r3
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <_ZNSt6vectorIhSaIhEE9push_backERKh>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b082      	sub	sp, #8
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
 80009d6:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	685a      	ldr	r2, [r3, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d00c      	beq.n	80009fe <_ZNSt6vectorIhSaIhEE9push_backERKh+0x30>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	683a      	ldr	r2, [r7, #0]
 80009ec:	4619      	mov	r1, r3
 80009ee:	f000 f86e 	bl	8000ace <_ZNSt16allocator_traitsISaIhEE9constructIhJRKhEEEvRS0_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	1c5a      	adds	r2, r3, #1
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 80009fc:	e008      	b.n	8000a10 <_ZNSt6vectorIhSaIhEE9push_backERKh+0x42>
	  _M_realloc_insert(end(), __x);
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f000 f878 	bl	8000af4 <_ZNSt6vectorIhSaIhEE3endEv>
 8000a04:	4603      	mov	r3, r0
 8000a06:	683a      	ldr	r2, [r7, #0]
 8000a08:	4619      	mov	r1, r3
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f000 f89a 	bl	8000b44 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>
      }
 8000a10:	bf00      	nop
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <_ZNSt6vectorIhSaIhEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	4413      	add	r3, r2
      }
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <_ZNSt6vectorIhSaIhEE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b082      	sub	sp, #8
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4619      	mov	r1, r3
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f000 f935 	bl	8000cb4 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <_ZNSaIhEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b082      	sub	sp, #8
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f000 f94a 	bl	8000cf4 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4618      	mov	r0, r3
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8000a6a:	b480      	push	{r7}
 8000a6c:	b083      	sub	sp, #12
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
	{ }
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4618      	mov	r0, r3
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000a92:	b480      	push	{r7}
 8000a94:	b083      	sub	sp, #12
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>:
      _M_deallocate(pointer __p, size_t __n)
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
	if (__p)
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d005      	beq.n	8000ac6 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	687a      	ldr	r2, [r7, #4]
 8000abe:	68b9      	ldr	r1, [r7, #8]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f000 f922 	bl	8000d0a <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>
      }
 8000ac6:	bf00      	nop
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <_ZNSt16allocator_traitsISaIhEE9constructIhJRKhEEEvRS0_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b084      	sub	sp, #16
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	60f8      	str	r0, [r7, #12]
 8000ad6:	60b9      	str	r1, [r7, #8]
 8000ad8:	607a      	str	r2, [r7, #4]
		  _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f000 f924 	bl	8000d28 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	68b9      	ldr	r1, [r7, #8]
 8000ae6:	68f8      	ldr	r0, [r7, #12]
 8000ae8:	f000 f929 	bl	8000d3e <_ZN9__gnu_cxx13new_allocatorIhE9constructIhJRKhEEEvPT_DpOT0_>
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
#endif
	}
 8000aec:	bf00      	nop
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <_ZNSt6vectorIhSaIhEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	1d1a      	adds	r2, r3, #4
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	4611      	mov	r1, r2
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 f930 	bl	8000d6c <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <_ZNSt6vectorIhSaIhEE15_S_use_relocateEv>:
      _S_use_relocate()
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b082      	sub	sp, #8
 8000b1a:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f000 f805 	bl	8000b2c <_ZNSt6vectorIhSaIhEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8000b22:	4603      	mov	r3, r0
      }
 8000b24:	4618      	mov	r0, r3
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <_ZNSt6vectorIhSaIhEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8000b34:	2301      	movs	r3, #1
      }
 8000b36:	4618      	mov	r0, r3
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
	...

08000b44 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8000b44:	b5b0      	push	{r4, r5, r7, lr}
 8000b46:	b08c      	sub	sp, #48	; 0x30
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8000b50:	4a57      	ldr	r2, [pc, #348]	; (8000cb0 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x16c>)
 8000b52:	2101      	movs	r1, #1
 8000b54:	68f8      	ldr	r0, [r7, #12]
 8000b56:	f000 f919 	bl	8000d8c <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8000b5a:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8000b68:	68f8      	ldr	r0, [r7, #12]
 8000b6a:	f000 f956 	bl	8000e1a <_ZNSt6vectorIhSaIhEE5beginEv>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	617b      	str	r3, [r7, #20]
 8000b72:	f107 0214 	add.w	r2, r7, #20
 8000b76:	f107 0308 	add.w	r3, r7, #8
 8000b7a:	4611      	mov	r1, r2
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f000 f95c 	bl	8000e3a <_ZN9__gnu_cxxmiIPhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8000b82:	4603      	mov	r3, r0
 8000b84:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 f969 	bl	8000e62 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 8000b90:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8000b92:	69bb      	ldr	r3, [r7, #24]
 8000b94:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8000b96:	68fc      	ldr	r4, [r7, #12]
 8000b98:	69ba      	ldr	r2, [r7, #24]
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	18d5      	adds	r5, r2, r3
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f000 f8c2 	bl	8000d28 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	4629      	mov	r1, r5
 8000baa:	4620      	mov	r0, r4
 8000bac:	f7ff ff8f 	bl	8000ace <_ZNSt16allocator_traitsISaIhEE9constructIhJRKhEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8000bb4:	f7ff ffaf 	bl	8000b16 <_ZNSt6vectorIhSaIhEE15_S_use_relocateEv>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d027      	beq.n	8000c0e <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0xca>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8000bbe:	f107 0308 	add.w	r3, r7, #8
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 f975 	bl	8000eb2 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f000 f97a 	bl	8000ec8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8000bd4:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8000bd6:	69ba      	ldr	r2, [r7, #24]
 8000bd8:	4621      	mov	r1, r4
 8000bda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000bdc:	f000 f955 	bl	8000e8a <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>
 8000be0:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8000be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be4:	3301      	adds	r3, #1
 8000be6:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8000be8:	f107 0308 	add.w	r3, r7, #8
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 f960 	bl	8000eb2 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f000 f965 	bl	8000ec8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8000bfe:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8000c00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c02:	6a39      	ldr	r1, [r7, #32]
 8000c04:	4620      	mov	r0, r4
 8000c06:	f000 f940 	bl	8000e8a <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>
 8000c0a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8000c0c:	e026      	b.n	8000c5c <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x118>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8000c0e:	f107 0308 	add.w	r3, r7, #8
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 f94d 	bl	8000eb2 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 f952 	bl	8000ec8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8000c24:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8000c26:	69ba      	ldr	r2, [r7, #24]
 8000c28:	4621      	mov	r1, r4
 8000c2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c2c:	f000 f957 	bl	8000ede <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 8000c30:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8000c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c34:	3301      	adds	r3, #1
 8000c36:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8000c38:	f107 0308 	add.w	r3, r7, #8
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f000 f938 	bl	8000eb2 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8000c42:	4603      	mov	r3, r0
 8000c44:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f000 f93d 	bl	8000ec8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8000c4e:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8000c50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c52:	6a39      	ldr	r1, [r7, #32]
 8000c54:	4620      	mov	r0, r4
 8000c56:	f000 f942 	bl	8000ede <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 8000c5a:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8000c5c:	f7ff ff5b 	bl	8000b16 <_ZNSt6vectorIhSaIhEE15_S_use_relocateEv>
 8000c60:	4603      	mov	r3, r0
 8000c62:	f083 0301 	eor.w	r3, r3, #1
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d009      	beq.n	8000c80 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x13c>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 f92a 	bl	8000ec8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8000c74:	4603      	mov	r3, r0
 8000c76:	461a      	mov	r2, r3
 8000c78:	6a39      	ldr	r1, [r7, #32]
 8000c7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c7c:	f000 f948 	bl	8000f10 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8000c80:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	689a      	ldr	r2, [r3, #8]
 8000c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c88:	1ad3      	subs	r3, r2, r3
      _M_deallocate(__old_start,
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000c8e:	f7ff ff0b 	bl	8000aa8 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
      this->_M_impl._M_start = __new_start;
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c9c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8000c9e:	69ba      	ldr	r2, [r7, #24]
 8000ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ca2:	441a      	add	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	609a      	str	r2, [r3, #8]
    }
 8000ca8:	bf00      	nop
 8000caa:	3730      	adds	r7, #48	; 0x30
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bdb0      	pop	{r4, r5, r7, pc}
 8000cb0:	08008144 	.word	0x08008144

08000cb4 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8000cb4:	b590      	push	{r4, r7, lr}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	685a      	ldr	r2, [r3, #4]
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d00e      	beq.n	8000cec <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh+0x38>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f000 f8f7 	bl	8000ec8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8000cda:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4621      	mov	r1, r4
 8000ce0:	6838      	ldr	r0, [r7, #0]
 8000ce2:	f000 f915 	bl	8000f10 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	683a      	ldr	r2, [r7, #0]
 8000cea:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 8000cec:	bf00      	nop
 8000cee:	3714      	adds	r7, #20
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd90      	pop	{r4, r7, pc}

08000cf4 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b084      	sub	sp, #16
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	60f8      	str	r0, [r7, #12]
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	68b9      	ldr	r1, [r7, #8]
 8000d1a:	68f8      	ldr	r0, [r7, #12]
 8000d1c:	f000 f906 	bl	8000f2c <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>
 8000d20:	bf00      	nop
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4618      	mov	r0, r3
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <_ZN9__gnu_cxx13new_allocatorIhE9constructIhJRKhEEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8000d3e:	b590      	push	{r4, r7, lr}
 8000d40:	b085      	sub	sp, #20
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	60f8      	str	r0, [r7, #12]
 8000d46:	60b9      	str	r1, [r7, #8]
 8000d48:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f7ff ffec 	bl	8000d28 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8000d50:	4603      	mov	r3, r0
 8000d52:	781c      	ldrb	r4, [r3, #0]
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	4619      	mov	r1, r3
 8000d58:	2001      	movs	r0, #1
 8000d5a:	f7ff fbc5 	bl	80004e8 <_ZnwjPv>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	4622      	mov	r2, r4
 8000d62:	701a      	strb	r2, [r3, #0]
 8000d64:	bf00      	nop
 8000d66:	3714      	adds	r7, #20
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd90      	pop	{r4, r7, pc}

08000d6c <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4618      	mov	r0, r3
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8000d8c:	b590      	push	{r4, r7, lr}
 8000d8e:	b087      	sub	sp, #28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8000d98:	68f8      	ldr	r0, [r7, #12]
 8000d9a:	f000 f8d5 	bl	8000f48 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8000d9e:	4604      	mov	r4, r0
 8000da0:	68f8      	ldr	r0, [r7, #12]
 8000da2:	f000 f8e2 	bl	8000f6a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8000da6:	4603      	mov	r3, r0
 8000da8:	1ae2      	subs	r2, r4, r3
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	bf34      	ite	cc
 8000db0:	2301      	movcc	r3, #1
 8000db2:	2300      	movcs	r3, #0
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d002      	beq.n	8000dc0 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f006 fff6 	bl	8007dac <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8000dc0:	68f8      	ldr	r0, [r7, #12]
 8000dc2:	f000 f8d2 	bl	8000f6a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8000dc6:	4604      	mov	r4, r0
 8000dc8:	68f8      	ldr	r0, [r7, #12]
 8000dca:	f000 f8ce 	bl	8000f6a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	f107 0208 	add.w	r2, r7, #8
 8000dd6:	f107 0310 	add.w	r3, r7, #16
 8000dda:	4611      	mov	r1, r2
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f000 f8d3 	bl	8000f88 <_ZSt3maxIjERKT_S2_S2_>
 8000de2:	4603      	mov	r3, r0
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4423      	add	r3, r4
 8000de8:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8000dea:	68f8      	ldr	r0, [r7, #12]
 8000dec:	f000 f8bd 	bl	8000f6a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8000df0:	4602      	mov	r2, r0
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d306      	bcc.n	8000e06 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x7a>
 8000df8:	68f8      	ldr	r0, [r7, #12]
 8000dfa:	f000 f8a5 	bl	8000f48 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d904      	bls.n	8000e10 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x84>
 8000e06:	68f8      	ldr	r0, [r7, #12]
 8000e08:	f000 f89e 	bl	8000f48 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	e000      	b.n	8000e12 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x86>
 8000e10:	697b      	ldr	r3, [r7, #20]
      }
 8000e12:	4618      	mov	r0, r3
 8000e14:	371c      	adds	r7, #28
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd90      	pop	{r4, r7, pc}

08000e1a <_ZNSt6vectorIhSaIhEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b084      	sub	sp, #16
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	f107 030c 	add.w	r3, r7, #12
 8000e28:	4611      	mov	r1, r2
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff ff9e 	bl	8000d6c <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	4618      	mov	r0, r3
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <_ZN9__gnu_cxxmiIPhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8000e3a:	b590      	push	{r4, r7, lr}
 8000e3c:	b083      	sub	sp, #12
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
 8000e42:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f000 f834 	bl	8000eb2 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	681c      	ldr	r4, [r3, #0]
 8000e4e:	6838      	ldr	r0, [r7, #0]
 8000e50:	f000 f82f 	bl	8000eb2 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8000e54:	4603      	mov	r3, r0
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	1ae3      	subs	r3, r4, r3
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd90      	pop	{r4, r7, pc}

08000e62 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
 8000e6a:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d006      	beq.n	8000e80 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x1e>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6839      	ldr	r1, [r7, #0]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 f89a 	bl	8000fb0 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	e000      	b.n	8000e82 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x20>
 8000e80:	2300      	movs	r3, #0
      }
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8000e8a:	b590      	push	{r4, r7, lr}
 8000e8c:	b087      	sub	sp, #28
 8000e8e:	af02      	add	r7, sp, #8
 8000e90:	60f8      	str	r0, [r7, #12]
 8000e92:	60b9      	str	r1, [r7, #8]
 8000e94:	607a      	str	r2, [r7, #4]
 8000e96:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8000e98:	f88d 4000 	strb.w	r4, [sp]
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	68b9      	ldr	r1, [r7, #8]
 8000ea2:	68f8      	ldr	r0, [r7, #12]
 8000ea4:	f000 f893 	bl	8000fce <_ZNSt6vectorIhSaIhEE14_S_do_relocateEPhS2_S2_RS0_St17integral_constantIbLb1EE>
 8000ea8:	4603      	mov	r3, r0
      }
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd90      	pop	{r4, r7, pc}

08000eb2 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8000eb2:	b480      	push	{r7}
 8000eb4:	b083      	sub	sp, #12
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8000ede:	b590      	push	{r4, r7, lr}
 8000ee0:	b085      	sub	sp, #20
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	60f8      	str	r0, [r7, #12]
 8000ee6:	60b9      	str	r1, [r7, #8]
 8000ee8:	607a      	str	r2, [r7, #4]
 8000eea:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	f000 f880 	bl	8000ff2 <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 8000ef2:	4604      	mov	r4, r0
 8000ef4:	68b8      	ldr	r0, [r7, #8]
 8000ef6:	f000 f87c 	bl	8000ff2 <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 8000efa:	4601      	mov	r1, r0
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	4620      	mov	r0, r4
 8000f02:	f000 f885 	bl	8001010 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>
 8000f06:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd90      	pop	{r4, r7, pc}

08000f10 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8000f1c:	68b9      	ldr	r1, [r7, #8]
 8000f1e:	68f8      	ldr	r0, [r7, #12]
 8000f20:	f000 f887 	bl	8001032 <_ZSt8_DestroyIPhEvT_S1_>
    }
 8000f24:	bf00      	nop
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8000f38:	6879      	ldr	r1, [r7, #4]
 8000f3a:	68b8      	ldr	r0, [r7, #8]
 8000f3c:	f006 ff20 	bl	8007d80 <_ZdlPvj>
      }
 8000f40:	bf00      	nop
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 f894 	bl	8001080 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 f876 	bl	800104c <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>
 8000f60:	4603      	mov	r3, r0
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <_ZNKSt6vectorIhSaIhEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685a      	ldr	r2, [r3, #4]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d201      	bcs.n	8000fa2 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	e000      	b.n	8000fa4 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8000fa2:	687b      	ldr	r3, [r7, #4]
    }
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8000fba:	2200      	movs	r2, #0
 8000fbc:	6839      	ldr	r1, [r7, #0]
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f000 f875 	bl	80010ae <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <_ZNSt6vectorIhSaIhEE14_S_do_relocateEPhS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b084      	sub	sp, #16
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	60f8      	str	r0, [r7, #12]
 8000fd6:	60b9      	str	r1, [r7, #8]
 8000fd8:	607a      	str	r2, [r7, #4]
 8000fda:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	68b9      	ldr	r1, [r7, #8]
 8000fe2:	68f8      	ldr	r0, [r7, #12]
 8000fe4:	f000 f884 	bl	80010f0 <_ZSt12__relocate_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 8000fe8:	4603      	mov	r3, r0
      }
 8000fea:	4618      	mov	r0, r3
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b084      	sub	sp, #16
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8000ffa:	f107 030c 	add.w	r3, r7, #12
 8000ffe:	6879      	ldr	r1, [r7, #4]
 8001000:	4618      	mov	r0, r3
 8001002:	f000 f892 	bl	800112a <_ZNSt13move_iteratorIPhEC1ES0_>
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	4618      	mov	r0, r3
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
 800101c:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	68b9      	ldr	r1, [r7, #8]
 8001022:	68f8      	ldr	r0, [r7, #12]
 8001024:	f000 f893 	bl	800114e <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 8001028:	4603      	mov	r3, r0
 800102a:	4618      	mov	r0, r3
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <_ZSt8_DestroyIPhEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
 800103a:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 800103c:	6839      	ldr	r1, [r7, #0]
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f000 f897 	bl	8001172 <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>
    }
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8001054:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001058:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f000 f894 	bl	8001188 <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>
 8001060:	4603      	mov	r3, r0
 8001062:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8001064:	f107 0208 	add.w	r2, r7, #8
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	4611      	mov	r1, r2
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f896 	bl	80011a0 <_ZSt3minIjERKT_S2_S2_>
 8001074:	4603      	mov	r3, r0
 8001076:	681b      	ldr	r3, [r3, #0]
      }
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800109e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 80010a2:	4618      	mov	r0, r3
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b084      	sub	sp, #16
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	60f8      	str	r0, [r7, #12]
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80010ba:	68f8      	ldr	r0, [r7, #12]
 80010bc:	f7ff ffeb 	bl	8001096 <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 80010c0:	4602      	mov	r2, r0
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	4293      	cmp	r3, r2
 80010c6:	bf8c      	ite	hi
 80010c8:	2301      	movhi	r3, #1
 80010ca:	2300      	movls	r3, #0
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	bf14      	ite	ne
 80010d2:	2301      	movne	r3, #1
 80010d4:	2300      	moveq	r3, #0
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv+0x32>
	    std::__throw_bad_alloc();
 80010dc:	f006 fe63 	bl	8007da6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80010e0:	68b8      	ldr	r0, [r7, #8]
 80010e2:	f006 fe4f 	bl	8007d84 <_Znwj>
 80010e6:	4603      	mov	r3, r0
      }
 80010e8:	4618      	mov	r0, r3
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <_ZSt12__relocate_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80010f0:	b5b0      	push	{r4, r5, r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
 80010fc:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 80010fe:	68f8      	ldr	r0, [r7, #12]
 8001100:	f000 f862 	bl	80011c8 <_ZSt12__niter_baseIPhET_S1_>
 8001104:	4604      	mov	r4, r0
 8001106:	68b8      	ldr	r0, [r7, #8]
 8001108:	f000 f85e 	bl	80011c8 <_ZSt12__niter_baseIPhET_S1_>
 800110c:	4605      	mov	r5, r0
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f000 f85a 	bl	80011c8 <_ZSt12__niter_baseIPhET_S1_>
 8001114:	4602      	mov	r2, r0
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	4629      	mov	r1, r5
 800111a:	4620      	mov	r0, r4
 800111c:	f000 f85f 	bl	80011de <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 8001120:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bdb0      	pop	{r4, r5, r7, pc}

0800112a <_ZNSt13move_iteratorIPhEC1ES0_>:
      move_iterator(iterator_type __i)
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
 8001132:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8001134:	463b      	mov	r3, r7
 8001136:	4618      	mov	r0, r3
 8001138:	f000 f86c 	bl	8001214 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 800113c:	4603      	mov	r3, r0
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800114e:	b580      	push	{r7, lr}
 8001150:	b086      	sub	sp, #24
 8001152:	af00      	add	r7, sp, #0
 8001154:	60f8      	str	r0, [r7, #12]
 8001156:	60b9      	str	r1, [r7, #8]
 8001158:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800115a:	2301      	movs	r3, #1
 800115c:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	68b9      	ldr	r1, [r7, #8]
 8001162:	68f8      	ldr	r0, [r7, #12]
 8001164:	f000 f861 	bl	800122a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>
 8001168:	4603      	mov	r3, r0
    }
 800116a:	4618      	mov	r0, r3
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8001172:	b480      	push	{r7}
 8001174:	b083      	sub	sp, #12
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	6039      	str	r1, [r7, #0]
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f000 f85a 	bl	800124a <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 8001196:	4603      	mov	r3, r0
      }
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d201      	bcs.n	80011ba <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	e000      	b.n	80011bc <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80011ba:	687b      	ldr	r3, [r7, #4]
    }
 80011bc:	4618      	mov	r0, r3
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <_ZSt12__niter_baseIPhET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4618      	mov	r0, r3
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 80011de:	b580      	push	{r7, lr}
 80011e0:	b086      	sub	sp, #24
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	60f8      	str	r0, [r7, #12]
 80011e6:	60b9      	str	r1, [r7, #8]
 80011e8:	607a      	str	r2, [r7, #4]
 80011ea:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80011ec:	68ba      	ldr	r2, [r7, #8]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	dd05      	ble.n	8001206 <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x28>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	461a      	mov	r2, r3
 80011fe:	68f9      	ldr	r1, [r7, #12]
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f006 fea5 	bl	8007f50 <memmove>
      return __result + __count;
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	4413      	add	r3, r2
    }
 800120c:	4618      	mov	r0, r3
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4618      	mov	r0, r3
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800122a:	b580      	push	{r7, lr}
 800122c:	b084      	sub	sp, #16
 800122e:	af00      	add	r7, sp, #0
 8001230:	60f8      	str	r0, [r7, #12]
 8001232:	60b9      	str	r1, [r7, #8]
 8001234:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	68b9      	ldr	r1, [r7, #8]
 800123a:	68f8      	ldr	r0, [r7, #12]
 800123c:	f000 f811 	bl	8001262 <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 8001240:	4603      	mov	r3, r0
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff ff1f 	bl	8001096 <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 8001258:	4603      	mov	r3, r0
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8001262:	b590      	push	{r4, r7, lr}
 8001264:	b085      	sub	sp, #20
 8001266:	af00      	add	r7, sp, #0
 8001268:	60f8      	str	r0, [r7, #12]
 800126a:	60b9      	str	r1, [r7, #8]
 800126c:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f000 f80f 	bl	8001292 <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8001274:	4604      	mov	r4, r0
 8001276:	68b8      	ldr	r0, [r7, #8]
 8001278:	f000 f80b 	bl	8001292 <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800127c:	4603      	mov	r3, r0
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	4619      	mov	r1, r3
 8001282:	4620      	mov	r0, r4
 8001284:	f000 f816 	bl	80012b4 <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>
 8001288:	4603      	mov	r3, r0
    }
 800128a:	4618      	mov	r0, r3
 800128c:	3714      	adds	r7, #20
 800128e:	46bd      	mov	sp, r7
 8001290:	bd90      	pop	{r4, r7, pc}

08001292 <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    };

  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	4618      	mov	r0, r3
 800129e:	f000 f82c 	bl	80012fa <_ZNKSt13move_iteratorIPhE4baseEv>
 80012a2:	4603      	mov	r3, r0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f000 f834 	bl	8001312 <_ZSt12__miter_baseIPhET_S1_>
 80012aa:	4603      	mov	r3, r0
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80012b4:	b5b0      	push	{r4, r5, r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f7ff ff81 	bl	80011c8 <_ZSt12__niter_baseIPhET_S1_>
 80012c6:	4604      	mov	r4, r0
 80012c8:	68b8      	ldr	r0, [r7, #8]
 80012ca:	f7ff ff7d 	bl	80011c8 <_ZSt12__niter_baseIPhET_S1_>
 80012ce:	4605      	mov	r5, r0
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff ff78 	bl	80011c8 <_ZSt12__niter_baseIPhET_S1_>
 80012d8:	4603      	mov	r3, r0
 80012da:	461a      	mov	r2, r3
 80012dc:	4629      	mov	r1, r5
 80012de:	4620      	mov	r0, r4
 80012e0:	f000 f822 	bl	8001328 <_ZSt14__copy_move_a1ILb1EPhS0_ET1_T0_S2_S1_>
 80012e4:	4602      	mov	r2, r0
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	4611      	mov	r1, r2
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 f82c 	bl	8001348 <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 80012f0:	4603      	mov	r3, r0
    }
 80012f2:	4618      	mov	r0, r3
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bdb0      	pop	{r4, r5, r7, pc}

080012fa <_ZNKSt13move_iteratorIPhE4baseEv>:
      base() const
 80012fa:	b480      	push	{r7}
 80012fc:	b083      	sub	sp, #12
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <_ZSt12__miter_baseIPhET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8001312:	b480      	push	{r7}
 8001314:	b083      	sub	sp, #12
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
    { return __it; }
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4618      	mov	r0, r3
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <_ZSt14__copy_move_a1ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	68b9      	ldr	r1, [r7, #8]
 8001338:	68f8      	ldr	r0, [r7, #12]
 800133a:	f000 f811 	bl	8001360 <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>
 800133e:	4603      	mov	r3, r0
 8001340:	4618      	mov	r0, r3
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <_ZSt12__niter_wrapIPhET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
    { return __res; }
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	68b9      	ldr	r1, [r7, #8]
 8001370:	68f8      	ldr	r0, [r7, #12]
 8001372:	f000 f805 	bl	8001380 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8001376:	4603      	mov	r3, r0
    }
 8001378:	4618      	mov	r0, r3
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800138c:	68ba      	ldr	r2, [r7, #8]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d005      	beq.n	80013a6 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	461a      	mov	r2, r3
 800139e:	68f9      	ldr	r1, [r7, #12]
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f006 fdd5 	bl	8007f50 <memmove>
	  return __result + _Num;
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	4413      	add	r3, r2
	}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d107      	bne.n	80013d4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d102      	bne.n	80013d4 <_Z41__static_initialization_and_destruction_0ii+0x20>
std::vector<uint8_t>rxBuff;
 80013ce:	4809      	ldr	r0, [pc, #36]	; (80013f4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80013d0:	f7ff f8af 	bl	8000532 <_ZNSt6vectorIhSaIhEEC1Ev>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d107      	bne.n	80013ea <_Z41__static_initialization_and_destruction_0ii+0x36>
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d102      	bne.n	80013ea <_Z41__static_initialization_and_destruction_0ii+0x36>
 80013e4:	4803      	ldr	r0, [pc, #12]	; (80013f4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80013e6:	f000 f807 	bl	80013f8 <_ZNSt6vectorIhSaIhEED1Ev>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	2000018c 	.word	0x2000018c

080013f8 <_ZNSt6vectorIhSaIhEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80013f8:	b5b0      	push	{r4, r5, r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681c      	ldr	r4, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff fd5c 	bl	8000ec8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8001410:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001412:	461a      	mov	r2, r3
 8001414:	4629      	mov	r1, r5
 8001416:	4620      	mov	r0, r4
 8001418:	f7ff fd7a 	bl	8000f10 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
      }
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fabd 	bl	800099e <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bdb0      	pop	{r4, r5, r7, pc}

0800142e <_GLOBAL__sub_I_txBuff>:
 800142e:	b580      	push	{r7, lr}
 8001430:	af00      	add	r7, sp, #0
 8001432:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001436:	2001      	movs	r0, #1
 8001438:	f7ff ffbc 	bl	80013b4 <_Z41__static_initialization_and_destruction_0ii>
 800143c:	bd80      	pop	{r7, pc}

0800143e <_GLOBAL__sub_D_txBuff>:
 800143e:	b580      	push	{r7, lr}
 8001440:	af00      	add	r7, sp, #0
 8001442:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001446:	2000      	movs	r0, #0
 8001448:	f7ff ffb4 	bl	80013b4 <_Z41__static_initialization_and_destruction_0ii>
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	4b10      	ldr	r3, [pc, #64]	; (800149c <HAL_MspInit+0x4c>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	4a0f      	ldr	r2, [pc, #60]	; (800149c <HAL_MspInit+0x4c>)
 8001460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001464:	6453      	str	r3, [r2, #68]	; 0x44
 8001466:	4b0d      	ldr	r3, [pc, #52]	; (800149c <HAL_MspInit+0x4c>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	603b      	str	r3, [r7, #0]
 8001476:	4b09      	ldr	r3, [pc, #36]	; (800149c <HAL_MspInit+0x4c>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	4a08      	ldr	r2, [pc, #32]	; (800149c <HAL_MspInit+0x4c>)
 800147c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001480:	6413      	str	r3, [r2, #64]	; 0x40
 8001482:	4b06      	ldr	r3, [pc, #24]	; (800149c <HAL_MspInit+0x4c>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40023800 	.word	0x40023800

080014a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <NMI_Handler+0x4>

080014a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014aa:	e7fe      	b.n	80014aa <HardFault_Handler+0x4>

080014ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <MemManage_Handler+0x4>

080014b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b6:	e7fe      	b.n	80014b6 <BusFault_Handler+0x4>

080014b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014bc:	e7fe      	b.n	80014bc <UsageFault_Handler+0x4>

080014be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ec:	f000 f8f2 	bl	80016d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80014f8:	4802      	ldr	r0, [pc, #8]	; (8001504 <OTG_FS_IRQHandler+0x10>)
 80014fa:	f000 fd56 	bl	8001faa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	2000168c 	.word	0x2000168c

08001508 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  return 1;
 800150c:	2301      	movs	r3, #1
}
 800150e:	4618      	mov	r0, r3
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <_kill>:

int _kill(int pid, int sig)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001522:	f006 fd8b 	bl	800803c <__errno>
 8001526:	4603      	mov	r3, r0
 8001528:	2216      	movs	r2, #22
 800152a:	601a      	str	r2, [r3, #0]
  return -1;
 800152c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001530:	4618      	mov	r0, r3
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <_exit>:

void _exit (int status)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001540:	f04f 31ff 	mov.w	r1, #4294967295
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff ffe7 	bl	8001518 <_kill>
  while (1) {}    /* Make sure we hang here */
 800154a:	e7fe      	b.n	800154a <_exit+0x12>

0800154c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001554:	4a14      	ldr	r2, [pc, #80]	; (80015a8 <_sbrk+0x5c>)
 8001556:	4b15      	ldr	r3, [pc, #84]	; (80015ac <_sbrk+0x60>)
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001560:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <_sbrk+0x64>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d102      	bne.n	800156e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001568:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <_sbrk+0x64>)
 800156a:	4a12      	ldr	r2, [pc, #72]	; (80015b4 <_sbrk+0x68>)
 800156c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <_sbrk+0x64>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	429a      	cmp	r2, r3
 800157a:	d207      	bcs.n	800158c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800157c:	f006 fd5e 	bl	800803c <__errno>
 8001580:	4603      	mov	r3, r0
 8001582:	220c      	movs	r2, #12
 8001584:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001586:	f04f 33ff 	mov.w	r3, #4294967295
 800158a:	e009      	b.n	80015a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <_sbrk+0x64>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001592:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <_sbrk+0x64>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <_sbrk+0x64>)
 800159c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800159e:	68fb      	ldr	r3, [r7, #12]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20030000 	.word	0x20030000
 80015ac:	00000400 	.word	0x00000400
 80015b0:	200001a4 	.word	0x200001a4
 80015b4:	20001f08 	.word	0x20001f08

080015b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <SystemInit+0x20>)
 80015be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015c2:	4a05      	ldr	r2, [pc, #20]	; (80015d8 <SystemInit+0x20>)
 80015c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80015dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001614 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015e0:	480d      	ldr	r0, [pc, #52]	; (8001618 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015e2:	490e      	ldr	r1, [pc, #56]	; (800161c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015e4:	4a0e      	ldr	r2, [pc, #56]	; (8001620 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015e8:	e002      	b.n	80015f0 <LoopCopyDataInit>

080015ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ee:	3304      	adds	r3, #4

080015f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f4:	d3f9      	bcc.n	80015ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015f6:	4a0b      	ldr	r2, [pc, #44]	; (8001624 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015f8:	4c0b      	ldr	r4, [pc, #44]	; (8001628 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015fc:	e001      	b.n	8001602 <LoopFillZerobss>

080015fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001600:	3204      	adds	r2, #4

08001602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001604:	d3fb      	bcc.n	80015fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001606:	f7ff ffd7 	bl	80015b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800160a:	f006 fd1d 	bl	8008048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800160e:	f7fe ff9d 	bl	800054c <main>
  bx  lr    
 8001612:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001614:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800161c:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8001620:	080081d0 	.word	0x080081d0
  ldr r2, =_sbss
 8001624:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8001628:	20001f04 	.word	0x20001f04

0800162c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800162c:	e7fe      	b.n	800162c <ADC_IRQHandler>
	...

08001630 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001634:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <HAL_Init+0x40>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a0d      	ldr	r2, [pc, #52]	; (8001670 <HAL_Init+0x40>)
 800163a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800163e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001640:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <HAL_Init+0x40>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a0a      	ldr	r2, [pc, #40]	; (8001670 <HAL_Init+0x40>)
 8001646:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800164a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800164c:	4b08      	ldr	r3, [pc, #32]	; (8001670 <HAL_Init+0x40>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a07      	ldr	r2, [pc, #28]	; (8001670 <HAL_Init+0x40>)
 8001652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001656:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001658:	2003      	movs	r0, #3
 800165a:	f000 f94f 	bl	80018fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800165e:	2000      	movs	r0, #0
 8001660:	f000 f808 	bl	8001674 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001664:	f7ff fef4 	bl	8001450 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40023c00 	.word	0x40023c00

08001674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <HAL_InitTick+0x54>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4b12      	ldr	r3, [pc, #72]	; (80016cc <HAL_InitTick+0x58>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	4619      	mov	r1, r3
 8001686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800168a:	fbb3 f3f1 	udiv	r3, r3, r1
 800168e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001692:	4618      	mov	r0, r3
 8001694:	f000 f967 	bl	8001966 <HAL_SYSTICK_Config>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e00e      	b.n	80016c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b0f      	cmp	r3, #15
 80016a6:	d80a      	bhi.n	80016be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a8:	2200      	movs	r2, #0
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	f04f 30ff 	mov.w	r0, #4294967295
 80016b0:	f000 f92f 	bl	8001912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b4:	4a06      	ldr	r2, [pc, #24]	; (80016d0 <HAL_InitTick+0x5c>)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
 80016bc:	e000      	b.n	80016c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000024 	.word	0x20000024
 80016cc:	2000002c 	.word	0x2000002c
 80016d0:	20000028 	.word	0x20000028

080016d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_IncTick+0x20>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	461a      	mov	r2, r3
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_IncTick+0x24>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4413      	add	r3, r2
 80016e4:	4a04      	ldr	r2, [pc, #16]	; (80016f8 <HAL_IncTick+0x24>)
 80016e6:	6013      	str	r3, [r2, #0]
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	2000002c 	.word	0x2000002c
 80016f8:	200001a8 	.word	0x200001a8

080016fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001700:	4b03      	ldr	r3, [pc, #12]	; (8001710 <HAL_GetTick+0x14>)
 8001702:	681b      	ldr	r3, [r3, #0]
}
 8001704:	4618      	mov	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	200001a8 	.word	0x200001a8

08001714 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800171c:	f7ff ffee 	bl	80016fc <HAL_GetTick>
 8001720:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800172c:	d005      	beq.n	800173a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800172e:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <HAL_Delay+0x44>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	461a      	mov	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4413      	add	r3, r2
 8001738:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800173a:	bf00      	nop
 800173c:	f7ff ffde 	bl	80016fc <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	429a      	cmp	r2, r3
 800174a:	d8f7      	bhi.n	800173c <HAL_Delay+0x28>
  {
  }
}
 800174c:	bf00      	nop
 800174e:	bf00      	nop
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	2000002c 	.word	0x2000002c

0800175c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <__NVIC_SetPriorityGrouping+0x44>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001778:	4013      	ands	r3, r2
 800177a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001784:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800178c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800178e:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	60d3      	str	r3, [r2, #12]
}
 8001794:	bf00      	nop
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a8:	4b04      	ldr	r3, [pc, #16]	; (80017bc <__NVIC_GetPriorityGrouping+0x18>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	0a1b      	lsrs	r3, r3, #8
 80017ae:	f003 0307 	and.w	r3, r3, #7
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	db0b      	blt.n	80017ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	f003 021f 	and.w	r2, r3, #31
 80017d8:	4907      	ldr	r1, [pc, #28]	; (80017f8 <__NVIC_EnableIRQ+0x38>)
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	095b      	lsrs	r3, r3, #5
 80017e0:	2001      	movs	r0, #1
 80017e2:	fa00 f202 	lsl.w	r2, r0, r2
 80017e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000e100 	.word	0xe000e100

080017fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	6039      	str	r1, [r7, #0]
 8001806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180c:	2b00      	cmp	r3, #0
 800180e:	db0a      	blt.n	8001826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	b2da      	uxtb	r2, r3
 8001814:	490c      	ldr	r1, [pc, #48]	; (8001848 <__NVIC_SetPriority+0x4c>)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	0112      	lsls	r2, r2, #4
 800181c:	b2d2      	uxtb	r2, r2
 800181e:	440b      	add	r3, r1
 8001820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001824:	e00a      	b.n	800183c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	b2da      	uxtb	r2, r3
 800182a:	4908      	ldr	r1, [pc, #32]	; (800184c <__NVIC_SetPriority+0x50>)
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	3b04      	subs	r3, #4
 8001834:	0112      	lsls	r2, r2, #4
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	440b      	add	r3, r1
 800183a:	761a      	strb	r2, [r3, #24]
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000e100 	.word	0xe000e100
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001850:	b480      	push	{r7}
 8001852:	b089      	sub	sp, #36	; 0x24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f1c3 0307 	rsb	r3, r3, #7
 800186a:	2b04      	cmp	r3, #4
 800186c:	bf28      	it	cs
 800186e:	2304      	movcs	r3, #4
 8001870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3304      	adds	r3, #4
 8001876:	2b06      	cmp	r3, #6
 8001878:	d902      	bls.n	8001880 <NVIC_EncodePriority+0x30>
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3b03      	subs	r3, #3
 800187e:	e000      	b.n	8001882 <NVIC_EncodePriority+0x32>
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001884:	f04f 32ff 	mov.w	r2, #4294967295
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43da      	mvns	r2, r3
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	401a      	ands	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001898:	f04f 31ff 	mov.w	r1, #4294967295
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	fa01 f303 	lsl.w	r3, r1, r3
 80018a2:	43d9      	mvns	r1, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a8:	4313      	orrs	r3, r2
         );
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3724      	adds	r7, #36	; 0x24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
	...

080018b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c8:	d301      	bcc.n	80018ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ca:	2301      	movs	r3, #1
 80018cc:	e00f      	b.n	80018ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ce:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <SysTick_Config+0x40>)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018d6:	210f      	movs	r1, #15
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295
 80018dc:	f7ff ff8e 	bl	80017fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e0:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <SysTick_Config+0x40>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018e6:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <SysTick_Config+0x40>)
 80018e8:	2207      	movs	r2, #7
 80018ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	e000e010 	.word	0xe000e010

080018fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff ff29 	bl	800175c <__NVIC_SetPriorityGrouping>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001912:	b580      	push	{r7, lr}
 8001914:	b086      	sub	sp, #24
 8001916:	af00      	add	r7, sp, #0
 8001918:	4603      	mov	r3, r0
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
 800191e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001924:	f7ff ff3e 	bl	80017a4 <__NVIC_GetPriorityGrouping>
 8001928:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	68b9      	ldr	r1, [r7, #8]
 800192e:	6978      	ldr	r0, [r7, #20]
 8001930:	f7ff ff8e 	bl	8001850 <NVIC_EncodePriority>
 8001934:	4602      	mov	r2, r0
 8001936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800193a:	4611      	mov	r1, r2
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff ff5d 	bl	80017fc <__NVIC_SetPriority>
}
 8001942:	bf00      	nop
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	4603      	mov	r3, r0
 8001952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff31 	bl	80017c0 <__NVIC_EnableIRQ>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff ffa2 	bl	80018b8 <SysTick_Config>
 8001974:	4603      	mov	r3, r0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001980:	b480      	push	{r7}
 8001982:	b089      	sub	sp, #36	; 0x24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001992:	2300      	movs	r3, #0
 8001994:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001996:	2300      	movs	r3, #0
 8001998:	61fb      	str	r3, [r7, #28]
 800199a:	e177      	b.n	8001c8c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800199c:	2201      	movs	r2, #1
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	f040 8166 	bne.w	8001c86 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d005      	beq.n	80019d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d130      	bne.n	8001a34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	2203      	movs	r2, #3
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4013      	ands	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	68da      	ldr	r2, [r3, #12]
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a08:	2201      	movs	r2, #1
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	091b      	lsrs	r3, r3, #4
 8001a1e:	f003 0201 	and.w	r2, r3, #1
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 0303 	and.w	r3, r3, #3
 8001a3c:	2b03      	cmp	r3, #3
 8001a3e:	d017      	beq.n	8001a70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d123      	bne.n	8001ac4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	08da      	lsrs	r2, r3, #3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3208      	adds	r2, #8
 8001a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	220f      	movs	r2, #15
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	691a      	ldr	r2, [r3, #16]
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	08da      	lsrs	r2, r3, #3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3208      	adds	r2, #8
 8001abe:	69b9      	ldr	r1, [r7, #24]
 8001ac0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	2203      	movs	r2, #3
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0203 	and.w	r2, r3, #3
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 80c0 	beq.w	8001c86 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	4b66      	ldr	r3, [pc, #408]	; (8001ca4 <HAL_GPIO_Init+0x324>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0e:	4a65      	ldr	r2, [pc, #404]	; (8001ca4 <HAL_GPIO_Init+0x324>)
 8001b10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b14:	6453      	str	r3, [r2, #68]	; 0x44
 8001b16:	4b63      	ldr	r3, [pc, #396]	; (8001ca4 <HAL_GPIO_Init+0x324>)
 8001b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b22:	4a61      	ldr	r2, [pc, #388]	; (8001ca8 <HAL_GPIO_Init+0x328>)
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	089b      	lsrs	r3, r3, #2
 8001b28:	3302      	adds	r3, #2
 8001b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f003 0303 	and.w	r3, r3, #3
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	220f      	movs	r2, #15
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4013      	ands	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a58      	ldr	r2, [pc, #352]	; (8001cac <HAL_GPIO_Init+0x32c>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d037      	beq.n	8001bbe <HAL_GPIO_Init+0x23e>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a57      	ldr	r2, [pc, #348]	; (8001cb0 <HAL_GPIO_Init+0x330>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d031      	beq.n	8001bba <HAL_GPIO_Init+0x23a>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a56      	ldr	r2, [pc, #344]	; (8001cb4 <HAL_GPIO_Init+0x334>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d02b      	beq.n	8001bb6 <HAL_GPIO_Init+0x236>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a55      	ldr	r2, [pc, #340]	; (8001cb8 <HAL_GPIO_Init+0x338>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d025      	beq.n	8001bb2 <HAL_GPIO_Init+0x232>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a54      	ldr	r2, [pc, #336]	; (8001cbc <HAL_GPIO_Init+0x33c>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d01f      	beq.n	8001bae <HAL_GPIO_Init+0x22e>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a53      	ldr	r2, [pc, #332]	; (8001cc0 <HAL_GPIO_Init+0x340>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d019      	beq.n	8001baa <HAL_GPIO_Init+0x22a>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a52      	ldr	r2, [pc, #328]	; (8001cc4 <HAL_GPIO_Init+0x344>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d013      	beq.n	8001ba6 <HAL_GPIO_Init+0x226>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a51      	ldr	r2, [pc, #324]	; (8001cc8 <HAL_GPIO_Init+0x348>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d00d      	beq.n	8001ba2 <HAL_GPIO_Init+0x222>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a50      	ldr	r2, [pc, #320]	; (8001ccc <HAL_GPIO_Init+0x34c>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d007      	beq.n	8001b9e <HAL_GPIO_Init+0x21e>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a4f      	ldr	r2, [pc, #316]	; (8001cd0 <HAL_GPIO_Init+0x350>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d101      	bne.n	8001b9a <HAL_GPIO_Init+0x21a>
 8001b96:	2309      	movs	r3, #9
 8001b98:	e012      	b.n	8001bc0 <HAL_GPIO_Init+0x240>
 8001b9a:	230a      	movs	r3, #10
 8001b9c:	e010      	b.n	8001bc0 <HAL_GPIO_Init+0x240>
 8001b9e:	2308      	movs	r3, #8
 8001ba0:	e00e      	b.n	8001bc0 <HAL_GPIO_Init+0x240>
 8001ba2:	2307      	movs	r3, #7
 8001ba4:	e00c      	b.n	8001bc0 <HAL_GPIO_Init+0x240>
 8001ba6:	2306      	movs	r3, #6
 8001ba8:	e00a      	b.n	8001bc0 <HAL_GPIO_Init+0x240>
 8001baa:	2305      	movs	r3, #5
 8001bac:	e008      	b.n	8001bc0 <HAL_GPIO_Init+0x240>
 8001bae:	2304      	movs	r3, #4
 8001bb0:	e006      	b.n	8001bc0 <HAL_GPIO_Init+0x240>
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e004      	b.n	8001bc0 <HAL_GPIO_Init+0x240>
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	e002      	b.n	8001bc0 <HAL_GPIO_Init+0x240>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e000      	b.n	8001bc0 <HAL_GPIO_Init+0x240>
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	69fa      	ldr	r2, [r7, #28]
 8001bc2:	f002 0203 	and.w	r2, r2, #3
 8001bc6:	0092      	lsls	r2, r2, #2
 8001bc8:	4093      	lsls	r3, r2
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bd0:	4935      	ldr	r1, [pc, #212]	; (8001ca8 <HAL_GPIO_Init+0x328>)
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	089b      	lsrs	r3, r3, #2
 8001bd6:	3302      	adds	r3, #2
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bde:	4b3d      	ldr	r3, [pc, #244]	; (8001cd4 <HAL_GPIO_Init+0x354>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	43db      	mvns	r3, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4013      	ands	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c02:	4a34      	ldr	r2, [pc, #208]	; (8001cd4 <HAL_GPIO_Init+0x354>)
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c08:	4b32      	ldr	r3, [pc, #200]	; (8001cd4 <HAL_GPIO_Init+0x354>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	43db      	mvns	r3, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4013      	ands	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c2c:	4a29      	ldr	r2, [pc, #164]	; (8001cd4 <HAL_GPIO_Init+0x354>)
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c32:	4b28      	ldr	r3, [pc, #160]	; (8001cd4 <HAL_GPIO_Init+0x354>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c56:	4a1f      	ldr	r2, [pc, #124]	; (8001cd4 <HAL_GPIO_Init+0x354>)
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c5c:	4b1d      	ldr	r3, [pc, #116]	; (8001cd4 <HAL_GPIO_Init+0x354>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	43db      	mvns	r3, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d003      	beq.n	8001c80 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c80:	4a14      	ldr	r2, [pc, #80]	; (8001cd4 <HAL_GPIO_Init+0x354>)
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	61fb      	str	r3, [r7, #28]
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	2b0f      	cmp	r3, #15
 8001c90:	f67f ae84 	bls.w	800199c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c94:	bf00      	nop
 8001c96:	bf00      	nop
 8001c98:	3724      	adds	r7, #36	; 0x24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40013800 	.word	0x40013800
 8001cac:	40020000 	.word	0x40020000
 8001cb0:	40020400 	.word	0x40020400
 8001cb4:	40020800 	.word	0x40020800
 8001cb8:	40020c00 	.word	0x40020c00
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	40021400 	.word	0x40021400
 8001cc4:	40021800 	.word	0x40021800
 8001cc8:	40021c00 	.word	0x40021c00
 8001ccc:	40022000 	.word	0x40022000
 8001cd0:	40022400 	.word	0x40022400
 8001cd4:	40013c00 	.word	0x40013c00

08001cd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	807b      	strh	r3, [r7, #2]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ce8:	787b      	ldrb	r3, [r7, #1]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cee:	887a      	ldrh	r2, [r7, #2]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cf4:	e003      	b.n	8001cfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cf6:	887b      	ldrh	r3, [r7, #2]
 8001cf8:	041a      	lsls	r2, r3, #16
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	619a      	str	r2, [r3, #24]
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d0c:	b08f      	sub	sp, #60	; 0x3c
 8001d0e:	af0a      	add	r7, sp, #40	; 0x28
 8001d10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e10f      	b.n	8001f3c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d106      	bne.n	8001d3c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f005 fd00 	bl	800773c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2203      	movs	r2, #3
 8001d40:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d102      	bne.n	8001d56 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f001 ffd7 	bl	8003d0e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	603b      	str	r3, [r7, #0]
 8001d66:	687e      	ldr	r6, [r7, #4]
 8001d68:	466d      	mov	r5, sp
 8001d6a:	f106 0410 	add.w	r4, r6, #16
 8001d6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d76:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d7a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d7e:	1d33      	adds	r3, r6, #4
 8001d80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d82:	6838      	ldr	r0, [r7, #0]
 8001d84:	f001 feae 	bl	8003ae4 <USB_CoreInit>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d005      	beq.n	8001d9a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2202      	movs	r2, #2
 8001d92:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e0d0      	b.n	8001f3c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2100      	movs	r1, #0
 8001da0:	4618      	mov	r0, r3
 8001da2:	f001 ffc5 	bl	8003d30 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001da6:	2300      	movs	r3, #0
 8001da8:	73fb      	strb	r3, [r7, #15]
 8001daa:	e04a      	b.n	8001e42 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001dac:	7bfa      	ldrb	r2, [r7, #15]
 8001dae:	6879      	ldr	r1, [r7, #4]
 8001db0:	4613      	mov	r3, r2
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	4413      	add	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	440b      	add	r3, r1
 8001dba:	333d      	adds	r3, #61	; 0x3d
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001dc0:	7bfa      	ldrb	r2, [r7, #15]
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	4413      	add	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	440b      	add	r3, r1
 8001dce:	333c      	adds	r3, #60	; 0x3c
 8001dd0:	7bfa      	ldrb	r2, [r7, #15]
 8001dd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001dd4:	7bfa      	ldrb	r2, [r7, #15]
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	b298      	uxth	r0, r3
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	4413      	add	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	440b      	add	r3, r1
 8001de6:	3344      	adds	r3, #68	; 0x44
 8001de8:	4602      	mov	r2, r0
 8001dea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001dec:	7bfa      	ldrb	r2, [r7, #15]
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	4413      	add	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	3340      	adds	r3, #64	; 0x40
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e00:	7bfa      	ldrb	r2, [r7, #15]
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	4613      	mov	r3, r2
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	4413      	add	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	3348      	adds	r3, #72	; 0x48
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e14:	7bfa      	ldrb	r2, [r7, #15]
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	4413      	add	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	334c      	adds	r3, #76	; 0x4c
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e28:	7bfa      	ldrb	r2, [r7, #15]
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	4413      	add	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	440b      	add	r3, r1
 8001e36:	3354      	adds	r3, #84	; 0x54
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	73fb      	strb	r3, [r7, #15]
 8001e42:	7bfa      	ldrb	r2, [r7, #15]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d3af      	bcc.n	8001dac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	73fb      	strb	r3, [r7, #15]
 8001e50:	e044      	b.n	8001edc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e52:	7bfa      	ldrb	r2, [r7, #15]
 8001e54:	6879      	ldr	r1, [r7, #4]
 8001e56:	4613      	mov	r3, r2
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	4413      	add	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	440b      	add	r3, r1
 8001e60:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001e64:	2200      	movs	r2, #0
 8001e66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e68:	7bfa      	ldrb	r2, [r7, #15]
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	4413      	add	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	440b      	add	r3, r1
 8001e76:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001e7a:	7bfa      	ldrb	r2, [r7, #15]
 8001e7c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e7e:	7bfa      	ldrb	r2, [r7, #15]
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	4613      	mov	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	4413      	add	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	440b      	add	r3, r1
 8001e8c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e90:	2200      	movs	r2, #0
 8001e92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e94:	7bfa      	ldrb	r2, [r7, #15]
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001eaa:	7bfa      	ldrb	r2, [r7, #15]
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	4413      	add	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	440b      	add	r3, r1
 8001eb8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ec0:	7bfa      	ldrb	r2, [r7, #15]
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	4413      	add	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	440b      	add	r3, r1
 8001ece:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	73fb      	strb	r3, [r7, #15]
 8001edc:	7bfa      	ldrb	r2, [r7, #15]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d3b5      	bcc.n	8001e52 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	603b      	str	r3, [r7, #0]
 8001eec:	687e      	ldr	r6, [r7, #4]
 8001eee:	466d      	mov	r5, sp
 8001ef0:	f106 0410 	add.w	r4, r6, #16
 8001ef4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ef6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ef8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001efa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001efc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f00:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f04:	1d33      	adds	r3, r6, #4
 8001f06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f08:	6838      	ldr	r0, [r7, #0]
 8001f0a:	f001 ff5d 	bl	8003dc8 <USB_DevInit>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d005      	beq.n	8001f20 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2202      	movs	r2, #2
 8001f18:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e00d      	b.n	8001f3c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f003 f8ac 	bl	8005092 <USB_DevDisconnect>

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f44 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d101      	bne.n	8001f60 <HAL_PCD_Start+0x1c>
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	e020      	b.n	8001fa2 <HAL_PCD_Start+0x5e>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d109      	bne.n	8001f84 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d005      	beq.n	8001f84 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f001 feaf 	bl	8003cec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f003 f85c 	bl	8005050 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001faa:	b590      	push	{r4, r7, lr}
 8001fac:	b08d      	sub	sp, #52	; 0x34
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fb8:	6a3b      	ldr	r3, [r7, #32]
 8001fba:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f003 f91a 	bl	80051fa <USB_GetMode>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f040 848a 	bne.w	80028e2 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f003 f87e 	bl	80050d4 <USB_ReadInterrupts>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 8480 	beq.w	80028e0 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	0a1b      	lsrs	r3, r3, #8
 8001fea:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f003 f86b 	bl	80050d4 <USB_ReadInterrupts>
 8001ffe:	4603      	mov	r3, r0
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b02      	cmp	r3, #2
 8002006:	d107      	bne.n	8002018 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	695a      	ldr	r2, [r3, #20]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f002 0202 	and.w	r2, r2, #2
 8002016:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f003 f859 	bl	80050d4 <USB_ReadInterrupts>
 8002022:	4603      	mov	r3, r0
 8002024:	f003 0310 	and.w	r3, r3, #16
 8002028:	2b10      	cmp	r3, #16
 800202a:	d161      	bne.n	80020f0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	699a      	ldr	r2, [r3, #24]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 0210 	bic.w	r2, r2, #16
 800203a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800203c:	6a3b      	ldr	r3, [r7, #32]
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	f003 020f 	and.w	r2, r3, #15
 8002048:	4613      	mov	r3, r2
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	4413      	add	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	4413      	add	r3, r2
 8002058:	3304      	adds	r3, #4
 800205a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	0c5b      	lsrs	r3, r3, #17
 8002060:	f003 030f 	and.w	r3, r3, #15
 8002064:	2b02      	cmp	r3, #2
 8002066:	d124      	bne.n	80020b2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800206e:	4013      	ands	r3, r2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d035      	beq.n	80020e0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	091b      	lsrs	r3, r3, #4
 800207c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800207e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002082:	b29b      	uxth	r3, r3
 8002084:	461a      	mov	r2, r3
 8002086:	6a38      	ldr	r0, [r7, #32]
 8002088:	f002 fe90 	bl	8004dac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	091b      	lsrs	r3, r3, #4
 8002094:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002098:	441a      	add	r2, r3
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	6a1a      	ldr	r2, [r3, #32]
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	091b      	lsrs	r3, r3, #4
 80020a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020aa:	441a      	add	r2, r3
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	621a      	str	r2, [r3, #32]
 80020b0:	e016      	b.n	80020e0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	0c5b      	lsrs	r3, r3, #17
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	2b06      	cmp	r3, #6
 80020bc:	d110      	bne.n	80020e0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80020c4:	2208      	movs	r2, #8
 80020c6:	4619      	mov	r1, r3
 80020c8:	6a38      	ldr	r0, [r7, #32]
 80020ca:	f002 fe6f 	bl	8004dac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	6a1a      	ldr	r2, [r3, #32]
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	091b      	lsrs	r3, r3, #4
 80020d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020da:	441a      	add	r2, r3
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	699a      	ldr	r2, [r3, #24]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 0210 	orr.w	r2, r2, #16
 80020ee:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f002 ffed 	bl	80050d4 <USB_ReadInterrupts>
 80020fa:	4603      	mov	r3, r0
 80020fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002100:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002104:	f040 80a7 	bne.w	8002256 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002108:	2300      	movs	r3, #0
 800210a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f002 fff2 	bl	80050fa <USB_ReadDevAllOutEpInterrupt>
 8002116:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002118:	e099      	b.n	800224e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800211a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 808e 	beq.w	8002242 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	4611      	mov	r1, r2
 8002130:	4618      	mov	r0, r3
 8002132:	f003 f816 	bl	8005162 <USB_ReadDevOutEPInterrupt>
 8002136:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00c      	beq.n	800215c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	015a      	lsls	r2, r3, #5
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	4413      	add	r3, r2
 800214a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800214e:	461a      	mov	r2, r3
 8002150:	2301      	movs	r3, #1
 8002152:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002154:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 fec2 	bl	8002ee0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00c      	beq.n	8002180 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	015a      	lsls	r2, r3, #5
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	4413      	add	r3, r2
 800216e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002172:	461a      	mov	r2, r3
 8002174:	2308      	movs	r3, #8
 8002176:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002178:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 ff98 	bl	80030b0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	f003 0310 	and.w	r3, r3, #16
 8002186:	2b00      	cmp	r3, #0
 8002188:	d008      	beq.n	800219c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	015a      	lsls	r2, r3, #5
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	4413      	add	r3, r2
 8002192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002196:	461a      	mov	r2, r3
 8002198:	2310      	movs	r3, #16
 800219a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d030      	beq.n	8002208 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80021a6:	6a3b      	ldr	r3, [r7, #32]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ae:	2b80      	cmp	r3, #128	; 0x80
 80021b0:	d109      	bne.n	80021c6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	69fa      	ldr	r2, [r7, #28]
 80021bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021c4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80021c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c8:	4613      	mov	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	4413      	add	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	4413      	add	r3, r2
 80021d8:	3304      	adds	r3, #4
 80021da:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	78db      	ldrb	r3, [r3, #3]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d108      	bne.n	80021f6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	2200      	movs	r2, #0
 80021e8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	4619      	mov	r1, r3
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f005 fbb7 	bl	8007964 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	015a      	lsls	r2, r3, #5
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	4413      	add	r3, r2
 80021fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002202:	461a      	mov	r2, r3
 8002204:	2302      	movs	r3, #2
 8002206:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	f003 0320 	and.w	r3, r3, #32
 800220e:	2b00      	cmp	r3, #0
 8002210:	d008      	beq.n	8002224 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	015a      	lsls	r2, r3, #5
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	4413      	add	r3, r2
 800221a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800221e:	461a      	mov	r2, r3
 8002220:	2320      	movs	r3, #32
 8002222:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d009      	beq.n	8002242 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	015a      	lsls	r2, r3, #5
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	4413      	add	r3, r2
 8002236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800223a:	461a      	mov	r2, r3
 800223c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002240:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	3301      	adds	r3, #1
 8002246:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224a:	085b      	lsrs	r3, r3, #1
 800224c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800224e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002250:	2b00      	cmp	r3, #0
 8002252:	f47f af62 	bne.w	800211a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f002 ff3a 	bl	80050d4 <USB_ReadInterrupts>
 8002260:	4603      	mov	r3, r0
 8002262:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002266:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800226a:	f040 80db 	bne.w	8002424 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f002 ff5b 	bl	800512e <USB_ReadDevAllInEpInterrupt>
 8002278:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800227a:	2300      	movs	r3, #0
 800227c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800227e:	e0cd      	b.n	800241c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	f000 80c2 	beq.w	8002410 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	4611      	mov	r1, r2
 8002296:	4618      	mov	r0, r3
 8002298:	f002 ff81 	bl	800519e <USB_ReadDevInEPInterrupt>
 800229c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d057      	beq.n	8002358 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	2201      	movs	r2, #1
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69f9      	ldr	r1, [r7, #28]
 80022c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022c8:	4013      	ands	r3, r2
 80022ca:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	015a      	lsls	r2, r3, #5
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	4413      	add	r3, r2
 80022d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022d8:	461a      	mov	r2, r3
 80022da:	2301      	movs	r3, #1
 80022dc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d132      	bne.n	800234c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ea:	4613      	mov	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	4413      	add	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	440b      	add	r3, r1
 80022f4:	334c      	adds	r3, #76	; 0x4c
 80022f6:	6819      	ldr	r1, [r3, #0]
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022fc:	4613      	mov	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	4413      	add	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4403      	add	r3, r0
 8002306:	3348      	adds	r3, #72	; 0x48
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4419      	add	r1, r3
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002310:	4613      	mov	r3, r2
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	4413      	add	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4403      	add	r3, r0
 800231a:	334c      	adds	r3, #76	; 0x4c
 800231c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	2b00      	cmp	r3, #0
 8002322:	d113      	bne.n	800234c <HAL_PCD_IRQHandler+0x3a2>
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002328:	4613      	mov	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	4413      	add	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	3354      	adds	r3, #84	; 0x54
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d108      	bne.n	800234c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6818      	ldr	r0, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002344:	461a      	mov	r2, r3
 8002346:	2101      	movs	r1, #1
 8002348:	f002 ff88 	bl	800525c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	b2db      	uxtb	r3, r3
 8002350:	4619      	mov	r1, r3
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f005 fa81 	bl	800785a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b00      	cmp	r3, #0
 8002360:	d008      	beq.n	8002374 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	015a      	lsls	r2, r3, #5
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	4413      	add	r3, r2
 800236a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800236e:	461a      	mov	r2, r3
 8002370:	2308      	movs	r3, #8
 8002372:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	f003 0310 	and.w	r3, r3, #16
 800237a:	2b00      	cmp	r3, #0
 800237c:	d008      	beq.n	8002390 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	015a      	lsls	r2, r3, #5
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	4413      	add	r3, r2
 8002386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800238a:	461a      	mov	r2, r3
 800238c:	2310      	movs	r3, #16
 800238e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002396:	2b00      	cmp	r3, #0
 8002398:	d008      	beq.n	80023ac <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	015a      	lsls	r2, r3, #5
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	4413      	add	r3, r2
 80023a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023a6:	461a      	mov	r2, r3
 80023a8:	2340      	movs	r3, #64	; 0x40
 80023aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d023      	beq.n	80023fe <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80023b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023b8:	6a38      	ldr	r0, [r7, #32]
 80023ba:	f001 fe69 	bl	8004090 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80023be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c0:	4613      	mov	r3, r2
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	4413      	add	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	3338      	adds	r3, #56	; 0x38
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	3304      	adds	r3, #4
 80023d0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	78db      	ldrb	r3, [r3, #3]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d108      	bne.n	80023ec <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	2200      	movs	r2, #0
 80023de:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	4619      	mov	r1, r3
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f005 face 	bl	8007988 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	015a      	lsls	r2, r3, #5
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	4413      	add	r3, r2
 80023f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023f8:	461a      	mov	r2, r3
 80023fa:	2302      	movs	r3, #2
 80023fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002404:	2b00      	cmp	r3, #0
 8002406:	d003      	beq.n	8002410 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002408:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 fcdb 	bl	8002dc6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	3301      	adds	r3, #1
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002418:	085b      	lsrs	r3, r3, #1
 800241a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800241c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241e:	2b00      	cmp	r3, #0
 8002420:	f47f af2e 	bne.w	8002280 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f002 fe53 	bl	80050d4 <USB_ReadInterrupts>
 800242e:	4603      	mov	r3, r0
 8002430:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002434:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002438:	d122      	bne.n	8002480 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	69fa      	ldr	r2, [r7, #28]
 8002444:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002448:	f023 0301 	bic.w	r3, r3, #1
 800244c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002454:	2b01      	cmp	r3, #1
 8002456:	d108      	bne.n	800246a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002460:	2100      	movs	r1, #0
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 fec2 	bl	80031ec <HAL_PCDEx_LPM_Callback>
 8002468:	e002      	b.n	8002470 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f005 fa6c 	bl	8007948 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	695a      	ldr	r2, [r3, #20]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800247e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f002 fe25 	bl	80050d4 <USB_ReadInterrupts>
 800248a:	4603      	mov	r3, r0
 800248c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002490:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002494:	d112      	bne.n	80024bc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d102      	bne.n	80024ac <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f005 fa28 	bl	80078fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	695a      	ldr	r2, [r3, #20]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80024ba:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f002 fe07 	bl	80050d4 <USB_ReadInterrupts>
 80024c6:	4603      	mov	r3, r0
 80024c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024d0:	f040 80b7 	bne.w	8002642 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	69fa      	ldr	r2, [r7, #28]
 80024de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024e2:	f023 0301 	bic.w	r3, r3, #1
 80024e6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2110      	movs	r1, #16
 80024ee:	4618      	mov	r0, r3
 80024f0:	f001 fdce 	bl	8004090 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024f4:	2300      	movs	r3, #0
 80024f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024f8:	e046      	b.n	8002588 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80024fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fc:	015a      	lsls	r2, r3, #5
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	4413      	add	r3, r2
 8002502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002506:	461a      	mov	r2, r3
 8002508:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800250c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800250e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002510:	015a      	lsls	r2, r3, #5
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	4413      	add	r3, r2
 8002516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800251e:	0151      	lsls	r1, r2, #5
 8002520:	69fa      	ldr	r2, [r7, #28]
 8002522:	440a      	add	r2, r1
 8002524:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002528:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800252c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800252e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002530:	015a      	lsls	r2, r3, #5
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	4413      	add	r3, r2
 8002536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800253a:	461a      	mov	r2, r3
 800253c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002540:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002544:	015a      	lsls	r2, r3, #5
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	4413      	add	r3, r2
 800254a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002552:	0151      	lsls	r1, r2, #5
 8002554:	69fa      	ldr	r2, [r7, #28]
 8002556:	440a      	add	r2, r1
 8002558:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800255c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002560:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002564:	015a      	lsls	r2, r3, #5
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	4413      	add	r3, r2
 800256a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002572:	0151      	lsls	r1, r2, #5
 8002574:	69fa      	ldr	r2, [r7, #28]
 8002576:	440a      	add	r2, r1
 8002578:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800257c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002580:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002584:	3301      	adds	r3, #1
 8002586:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800258e:	429a      	cmp	r2, r3
 8002590:	d3b3      	bcc.n	80024fa <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	69fa      	ldr	r2, [r7, #28]
 800259c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025a0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80025a4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d016      	beq.n	80025dc <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025b8:	69fa      	ldr	r2, [r7, #28]
 80025ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025be:	f043 030b 	orr.w	r3, r3, #11
 80025c2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ce:	69fa      	ldr	r2, [r7, #28]
 80025d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025d4:	f043 030b 	orr.w	r3, r3, #11
 80025d8:	6453      	str	r3, [r2, #68]	; 0x44
 80025da:	e015      	b.n	8002608 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	69fa      	ldr	r2, [r7, #28]
 80025e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025ee:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80025f2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	69fa      	ldr	r2, [r7, #28]
 80025fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002602:	f043 030b 	orr.w	r3, r3, #11
 8002606:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	69fa      	ldr	r2, [r7, #28]
 8002612:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002616:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800261a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6818      	ldr	r0, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800262c:	461a      	mov	r2, r3
 800262e:	f002 fe15 	bl	800525c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695a      	ldr	r2, [r3, #20]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002640:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f002 fd44 	bl	80050d4 <USB_ReadInterrupts>
 800264c:	4603      	mov	r3, r0
 800264e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002652:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002656:	d124      	bne.n	80026a2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f002 fdda 	bl	8005216 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f001 fd8f 	bl	800418a <USB_GetDevSpeed>
 800266c:	4603      	mov	r3, r0
 800266e:	461a      	mov	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681c      	ldr	r4, [r3, #0]
 8002678:	f001 fa28 	bl	8003acc <HAL_RCC_GetHCLKFreq>
 800267c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002682:	b2db      	uxtb	r3, r3
 8002684:	461a      	mov	r2, r3
 8002686:	4620      	mov	r0, r4
 8002688:	f001 fa8e 	bl	8003ba8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f005 f90c 	bl	80078aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	695a      	ldr	r2, [r3, #20]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80026a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f002 fd14 	bl	80050d4 <USB_ReadInterrupts>
 80026ac:	4603      	mov	r3, r0
 80026ae:	f003 0308 	and.w	r3, r3, #8
 80026b2:	2b08      	cmp	r3, #8
 80026b4:	d10a      	bne.n	80026cc <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f005 f8e9 	bl	800788e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	695a      	ldr	r2, [r3, #20]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f002 0208 	and.w	r2, r2, #8
 80026ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f002 fcff 	bl	80050d4 <USB_ReadInterrupts>
 80026d6:	4603      	mov	r3, r0
 80026d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026dc:	2b80      	cmp	r3, #128	; 0x80
 80026de:	d122      	bne.n	8002726 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80026e0:	6a3b      	ldr	r3, [r7, #32]
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026e8:	6a3b      	ldr	r3, [r7, #32]
 80026ea:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026ec:	2301      	movs	r3, #1
 80026ee:	627b      	str	r3, [r7, #36]	; 0x24
 80026f0:	e014      	b.n	800271c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f6:	4613      	mov	r3, r2
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	4413      	add	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	440b      	add	r3, r1
 8002700:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d105      	bne.n	8002716 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	b2db      	uxtb	r3, r3
 800270e:	4619      	mov	r1, r3
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 fb27 	bl	8002d64 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	3301      	adds	r3, #1
 800271a:	627b      	str	r3, [r7, #36]	; 0x24
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002722:	429a      	cmp	r2, r3
 8002724:	d3e5      	bcc.n	80026f2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f002 fcd2 	bl	80050d4 <USB_ReadInterrupts>
 8002730:	4603      	mov	r3, r0
 8002732:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002736:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800273a:	d13b      	bne.n	80027b4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800273c:	2301      	movs	r3, #1
 800273e:	627b      	str	r3, [r7, #36]	; 0x24
 8002740:	e02b      	b.n	800279a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	015a      	lsls	r2, r3, #5
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	4413      	add	r3, r2
 800274a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002756:	4613      	mov	r3, r2
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	4413      	add	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	440b      	add	r3, r1
 8002760:	3340      	adds	r3, #64	; 0x40
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d115      	bne.n	8002794 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002768:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800276a:	2b00      	cmp	r3, #0
 800276c:	da12      	bge.n	8002794 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002772:	4613      	mov	r3, r2
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	4413      	add	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	440b      	add	r3, r1
 800277c:	333f      	adds	r3, #63	; 0x3f
 800277e:	2201      	movs	r2, #1
 8002780:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	b2db      	uxtb	r3, r3
 8002786:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800278a:	b2db      	uxtb	r3, r3
 800278c:	4619      	mov	r1, r3
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 fae8 	bl	8002d64 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	3301      	adds	r3, #1
 8002798:	627b      	str	r3, [r7, #36]	; 0x24
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d3ce      	bcc.n	8002742 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	695a      	ldr	r2, [r3, #20]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80027b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f002 fc8b 	bl	80050d4 <USB_ReadInterrupts>
 80027be:	4603      	mov	r3, r0
 80027c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027c8:	d155      	bne.n	8002876 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027ca:	2301      	movs	r3, #1
 80027cc:	627b      	str	r3, [r7, #36]	; 0x24
 80027ce:	e045      	b.n	800285c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	015a      	lsls	r2, r3, #5
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	4413      	add	r3, r2
 80027d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e4:	4613      	mov	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	4413      	add	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d12e      	bne.n	8002856 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80027f8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	da2b      	bge.n	8002856 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800280a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800280e:	429a      	cmp	r2, r3
 8002810:	d121      	bne.n	8002856 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002816:	4613      	mov	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	4413      	add	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002824:	2201      	movs	r2, #1
 8002826:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002828:	6a3b      	ldr	r3, [r7, #32]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002830:	6a3b      	ldr	r3, [r7, #32]
 8002832:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002834:	6a3b      	ldr	r3, [r7, #32]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10a      	bne.n	8002856 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	69fa      	ldr	r2, [r7, #28]
 800284a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800284e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002852:	6053      	str	r3, [r2, #4]
            break;
 8002854:	e007      	b.n	8002866 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	3301      	adds	r3, #1
 800285a:	627b      	str	r3, [r7, #36]	; 0x24
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002862:	429a      	cmp	r2, r3
 8002864:	d3b4      	bcc.n	80027d0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695a      	ldr	r2, [r3, #20]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002874:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f002 fc2a 	bl	80050d4 <USB_ReadInterrupts>
 8002880:	4603      	mov	r3, r0
 8002882:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800288a:	d10a      	bne.n	80028a2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f005 f88d 	bl	80079ac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	695a      	ldr	r2, [r3, #20]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80028a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f002 fc14 	bl	80050d4 <USB_ReadInterrupts>
 80028ac:	4603      	mov	r3, r0
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d115      	bne.n	80028e2 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d002      	beq.n	80028ce <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f005 f87d 	bl	80079c8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6859      	ldr	r1, [r3, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	430a      	orrs	r2, r1
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	e000      	b.n	80028e2 <HAL_PCD_IRQHandler+0x938>
      return;
 80028e0:	bf00      	nop
    }
  }
}
 80028e2:	3734      	adds	r7, #52	; 0x34
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd90      	pop	{r4, r7, pc}

080028e8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	460b      	mov	r3, r1
 80028f2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <HAL_PCD_SetAddress+0x1a>
 80028fe:	2302      	movs	r3, #2
 8002900:	e013      	b.n	800292a <HAL_PCD_SetAddress+0x42>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	78fa      	ldrb	r2, [r7, #3]
 800290e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	78fa      	ldrb	r2, [r7, #3]
 8002918:	4611      	mov	r1, r2
 800291a:	4618      	mov	r0, r3
 800291c:	f002 fb72 	bl	8005004 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b084      	sub	sp, #16
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
 800293a:	4608      	mov	r0, r1
 800293c:	4611      	mov	r1, r2
 800293e:	461a      	mov	r2, r3
 8002940:	4603      	mov	r3, r0
 8002942:	70fb      	strb	r3, [r7, #3]
 8002944:	460b      	mov	r3, r1
 8002946:	803b      	strh	r3, [r7, #0]
 8002948:	4613      	mov	r3, r2
 800294a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800294c:	2300      	movs	r3, #0
 800294e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002950:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002954:	2b00      	cmp	r3, #0
 8002956:	da0f      	bge.n	8002978 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002958:	78fb      	ldrb	r3, [r7, #3]
 800295a:	f003 020f 	and.w	r2, r3, #15
 800295e:	4613      	mov	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	4413      	add	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	3338      	adds	r3, #56	; 0x38
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	4413      	add	r3, r2
 800296c:	3304      	adds	r3, #4
 800296e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2201      	movs	r2, #1
 8002974:	705a      	strb	r2, [r3, #1]
 8002976:	e00f      	b.n	8002998 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002978:	78fb      	ldrb	r3, [r7, #3]
 800297a:	f003 020f 	and.w	r2, r3, #15
 800297e:	4613      	mov	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	4413      	add	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	4413      	add	r3, r2
 800298e:	3304      	adds	r3, #4
 8002990:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002998:	78fb      	ldrb	r3, [r7, #3]
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80029a4:	883a      	ldrh	r2, [r7, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	78ba      	ldrb	r2, [r7, #2]
 80029ae:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	785b      	ldrb	r3, [r3, #1]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d004      	beq.n	80029c2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	b29a      	uxth	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80029c2:	78bb      	ldrb	r3, [r7, #2]
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d102      	bne.n	80029ce <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_PCD_EP_Open+0xaa>
 80029d8:	2302      	movs	r3, #2
 80029da:	e00e      	b.n	80029fa <HAL_PCD_EP_Open+0xc8>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68f9      	ldr	r1, [r7, #12]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f001 fbf2 	bl	80041d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80029f8:	7afb      	ldrb	r3, [r7, #11]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b084      	sub	sp, #16
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	da0f      	bge.n	8002a36 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a16:	78fb      	ldrb	r3, [r7, #3]
 8002a18:	f003 020f 	and.w	r2, r3, #15
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	4413      	add	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	3338      	adds	r3, #56	; 0x38
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	4413      	add	r3, r2
 8002a2a:	3304      	adds	r3, #4
 8002a2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2201      	movs	r2, #1
 8002a32:	705a      	strb	r2, [r3, #1]
 8002a34:	e00f      	b.n	8002a56 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a36:	78fb      	ldrb	r3, [r7, #3]
 8002a38:	f003 020f 	and.w	r2, r3, #15
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	4413      	add	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002a56:	78fb      	ldrb	r3, [r7, #3]
 8002a58:	f003 030f 	and.w	r3, r3, #15
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d101      	bne.n	8002a70 <HAL_PCD_EP_Close+0x6e>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	e00e      	b.n	8002a8e <HAL_PCD_EP_Close+0x8c>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68f9      	ldr	r1, [r7, #12]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f001 fc30 	bl	80042e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b086      	sub	sp, #24
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	607a      	str	r2, [r7, #4]
 8002aa0:	603b      	str	r3, [r7, #0]
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aa6:	7afb      	ldrb	r3, [r7, #11]
 8002aa8:	f003 020f 	and.w	r2, r3, #15
 8002aac:	4613      	mov	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	4413      	add	r3, r2
 8002abc:	3304      	adds	r3, #4
 8002abe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ad8:	7afb      	ldrb	r3, [r7, #11]
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d102      	bne.n	8002af2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002af2:	7afb      	ldrb	r3, [r7, #11]
 8002af4:	f003 030f 	and.w	r3, r3, #15
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d109      	bne.n	8002b10 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6818      	ldr	r0, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	461a      	mov	r2, r3
 8002b08:	6979      	ldr	r1, [r7, #20]
 8002b0a:	f001 ff0f 	bl	800492c <USB_EP0StartXfer>
 8002b0e:	e008      	b.n	8002b22 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6818      	ldr	r0, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	6979      	ldr	r1, [r7, #20]
 8002b1e:	f001 fcbd 	bl	800449c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3718      	adds	r7, #24
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	460b      	mov	r3, r1
 8002b36:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002b38:	78fb      	ldrb	r3, [r7, #3]
 8002b3a:	f003 020f 	and.w	r2, r3, #15
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	4613      	mov	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	4413      	add	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002b4e:	681b      	ldr	r3, [r3, #0]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	607a      	str	r2, [r7, #4]
 8002b66:	603b      	str	r3, [r7, #0]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b6c:	7afb      	ldrb	r3, [r7, #11]
 8002b6e:	f003 020f 	and.w	r2, r3, #15
 8002b72:	4613      	mov	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	4413      	add	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	3338      	adds	r3, #56	; 0x38
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	4413      	add	r3, r2
 8002b80:	3304      	adds	r3, #4
 8002b82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	2200      	movs	r2, #0
 8002b94:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b9c:	7afb      	ldrb	r3, [r7, #11]
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d102      	bne.n	8002bb6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bb6:	7afb      	ldrb	r3, [r7, #11]
 8002bb8:	f003 030f 	and.w	r3, r3, #15
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d109      	bne.n	8002bd4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6818      	ldr	r0, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	461a      	mov	r2, r3
 8002bcc:	6979      	ldr	r1, [r7, #20]
 8002bce:	f001 fead 	bl	800492c <USB_EP0StartXfer>
 8002bd2:	e008      	b.n	8002be6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6818      	ldr	r0, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	461a      	mov	r2, r3
 8002be0:	6979      	ldr	r1, [r7, #20]
 8002be2:	f001 fc5b 	bl	800449c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002bfc:	78fb      	ldrb	r3, [r7, #3]
 8002bfe:	f003 020f 	and.w	r2, r3, #15
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d901      	bls.n	8002c0e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e050      	b.n	8002cb0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	da0f      	bge.n	8002c36 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c16:	78fb      	ldrb	r3, [r7, #3]
 8002c18:	f003 020f 	and.w	r2, r3, #15
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	3338      	adds	r3, #56	; 0x38
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	4413      	add	r3, r2
 8002c2a:	3304      	adds	r3, #4
 8002c2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2201      	movs	r2, #1
 8002c32:	705a      	strb	r2, [r3, #1]
 8002c34:	e00d      	b.n	8002c52 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c36:	78fa      	ldrb	r2, [r7, #3]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	4413      	add	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	4413      	add	r3, r2
 8002c48:	3304      	adds	r3, #4
 8002c4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2201      	movs	r2, #1
 8002c56:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c58:	78fb      	ldrb	r3, [r7, #3]
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d101      	bne.n	8002c72 <HAL_PCD_EP_SetStall+0x82>
 8002c6e:	2302      	movs	r3, #2
 8002c70:	e01e      	b.n	8002cb0 <HAL_PCD_EP_SetStall+0xc0>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68f9      	ldr	r1, [r7, #12]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f002 f8eb 	bl	8004e5c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c86:	78fb      	ldrb	r3, [r7, #3]
 8002c88:	f003 030f 	and.w	r3, r3, #15
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10a      	bne.n	8002ca6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6818      	ldr	r0, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	b2d9      	uxtb	r1, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	f002 fadb 	bl	800525c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002cc4:	78fb      	ldrb	r3, [r7, #3]
 8002cc6:	f003 020f 	and.w	r2, r3, #15
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d901      	bls.n	8002cd6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e042      	b.n	8002d5c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002cd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	da0f      	bge.n	8002cfe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cde:	78fb      	ldrb	r3, [r7, #3]
 8002ce0:	f003 020f 	and.w	r2, r3, #15
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	4413      	add	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	3338      	adds	r3, #56	; 0x38
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	3304      	adds	r3, #4
 8002cf4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	705a      	strb	r2, [r3, #1]
 8002cfc:	e00f      	b.n	8002d1e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cfe:	78fb      	ldrb	r3, [r7, #3]
 8002d00:	f003 020f 	and.w	r2, r3, #15
 8002d04:	4613      	mov	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	4413      	add	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	4413      	add	r3, r2
 8002d14:	3304      	adds	r3, #4
 8002d16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d24:	78fb      	ldrb	r3, [r7, #3]
 8002d26:	f003 030f 	and.w	r3, r3, #15
 8002d2a:	b2da      	uxtb	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d101      	bne.n	8002d3e <HAL_PCD_EP_ClrStall+0x86>
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	e00e      	b.n	8002d5c <HAL_PCD_EP_ClrStall+0xa4>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68f9      	ldr	r1, [r7, #12]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f002 f8f3 	bl	8004f38 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002d70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	da0c      	bge.n	8002d92 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d78:	78fb      	ldrb	r3, [r7, #3]
 8002d7a:	f003 020f 	and.w	r2, r3, #15
 8002d7e:	4613      	mov	r3, r2
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	4413      	add	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	3338      	adds	r3, #56	; 0x38
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	e00c      	b.n	8002dac <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d92:	78fb      	ldrb	r3, [r7, #3]
 8002d94:	f003 020f 	and.w	r2, r3, #15
 8002d98:	4613      	mov	r3, r2
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	4413      	add	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	4413      	add	r3, r2
 8002da8:	3304      	adds	r3, #4
 8002daa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68f9      	ldr	r1, [r7, #12]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f001 ff12 	bl	8004bdc <USB_EPStopXfer>
 8002db8:	4603      	mov	r3, r0
 8002dba:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002dbc:	7afb      	ldrb	r3, [r7, #11]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b08a      	sub	sp, #40	; 0x28
 8002dca:	af02      	add	r7, sp, #8
 8002dcc:	6078      	str	r0, [r7, #4]
 8002dce:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	4413      	add	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	3338      	adds	r3, #56	; 0x38
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	4413      	add	r3, r2
 8002dea:	3304      	adds	r3, #4
 8002dec:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6a1a      	ldr	r2, [r3, #32]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d901      	bls.n	8002dfe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e06c      	b.n	8002ed8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	699a      	ldr	r2, [r3, #24]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	69fa      	ldr	r2, [r7, #28]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d902      	bls.n	8002e1a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	3303      	adds	r3, #3
 8002e1e:	089b      	lsrs	r3, r3, #2
 8002e20:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e22:	e02b      	b.n	8002e7c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	699a      	ldr	r2, [r3, #24]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	69fa      	ldr	r2, [r7, #28]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d902      	bls.n	8002e40 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	3303      	adds	r3, #3
 8002e44:	089b      	lsrs	r3, r3, #2
 8002e46:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6919      	ldr	r1, [r3, #16]
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	6978      	ldr	r0, [r7, #20]
 8002e60:	f001 ff66 	bl	8004d30 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	691a      	ldr	r2, [r3, #16]
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	441a      	add	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6a1a      	ldr	r2, [r3, #32]
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	441a      	add	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	015a      	lsls	r2, r3, #5
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	4413      	add	r3, r2
 8002e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d809      	bhi.n	8002ea6 <PCD_WriteEmptyTxFifo+0xe0>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6a1a      	ldr	r2, [r3, #32]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d203      	bcs.n	8002ea6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1be      	bne.n	8002e24 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	699a      	ldr	r2, [r3, #24]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d811      	bhi.n	8002ed6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	f003 030f 	and.w	r3, r3, #15
 8002eb8:	2201      	movs	r2, #1
 8002eba:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebe:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ec6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	43db      	mvns	r3, r3
 8002ecc:	6939      	ldr	r1, [r7, #16]
 8002ece:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3720      	adds	r7, #32
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b088      	sub	sp, #32
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	333c      	adds	r3, #60	; 0x3c
 8002ef8:	3304      	adds	r3, #4
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	015a      	lsls	r2, r3, #5
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	4413      	add	r3, r2
 8002f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d17b      	bne.n	800300e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	f003 0308 	and.w	r3, r3, #8
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d015      	beq.n	8002f4c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	4a61      	ldr	r2, [pc, #388]	; (80030a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	f240 80b9 	bls.w	800309c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 80b3 	beq.w	800309c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	015a      	lsls	r2, r3, #5
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f42:	461a      	mov	r2, r3
 8002f44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f48:	6093      	str	r3, [r2, #8]
 8002f4a:	e0a7      	b.n	800309c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	f003 0320 	and.w	r3, r3, #32
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d009      	beq.n	8002f6a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	015a      	lsls	r2, r3, #5
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f62:	461a      	mov	r2, r3
 8002f64:	2320      	movs	r3, #32
 8002f66:	6093      	str	r3, [r2, #8]
 8002f68:	e098      	b.n	800309c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f040 8093 	bne.w	800309c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	4a4b      	ldr	r2, [pc, #300]	; (80030a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d90f      	bls.n	8002f9e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00a      	beq.n	8002f9e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	015a      	lsls	r2, r3, #5
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	4413      	add	r3, r2
 8002f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f94:	461a      	mov	r2, r3
 8002f96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f9a:	6093      	str	r3, [r2, #8]
 8002f9c:	e07e      	b.n	800309c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	4413      	add	r3, r2
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	69da      	ldr	r2, [r3, #28]
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	0159      	lsls	r1, r3, #5
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	440b      	add	r3, r1
 8002fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fca:	1ad2      	subs	r2, r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d114      	bne.n	8003000 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d109      	bne.n	8002ff2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6818      	ldr	r0, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002fe8:	461a      	mov	r2, r3
 8002fea:	2101      	movs	r1, #1
 8002fec:	f002 f936 	bl	800525c <USB_EP0_OutStart>
 8002ff0:	e006      	b.n	8003000 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	691a      	ldr	r2, [r3, #16]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	441a      	add	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	b2db      	uxtb	r3, r3
 8003004:	4619      	mov	r1, r3
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f004 fc0c 	bl	8007824 <HAL_PCD_DataOutStageCallback>
 800300c:	e046      	b.n	800309c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	4a26      	ldr	r2, [pc, #152]	; (80030ac <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d124      	bne.n	8003060 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00a      	beq.n	8003036 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	015a      	lsls	r2, r3, #5
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	4413      	add	r3, r2
 8003028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800302c:	461a      	mov	r2, r3
 800302e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003032:	6093      	str	r3, [r2, #8]
 8003034:	e032      	b.n	800309c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	f003 0320 	and.w	r3, r3, #32
 800303c:	2b00      	cmp	r3, #0
 800303e:	d008      	beq.n	8003052 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	015a      	lsls	r2, r3, #5
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	4413      	add	r3, r2
 8003048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800304c:	461a      	mov	r2, r3
 800304e:	2320      	movs	r3, #32
 8003050:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	b2db      	uxtb	r3, r3
 8003056:	4619      	mov	r1, r3
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f004 fbe3 	bl	8007824 <HAL_PCD_DataOutStageCallback>
 800305e:	e01d      	b.n	800309c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d114      	bne.n	8003090 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	4613      	mov	r3, r2
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	4413      	add	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	440b      	add	r3, r1
 8003074:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d108      	bne.n	8003090 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6818      	ldr	r0, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003088:	461a      	mov	r2, r3
 800308a:	2100      	movs	r1, #0
 800308c:	f002 f8e6 	bl	800525c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	b2db      	uxtb	r3, r3
 8003094:	4619      	mov	r1, r3
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f004 fbc4 	bl	8007824 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3720      	adds	r7, #32
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	4f54300a 	.word	0x4f54300a
 80030ac:	4f54310a 	.word	0x4f54310a

080030b0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	333c      	adds	r3, #60	; 0x3c
 80030c8:	3304      	adds	r3, #4
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	015a      	lsls	r2, r3, #5
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	4413      	add	r3, r2
 80030d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	4a15      	ldr	r2, [pc, #84]	; (8003138 <PCD_EP_OutSetupPacket_int+0x88>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d90e      	bls.n	8003104 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d009      	beq.n	8003104 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	015a      	lsls	r2, r3, #5
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	4413      	add	r3, r2
 80030f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030fc:	461a      	mov	r2, r3
 80030fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003102:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f004 fb7b 	bl	8007800 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	4a0a      	ldr	r2, [pc, #40]	; (8003138 <PCD_EP_OutSetupPacket_int+0x88>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d90c      	bls.n	800312c <PCD_EP_OutSetupPacket_int+0x7c>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d108      	bne.n	800312c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6818      	ldr	r0, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003124:	461a      	mov	r2, r3
 8003126:	2101      	movs	r1, #1
 8003128:	f002 f898 	bl	800525c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3718      	adds	r7, #24
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	4f54300a 	.word	0x4f54300a

0800313c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	460b      	mov	r3, r1
 8003146:	70fb      	strb	r3, [r7, #3]
 8003148:	4613      	mov	r3, r2
 800314a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003154:	78fb      	ldrb	r3, [r7, #3]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d107      	bne.n	800316a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800315a:	883b      	ldrh	r3, [r7, #0]
 800315c:	0419      	lsls	r1, r3, #16
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	430a      	orrs	r2, r1
 8003166:	629a      	str	r2, [r3, #40]	; 0x28
 8003168:	e028      	b.n	80031bc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003170:	0c1b      	lsrs	r3, r3, #16
 8003172:	68ba      	ldr	r2, [r7, #8]
 8003174:	4413      	add	r3, r2
 8003176:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003178:	2300      	movs	r3, #0
 800317a:	73fb      	strb	r3, [r7, #15]
 800317c:	e00d      	b.n	800319a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	7bfb      	ldrb	r3, [r7, #15]
 8003184:	3340      	adds	r3, #64	; 0x40
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	0c1b      	lsrs	r3, r3, #16
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	4413      	add	r3, r2
 8003192:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003194:	7bfb      	ldrb	r3, [r7, #15]
 8003196:	3301      	adds	r3, #1
 8003198:	73fb      	strb	r3, [r7, #15]
 800319a:	7bfa      	ldrb	r2, [r7, #15]
 800319c:	78fb      	ldrb	r3, [r7, #3]
 800319e:	3b01      	subs	r3, #1
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d3ec      	bcc.n	800317e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80031a4:	883b      	ldrh	r3, [r7, #0]
 80031a6:	0418      	lsls	r0, r3, #16
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6819      	ldr	r1, [r3, #0]
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	4302      	orrs	r2, r0
 80031b4:	3340      	adds	r3, #64	; 0x40
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3714      	adds	r7, #20
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
 80031d2:	460b      	mov	r3, r1
 80031d4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	887a      	ldrh	r2, [r7, #2]
 80031dc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	460b      	mov	r3, r1
 80031f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e267      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d075      	beq.n	800330e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003222:	4b88      	ldr	r3, [pc, #544]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 030c 	and.w	r3, r3, #12
 800322a:	2b04      	cmp	r3, #4
 800322c:	d00c      	beq.n	8003248 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800322e:	4b85      	ldr	r3, [pc, #532]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003236:	2b08      	cmp	r3, #8
 8003238:	d112      	bne.n	8003260 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800323a:	4b82      	ldr	r3, [pc, #520]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003242:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003246:	d10b      	bne.n	8003260 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003248:	4b7e      	ldr	r3, [pc, #504]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d05b      	beq.n	800330c <HAL_RCC_OscConfig+0x108>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d157      	bne.n	800330c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e242      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003268:	d106      	bne.n	8003278 <HAL_RCC_OscConfig+0x74>
 800326a:	4b76      	ldr	r3, [pc, #472]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a75      	ldr	r2, [pc, #468]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 8003270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	e01d      	b.n	80032b4 <HAL_RCC_OscConfig+0xb0>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003280:	d10c      	bne.n	800329c <HAL_RCC_OscConfig+0x98>
 8003282:	4b70      	ldr	r3, [pc, #448]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a6f      	ldr	r2, [pc, #444]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 8003288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	4b6d      	ldr	r3, [pc, #436]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a6c      	ldr	r2, [pc, #432]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 8003294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	e00b      	b.n	80032b4 <HAL_RCC_OscConfig+0xb0>
 800329c:	4b69      	ldr	r3, [pc, #420]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a68      	ldr	r2, [pc, #416]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 80032a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	4b66      	ldr	r3, [pc, #408]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a65      	ldr	r2, [pc, #404]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 80032ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d013      	beq.n	80032e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032bc:	f7fe fa1e 	bl	80016fc <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032c4:	f7fe fa1a 	bl	80016fc <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b64      	cmp	r3, #100	; 0x64
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e207      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d6:	4b5b      	ldr	r3, [pc, #364]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0f0      	beq.n	80032c4 <HAL_RCC_OscConfig+0xc0>
 80032e2:	e014      	b.n	800330e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e4:	f7fe fa0a 	bl	80016fc <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032ec:	f7fe fa06 	bl	80016fc <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b64      	cmp	r3, #100	; 0x64
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e1f3      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032fe:	4b51      	ldr	r3, [pc, #324]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0xe8>
 800330a:	e000      	b.n	800330e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800330c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d063      	beq.n	80033e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800331a:	4b4a      	ldr	r3, [pc, #296]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 030c 	and.w	r3, r3, #12
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00b      	beq.n	800333e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003326:	4b47      	ldr	r3, [pc, #284]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800332e:	2b08      	cmp	r3, #8
 8003330:	d11c      	bne.n	800336c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003332:	4b44      	ldr	r3, [pc, #272]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d116      	bne.n	800336c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800333e:	4b41      	ldr	r3, [pc, #260]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d005      	beq.n	8003356 <HAL_RCC_OscConfig+0x152>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d001      	beq.n	8003356 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e1c7      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003356:	4b3b      	ldr	r3, [pc, #236]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	4937      	ldr	r1, [pc, #220]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 8003366:	4313      	orrs	r3, r2
 8003368:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800336a:	e03a      	b.n	80033e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d020      	beq.n	80033b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003374:	4b34      	ldr	r3, [pc, #208]	; (8003448 <HAL_RCC_OscConfig+0x244>)
 8003376:	2201      	movs	r2, #1
 8003378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337a:	f7fe f9bf 	bl	80016fc <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003382:	f7fe f9bb 	bl	80016fc <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e1a8      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003394:	4b2b      	ldr	r3, [pc, #172]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0f0      	beq.n	8003382 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a0:	4b28      	ldr	r3, [pc, #160]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	4925      	ldr	r1, [pc, #148]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	600b      	str	r3, [r1, #0]
 80033b4:	e015      	b.n	80033e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033b6:	4b24      	ldr	r3, [pc, #144]	; (8003448 <HAL_RCC_OscConfig+0x244>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033bc:	f7fe f99e 	bl	80016fc <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033c4:	f7fe f99a 	bl	80016fc <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e187      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033d6:	4b1b      	ldr	r3, [pc, #108]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1f0      	bne.n	80033c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d036      	beq.n	800345c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d016      	beq.n	8003424 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033f6:	4b15      	ldr	r3, [pc, #84]	; (800344c <HAL_RCC_OscConfig+0x248>)
 80033f8:	2201      	movs	r2, #1
 80033fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fc:	f7fe f97e 	bl	80016fc <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003404:	f7fe f97a 	bl	80016fc <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e167      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003416:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 8003418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0f0      	beq.n	8003404 <HAL_RCC_OscConfig+0x200>
 8003422:	e01b      	b.n	800345c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003424:	4b09      	ldr	r3, [pc, #36]	; (800344c <HAL_RCC_OscConfig+0x248>)
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800342a:	f7fe f967 	bl	80016fc <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003430:	e00e      	b.n	8003450 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003432:	f7fe f963 	bl	80016fc <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d907      	bls.n	8003450 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e150      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
 8003444:	40023800 	.word	0x40023800
 8003448:	42470000 	.word	0x42470000
 800344c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003450:	4b88      	ldr	r3, [pc, #544]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 8003452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1ea      	bne.n	8003432 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 8097 	beq.w	8003598 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800346a:	2300      	movs	r3, #0
 800346c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800346e:	4b81      	ldr	r3, [pc, #516]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10f      	bne.n	800349a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800347a:	2300      	movs	r3, #0
 800347c:	60bb      	str	r3, [r7, #8]
 800347e:	4b7d      	ldr	r3, [pc, #500]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	4a7c      	ldr	r2, [pc, #496]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 8003484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003488:	6413      	str	r3, [r2, #64]	; 0x40
 800348a:	4b7a      	ldr	r3, [pc, #488]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003492:	60bb      	str	r3, [r7, #8]
 8003494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003496:	2301      	movs	r3, #1
 8003498:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349a:	4b77      	ldr	r3, [pc, #476]	; (8003678 <HAL_RCC_OscConfig+0x474>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d118      	bne.n	80034d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034a6:	4b74      	ldr	r3, [pc, #464]	; (8003678 <HAL_RCC_OscConfig+0x474>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a73      	ldr	r2, [pc, #460]	; (8003678 <HAL_RCC_OscConfig+0x474>)
 80034ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034b2:	f7fe f923 	bl	80016fc <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b8:	e008      	b.n	80034cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ba:	f7fe f91f 	bl	80016fc <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e10c      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034cc:	4b6a      	ldr	r3, [pc, #424]	; (8003678 <HAL_RCC_OscConfig+0x474>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0f0      	beq.n	80034ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d106      	bne.n	80034ee <HAL_RCC_OscConfig+0x2ea>
 80034e0:	4b64      	ldr	r3, [pc, #400]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 80034e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e4:	4a63      	ldr	r2, [pc, #396]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 80034e6:	f043 0301 	orr.w	r3, r3, #1
 80034ea:	6713      	str	r3, [r2, #112]	; 0x70
 80034ec:	e01c      	b.n	8003528 <HAL_RCC_OscConfig+0x324>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	2b05      	cmp	r3, #5
 80034f4:	d10c      	bne.n	8003510 <HAL_RCC_OscConfig+0x30c>
 80034f6:	4b5f      	ldr	r3, [pc, #380]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 80034f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fa:	4a5e      	ldr	r2, [pc, #376]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 80034fc:	f043 0304 	orr.w	r3, r3, #4
 8003500:	6713      	str	r3, [r2, #112]	; 0x70
 8003502:	4b5c      	ldr	r3, [pc, #368]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 8003504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003506:	4a5b      	ldr	r2, [pc, #364]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 8003508:	f043 0301 	orr.w	r3, r3, #1
 800350c:	6713      	str	r3, [r2, #112]	; 0x70
 800350e:	e00b      	b.n	8003528 <HAL_RCC_OscConfig+0x324>
 8003510:	4b58      	ldr	r3, [pc, #352]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 8003512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003514:	4a57      	ldr	r2, [pc, #348]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 8003516:	f023 0301 	bic.w	r3, r3, #1
 800351a:	6713      	str	r3, [r2, #112]	; 0x70
 800351c:	4b55      	ldr	r3, [pc, #340]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 800351e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003520:	4a54      	ldr	r2, [pc, #336]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 8003522:	f023 0304 	bic.w	r3, r3, #4
 8003526:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d015      	beq.n	800355c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003530:	f7fe f8e4 	bl	80016fc <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003536:	e00a      	b.n	800354e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003538:	f7fe f8e0 	bl	80016fc <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	f241 3288 	movw	r2, #5000	; 0x1388
 8003546:	4293      	cmp	r3, r2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e0cb      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800354e:	4b49      	ldr	r3, [pc, #292]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 8003550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0ee      	beq.n	8003538 <HAL_RCC_OscConfig+0x334>
 800355a:	e014      	b.n	8003586 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800355c:	f7fe f8ce 	bl	80016fc <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003562:	e00a      	b.n	800357a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003564:	f7fe f8ca 	bl	80016fc <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003572:	4293      	cmp	r3, r2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e0b5      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800357a:	4b3e      	ldr	r3, [pc, #248]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 800357c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1ee      	bne.n	8003564 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003586:	7dfb      	ldrb	r3, [r7, #23]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d105      	bne.n	8003598 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800358c:	4b39      	ldr	r3, [pc, #228]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	4a38      	ldr	r2, [pc, #224]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 8003592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003596:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 80a1 	beq.w	80036e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035a2:	4b34      	ldr	r3, [pc, #208]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 030c 	and.w	r3, r3, #12
 80035aa:	2b08      	cmp	r3, #8
 80035ac:	d05c      	beq.n	8003668 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d141      	bne.n	800363a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b6:	4b31      	ldr	r3, [pc, #196]	; (800367c <HAL_RCC_OscConfig+0x478>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035bc:	f7fe f89e 	bl	80016fc <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035c4:	f7fe f89a 	bl	80016fc <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e087      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d6:	4b27      	ldr	r3, [pc, #156]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f0      	bne.n	80035c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69da      	ldr	r2, [r3, #28]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	019b      	lsls	r3, r3, #6
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f8:	085b      	lsrs	r3, r3, #1
 80035fa:	3b01      	subs	r3, #1
 80035fc:	041b      	lsls	r3, r3, #16
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003604:	061b      	lsls	r3, r3, #24
 8003606:	491b      	ldr	r1, [pc, #108]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 8003608:	4313      	orrs	r3, r2
 800360a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800360c:	4b1b      	ldr	r3, [pc, #108]	; (800367c <HAL_RCC_OscConfig+0x478>)
 800360e:	2201      	movs	r2, #1
 8003610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003612:	f7fe f873 	bl	80016fc <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800361a:	f7fe f86f 	bl	80016fc <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e05c      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800362c:	4b11      	ldr	r3, [pc, #68]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0f0      	beq.n	800361a <HAL_RCC_OscConfig+0x416>
 8003638:	e054      	b.n	80036e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800363a:	4b10      	ldr	r3, [pc, #64]	; (800367c <HAL_RCC_OscConfig+0x478>)
 800363c:	2200      	movs	r2, #0
 800363e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003640:	f7fe f85c 	bl	80016fc <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003648:	f7fe f858 	bl	80016fc <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e045      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365a:	4b06      	ldr	r3, [pc, #24]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f0      	bne.n	8003648 <HAL_RCC_OscConfig+0x444>
 8003666:	e03d      	b.n	80036e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d107      	bne.n	8003680 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e038      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
 8003674:	40023800 	.word	0x40023800
 8003678:	40007000 	.word	0x40007000
 800367c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003680:	4b1b      	ldr	r3, [pc, #108]	; (80036f0 <HAL_RCC_OscConfig+0x4ec>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d028      	beq.n	80036e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003698:	429a      	cmp	r2, r3
 800369a:	d121      	bne.n	80036e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d11a      	bne.n	80036e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036b0:	4013      	ands	r3, r2
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d111      	bne.n	80036e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c6:	085b      	lsrs	r3, r3, #1
 80036c8:	3b01      	subs	r3, #1
 80036ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d107      	bne.n	80036e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036dc:	429a      	cmp	r2, r3
 80036de:	d001      	beq.n	80036e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e000      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3718      	adds	r7, #24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40023800 	.word	0x40023800

080036f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e0cc      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003708:	4b68      	ldr	r3, [pc, #416]	; (80038ac <HAL_RCC_ClockConfig+0x1b8>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 030f 	and.w	r3, r3, #15
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d90c      	bls.n	8003730 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003716:	4b65      	ldr	r3, [pc, #404]	; (80038ac <HAL_RCC_ClockConfig+0x1b8>)
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800371e:	4b63      	ldr	r3, [pc, #396]	; (80038ac <HAL_RCC_ClockConfig+0x1b8>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 030f 	and.w	r3, r3, #15
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	429a      	cmp	r2, r3
 800372a:	d001      	beq.n	8003730 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e0b8      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d020      	beq.n	800377e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	d005      	beq.n	8003754 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003748:	4b59      	ldr	r3, [pc, #356]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	4a58      	ldr	r2, [pc, #352]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 800374e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003752:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b00      	cmp	r3, #0
 800375e:	d005      	beq.n	800376c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003760:	4b53      	ldr	r3, [pc, #332]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	4a52      	ldr	r2, [pc, #328]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003766:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800376a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800376c:	4b50      	ldr	r3, [pc, #320]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	494d      	ldr	r1, [pc, #308]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 800377a:	4313      	orrs	r3, r2
 800377c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	2b00      	cmp	r3, #0
 8003788:	d044      	beq.n	8003814 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d107      	bne.n	80037a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003792:	4b47      	ldr	r3, [pc, #284]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d119      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e07f      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d003      	beq.n	80037b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037ae:	2b03      	cmp	r3, #3
 80037b0:	d107      	bne.n	80037c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037b2:	4b3f      	ldr	r3, [pc, #252]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d109      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e06f      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c2:	4b3b      	ldr	r3, [pc, #236]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e067      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037d2:	4b37      	ldr	r3, [pc, #220]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f023 0203 	bic.w	r2, r3, #3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	4934      	ldr	r1, [pc, #208]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037e4:	f7fd ff8a 	bl	80016fc <HAL_GetTick>
 80037e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ea:	e00a      	b.n	8003802 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037ec:	f7fd ff86 	bl	80016fc <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e04f      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003802:	4b2b      	ldr	r3, [pc, #172]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 020c 	and.w	r2, r3, #12
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	429a      	cmp	r2, r3
 8003812:	d1eb      	bne.n	80037ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003814:	4b25      	ldr	r3, [pc, #148]	; (80038ac <HAL_RCC_ClockConfig+0x1b8>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 030f 	and.w	r3, r3, #15
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	429a      	cmp	r2, r3
 8003820:	d20c      	bcs.n	800383c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003822:	4b22      	ldr	r3, [pc, #136]	; (80038ac <HAL_RCC_ClockConfig+0x1b8>)
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	b2d2      	uxtb	r2, r2
 8003828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800382a:	4b20      	ldr	r3, [pc, #128]	; (80038ac <HAL_RCC_ClockConfig+0x1b8>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	429a      	cmp	r2, r3
 8003836:	d001      	beq.n	800383c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e032      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b00      	cmp	r3, #0
 8003846:	d008      	beq.n	800385a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003848:	4b19      	ldr	r3, [pc, #100]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	4916      	ldr	r1, [pc, #88]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003856:	4313      	orrs	r3, r2
 8003858:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b00      	cmp	r3, #0
 8003864:	d009      	beq.n	800387a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003866:	4b12      	ldr	r3, [pc, #72]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	490e      	ldr	r1, [pc, #56]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003876:	4313      	orrs	r3, r2
 8003878:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800387a:	f000 f821 	bl	80038c0 <HAL_RCC_GetSysClockFreq>
 800387e:	4602      	mov	r2, r0
 8003880:	4b0b      	ldr	r3, [pc, #44]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	091b      	lsrs	r3, r3, #4
 8003886:	f003 030f 	and.w	r3, r3, #15
 800388a:	490a      	ldr	r1, [pc, #40]	; (80038b4 <HAL_RCC_ClockConfig+0x1c0>)
 800388c:	5ccb      	ldrb	r3, [r1, r3]
 800388e:	fa22 f303 	lsr.w	r3, r2, r3
 8003892:	4a09      	ldr	r2, [pc, #36]	; (80038b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003896:	4b09      	ldr	r3, [pc, #36]	; (80038bc <HAL_RCC_ClockConfig+0x1c8>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f7fd feea 	bl	8001674 <HAL_InitTick>

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40023c00 	.word	0x40023c00
 80038b0:	40023800 	.word	0x40023800
 80038b4:	080081a8 	.word	0x080081a8
 80038b8:	20000024 	.word	0x20000024
 80038bc:	20000028 	.word	0x20000028

080038c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038c4:	b094      	sub	sp, #80	; 0x50
 80038c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038c8:	2300      	movs	r3, #0
 80038ca:	647b      	str	r3, [r7, #68]	; 0x44
 80038cc:	2300      	movs	r3, #0
 80038ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038d0:	2300      	movs	r3, #0
 80038d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80038d4:	2300      	movs	r3, #0
 80038d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038d8:	4b79      	ldr	r3, [pc, #484]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f003 030c 	and.w	r3, r3, #12
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	d00d      	beq.n	8003900 <HAL_RCC_GetSysClockFreq+0x40>
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	f200 80e1 	bhi.w	8003aac <HAL_RCC_GetSysClockFreq+0x1ec>
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d002      	beq.n	80038f4 <HAL_RCC_GetSysClockFreq+0x34>
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d003      	beq.n	80038fa <HAL_RCC_GetSysClockFreq+0x3a>
 80038f2:	e0db      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038f4:	4b73      	ldr	r3, [pc, #460]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x204>)
 80038f6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80038f8:	e0db      	b.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038fa:	4b73      	ldr	r3, [pc, #460]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x208>)
 80038fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038fe:	e0d8      	b.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003900:	4b6f      	ldr	r3, [pc, #444]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003908:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800390a:	4b6d      	ldr	r3, [pc, #436]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d063      	beq.n	80039de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003916:	4b6a      	ldr	r3, [pc, #424]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	099b      	lsrs	r3, r3, #6
 800391c:	2200      	movs	r2, #0
 800391e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003920:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003928:	633b      	str	r3, [r7, #48]	; 0x30
 800392a:	2300      	movs	r3, #0
 800392c:	637b      	str	r3, [r7, #52]	; 0x34
 800392e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003932:	4622      	mov	r2, r4
 8003934:	462b      	mov	r3, r5
 8003936:	f04f 0000 	mov.w	r0, #0
 800393a:	f04f 0100 	mov.w	r1, #0
 800393e:	0159      	lsls	r1, r3, #5
 8003940:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003944:	0150      	lsls	r0, r2, #5
 8003946:	4602      	mov	r2, r0
 8003948:	460b      	mov	r3, r1
 800394a:	4621      	mov	r1, r4
 800394c:	1a51      	subs	r1, r2, r1
 800394e:	6139      	str	r1, [r7, #16]
 8003950:	4629      	mov	r1, r5
 8003952:	eb63 0301 	sbc.w	r3, r3, r1
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	f04f 0300 	mov.w	r3, #0
 8003960:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003964:	4659      	mov	r1, fp
 8003966:	018b      	lsls	r3, r1, #6
 8003968:	4651      	mov	r1, sl
 800396a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800396e:	4651      	mov	r1, sl
 8003970:	018a      	lsls	r2, r1, #6
 8003972:	4651      	mov	r1, sl
 8003974:	ebb2 0801 	subs.w	r8, r2, r1
 8003978:	4659      	mov	r1, fp
 800397a:	eb63 0901 	sbc.w	r9, r3, r1
 800397e:	f04f 0200 	mov.w	r2, #0
 8003982:	f04f 0300 	mov.w	r3, #0
 8003986:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800398a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800398e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003992:	4690      	mov	r8, r2
 8003994:	4699      	mov	r9, r3
 8003996:	4623      	mov	r3, r4
 8003998:	eb18 0303 	adds.w	r3, r8, r3
 800399c:	60bb      	str	r3, [r7, #8]
 800399e:	462b      	mov	r3, r5
 80039a0:	eb49 0303 	adc.w	r3, r9, r3
 80039a4:	60fb      	str	r3, [r7, #12]
 80039a6:	f04f 0200 	mov.w	r2, #0
 80039aa:	f04f 0300 	mov.w	r3, #0
 80039ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039b2:	4629      	mov	r1, r5
 80039b4:	024b      	lsls	r3, r1, #9
 80039b6:	4621      	mov	r1, r4
 80039b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039bc:	4621      	mov	r1, r4
 80039be:	024a      	lsls	r2, r1, #9
 80039c0:	4610      	mov	r0, r2
 80039c2:	4619      	mov	r1, r3
 80039c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039c6:	2200      	movs	r2, #0
 80039c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80039ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039d0:	f7fc fc0c 	bl	80001ec <__aeabi_uldivmod>
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	4613      	mov	r3, r2
 80039da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039dc:	e058      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039de:	4b38      	ldr	r3, [pc, #224]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	099b      	lsrs	r3, r3, #6
 80039e4:	2200      	movs	r2, #0
 80039e6:	4618      	mov	r0, r3
 80039e8:	4611      	mov	r1, r2
 80039ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039ee:	623b      	str	r3, [r7, #32]
 80039f0:	2300      	movs	r3, #0
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24
 80039f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80039f8:	4642      	mov	r2, r8
 80039fa:	464b      	mov	r3, r9
 80039fc:	f04f 0000 	mov.w	r0, #0
 8003a00:	f04f 0100 	mov.w	r1, #0
 8003a04:	0159      	lsls	r1, r3, #5
 8003a06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a0a:	0150      	lsls	r0, r2, #5
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4641      	mov	r1, r8
 8003a12:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a16:	4649      	mov	r1, r9
 8003a18:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a1c:	f04f 0200 	mov.w	r2, #0
 8003a20:	f04f 0300 	mov.w	r3, #0
 8003a24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a30:	ebb2 040a 	subs.w	r4, r2, sl
 8003a34:	eb63 050b 	sbc.w	r5, r3, fp
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	f04f 0300 	mov.w	r3, #0
 8003a40:	00eb      	lsls	r3, r5, #3
 8003a42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a46:	00e2      	lsls	r2, r4, #3
 8003a48:	4614      	mov	r4, r2
 8003a4a:	461d      	mov	r5, r3
 8003a4c:	4643      	mov	r3, r8
 8003a4e:	18e3      	adds	r3, r4, r3
 8003a50:	603b      	str	r3, [r7, #0]
 8003a52:	464b      	mov	r3, r9
 8003a54:	eb45 0303 	adc.w	r3, r5, r3
 8003a58:	607b      	str	r3, [r7, #4]
 8003a5a:	f04f 0200 	mov.w	r2, #0
 8003a5e:	f04f 0300 	mov.w	r3, #0
 8003a62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a66:	4629      	mov	r1, r5
 8003a68:	028b      	lsls	r3, r1, #10
 8003a6a:	4621      	mov	r1, r4
 8003a6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a70:	4621      	mov	r1, r4
 8003a72:	028a      	lsls	r2, r1, #10
 8003a74:	4610      	mov	r0, r2
 8003a76:	4619      	mov	r1, r3
 8003a78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	61bb      	str	r3, [r7, #24]
 8003a7e:	61fa      	str	r2, [r7, #28]
 8003a80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a84:	f7fc fbb2 	bl	80001ec <__aeabi_uldivmod>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a90:	4b0b      	ldr	r3, [pc, #44]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	0c1b      	lsrs	r3, r3, #16
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003aa0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003aa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003aaa:	e002      	b.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003aac:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003aae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ab0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3750      	adds	r7, #80	; 0x50
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003abe:	bf00      	nop
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	00f42400 	.word	0x00f42400
 8003ac8:	007a1200 	.word	0x007a1200

08003acc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ad0:	4b03      	ldr	r3, [pc, #12]	; (8003ae0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	20000024 	.word	0x20000024

08003ae4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ae4:	b084      	sub	sp, #16
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b084      	sub	sp, #16
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
 8003aee:	f107 001c 	add.w	r0, r7, #28
 8003af2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d122      	bne.n	8003b42 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003b10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d105      	bne.n	8003b36 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f001 fbee 	bl	8005318 <USB_CoreReset>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	73fb      	strb	r3, [r7, #15]
 8003b40:	e01a      	b.n	8003b78 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f001 fbe2 	bl	8005318 <USB_CoreReset>
 8003b54:	4603      	mov	r3, r0
 8003b56:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003b58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d106      	bne.n	8003b6c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	639a      	str	r2, [r3, #56]	; 0x38
 8003b6a:	e005      	b.n	8003b78 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d10b      	bne.n	8003b96 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f043 0206 	orr.w	r2, r3, #6
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f043 0220 	orr.w	r2, r3, #32
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ba2:	b004      	add	sp, #16
 8003ba4:	4770      	bx	lr
	...

08003ba8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b087      	sub	sp, #28
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003bb6:	79fb      	ldrb	r3, [r7, #7]
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d165      	bne.n	8003c88 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	4a41      	ldr	r2, [pc, #260]	; (8003cc4 <USB_SetTurnaroundTime+0x11c>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d906      	bls.n	8003bd2 <USB_SetTurnaroundTime+0x2a>
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	4a40      	ldr	r2, [pc, #256]	; (8003cc8 <USB_SetTurnaroundTime+0x120>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d202      	bcs.n	8003bd2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003bcc:	230f      	movs	r3, #15
 8003bce:	617b      	str	r3, [r7, #20]
 8003bd0:	e062      	b.n	8003c98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	4a3c      	ldr	r2, [pc, #240]	; (8003cc8 <USB_SetTurnaroundTime+0x120>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d306      	bcc.n	8003be8 <USB_SetTurnaroundTime+0x40>
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	4a3b      	ldr	r2, [pc, #236]	; (8003ccc <USB_SetTurnaroundTime+0x124>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d202      	bcs.n	8003be8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003be2:	230e      	movs	r3, #14
 8003be4:	617b      	str	r3, [r7, #20]
 8003be6:	e057      	b.n	8003c98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	4a38      	ldr	r2, [pc, #224]	; (8003ccc <USB_SetTurnaroundTime+0x124>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d306      	bcc.n	8003bfe <USB_SetTurnaroundTime+0x56>
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	4a37      	ldr	r2, [pc, #220]	; (8003cd0 <USB_SetTurnaroundTime+0x128>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d202      	bcs.n	8003bfe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003bf8:	230d      	movs	r3, #13
 8003bfa:	617b      	str	r3, [r7, #20]
 8003bfc:	e04c      	b.n	8003c98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	4a33      	ldr	r2, [pc, #204]	; (8003cd0 <USB_SetTurnaroundTime+0x128>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d306      	bcc.n	8003c14 <USB_SetTurnaroundTime+0x6c>
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	4a32      	ldr	r2, [pc, #200]	; (8003cd4 <USB_SetTurnaroundTime+0x12c>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d802      	bhi.n	8003c14 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003c0e:	230c      	movs	r3, #12
 8003c10:	617b      	str	r3, [r7, #20]
 8003c12:	e041      	b.n	8003c98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	4a2f      	ldr	r2, [pc, #188]	; (8003cd4 <USB_SetTurnaroundTime+0x12c>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d906      	bls.n	8003c2a <USB_SetTurnaroundTime+0x82>
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	4a2e      	ldr	r2, [pc, #184]	; (8003cd8 <USB_SetTurnaroundTime+0x130>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d802      	bhi.n	8003c2a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003c24:	230b      	movs	r3, #11
 8003c26:	617b      	str	r3, [r7, #20]
 8003c28:	e036      	b.n	8003c98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	4a2a      	ldr	r2, [pc, #168]	; (8003cd8 <USB_SetTurnaroundTime+0x130>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d906      	bls.n	8003c40 <USB_SetTurnaroundTime+0x98>
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	4a29      	ldr	r2, [pc, #164]	; (8003cdc <USB_SetTurnaroundTime+0x134>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d802      	bhi.n	8003c40 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003c3a:	230a      	movs	r3, #10
 8003c3c:	617b      	str	r3, [r7, #20]
 8003c3e:	e02b      	b.n	8003c98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	4a26      	ldr	r2, [pc, #152]	; (8003cdc <USB_SetTurnaroundTime+0x134>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d906      	bls.n	8003c56 <USB_SetTurnaroundTime+0xae>
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	4a25      	ldr	r2, [pc, #148]	; (8003ce0 <USB_SetTurnaroundTime+0x138>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d202      	bcs.n	8003c56 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003c50:	2309      	movs	r3, #9
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	e020      	b.n	8003c98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	4a21      	ldr	r2, [pc, #132]	; (8003ce0 <USB_SetTurnaroundTime+0x138>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d306      	bcc.n	8003c6c <USB_SetTurnaroundTime+0xc4>
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	4a20      	ldr	r2, [pc, #128]	; (8003ce4 <USB_SetTurnaroundTime+0x13c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d802      	bhi.n	8003c6c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003c66:	2308      	movs	r3, #8
 8003c68:	617b      	str	r3, [r7, #20]
 8003c6a:	e015      	b.n	8003c98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	4a1d      	ldr	r2, [pc, #116]	; (8003ce4 <USB_SetTurnaroundTime+0x13c>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d906      	bls.n	8003c82 <USB_SetTurnaroundTime+0xda>
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	4a1c      	ldr	r2, [pc, #112]	; (8003ce8 <USB_SetTurnaroundTime+0x140>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d202      	bcs.n	8003c82 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003c7c:	2307      	movs	r3, #7
 8003c7e:	617b      	str	r3, [r7, #20]
 8003c80:	e00a      	b.n	8003c98 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003c82:	2306      	movs	r3, #6
 8003c84:	617b      	str	r3, [r7, #20]
 8003c86:	e007      	b.n	8003c98 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003c88:	79fb      	ldrb	r3, [r7, #7]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d102      	bne.n	8003c94 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003c8e:	2309      	movs	r3, #9
 8003c90:	617b      	str	r3, [r7, #20]
 8003c92:	e001      	b.n	8003c98 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003c94:	2309      	movs	r3, #9
 8003c96:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	68da      	ldr	r2, [r3, #12]
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	029b      	lsls	r3, r3, #10
 8003cac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	371c      	adds	r7, #28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	00d8acbf 	.word	0x00d8acbf
 8003cc8:	00e4e1c0 	.word	0x00e4e1c0
 8003ccc:	00f42400 	.word	0x00f42400
 8003cd0:	01067380 	.word	0x01067380
 8003cd4:	011a499f 	.word	0x011a499f
 8003cd8:	01312cff 	.word	0x01312cff
 8003cdc:	014ca43f 	.word	0x014ca43f
 8003ce0:	016e3600 	.word	0x016e3600
 8003ce4:	01a6ab1f 	.word	0x01a6ab1f
 8003ce8:	01e84800 	.word	0x01e84800

08003cec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f043 0201 	orr.w	r2, r3, #1
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b083      	sub	sp, #12
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f023 0201 	bic.w	r2, r3, #1
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003d4c:	78fb      	ldrb	r3, [r7, #3]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d115      	bne.n	8003d7e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d5e:	2001      	movs	r0, #1
 8003d60:	f7fd fcd8 	bl	8001714 <HAL_Delay>
      ms++;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	3301      	adds	r3, #1
 8003d68:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f001 fa45 	bl	80051fa <USB_GetMode>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d01e      	beq.n	8003db4 <USB_SetCurrentMode+0x84>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2b31      	cmp	r3, #49	; 0x31
 8003d7a:	d9f0      	bls.n	8003d5e <USB_SetCurrentMode+0x2e>
 8003d7c:	e01a      	b.n	8003db4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003d7e:	78fb      	ldrb	r3, [r7, #3]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d115      	bne.n	8003db0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d90:	2001      	movs	r0, #1
 8003d92:	f7fd fcbf 	bl	8001714 <HAL_Delay>
      ms++;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f001 fa2c 	bl	80051fa <USB_GetMode>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d005      	beq.n	8003db4 <USB_SetCurrentMode+0x84>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2b31      	cmp	r3, #49	; 0x31
 8003dac:	d9f0      	bls.n	8003d90 <USB_SetCurrentMode+0x60>
 8003dae:	e001      	b.n	8003db4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e005      	b.n	8003dc0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2b32      	cmp	r3, #50	; 0x32
 8003db8:	d101      	bne.n	8003dbe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e000      	b.n	8003dc0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003dc8:	b084      	sub	sp, #16
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b086      	sub	sp, #24
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
 8003dd2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003dd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003de2:	2300      	movs	r3, #0
 8003de4:	613b      	str	r3, [r7, #16]
 8003de6:	e009      	b.n	8003dfc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	3340      	adds	r3, #64	; 0x40
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4413      	add	r3, r2
 8003df2:	2200      	movs	r2, #0
 8003df4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	613b      	str	r3, [r7, #16]
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	2b0e      	cmp	r3, #14
 8003e00:	d9f2      	bls.n	8003de8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d11c      	bne.n	8003e42 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e16:	f043 0302 	orr.w	r3, r3, #2
 8003e1a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e20:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e38:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	639a      	str	r2, [r3, #56]	; 0x38
 8003e40:	e00b      	b.n	8003e5a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e46:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e52:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e60:	461a      	mov	r2, r3
 8003e62:	2300      	movs	r3, #0
 8003e64:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e74:	461a      	mov	r2, r3
 8003e76:	680b      	ldr	r3, [r1, #0]
 8003e78:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d10c      	bne.n	8003e9a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d104      	bne.n	8003e90 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003e86:	2100      	movs	r1, #0
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 f965 	bl	8004158 <USB_SetDevSpeed>
 8003e8e:	e008      	b.n	8003ea2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003e90:	2101      	movs	r1, #1
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f960 	bl	8004158 <USB_SetDevSpeed>
 8003e98:	e003      	b.n	8003ea2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003e9a:	2103      	movs	r1, #3
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f95b 	bl	8004158 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003ea2:	2110      	movs	r1, #16
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f8f3 	bl	8004090 <USB_FlushTxFifo>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f91f 	bl	80040f8 <USB_FlushRxFifo>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eca:	461a      	mov	r2, r3
 8003ecc:	2300      	movs	r3, #0
 8003ece:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	2300      	movs	r3, #0
 8003eda:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ee8:	2300      	movs	r3, #0
 8003eea:	613b      	str	r3, [r7, #16]
 8003eec:	e043      	b.n	8003f76 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	015a      	lsls	r2, r3, #5
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f04:	d118      	bne.n	8003f38 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10a      	bne.n	8003f22 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	015a      	lsls	r2, r3, #5
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4413      	add	r3, r2
 8003f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f18:	461a      	mov	r2, r3
 8003f1a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f1e:	6013      	str	r3, [r2, #0]
 8003f20:	e013      	b.n	8003f4a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	015a      	lsls	r2, r3, #5
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	4413      	add	r3, r2
 8003f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f2e:	461a      	mov	r2, r3
 8003f30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f34:	6013      	str	r3, [r2, #0]
 8003f36:	e008      	b.n	8003f4a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	015a      	lsls	r2, r3, #5
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f44:	461a      	mov	r2, r3
 8003f46:	2300      	movs	r3, #0
 8003f48:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	015a      	lsls	r2, r3, #5
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	4413      	add	r3, r2
 8003f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f56:	461a      	mov	r2, r3
 8003f58:	2300      	movs	r3, #0
 8003f5a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	015a      	lsls	r2, r3, #5
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4413      	add	r3, r2
 8003f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f68:	461a      	mov	r2, r3
 8003f6a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f6e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	3301      	adds	r3, #1
 8003f74:	613b      	str	r3, [r7, #16]
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d3b7      	bcc.n	8003eee <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f7e:	2300      	movs	r3, #0
 8003f80:	613b      	str	r3, [r7, #16]
 8003f82:	e043      	b.n	800400c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	015a      	lsls	r2, r3, #5
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f9a:	d118      	bne.n	8003fce <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10a      	bne.n	8003fb8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	015a      	lsls	r2, r3, #5
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	4413      	add	r3, r2
 8003faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fae:	461a      	mov	r2, r3
 8003fb0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003fb4:	6013      	str	r3, [r2, #0]
 8003fb6:	e013      	b.n	8003fe0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	015a      	lsls	r2, r3, #5
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003fca:	6013      	str	r3, [r2, #0]
 8003fcc:	e008      	b.n	8003fe0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fda:	461a      	mov	r2, r3
 8003fdc:	2300      	movs	r3, #0
 8003fde:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fec:	461a      	mov	r2, r3
 8003fee:	2300      	movs	r3, #0
 8003ff0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffe:	461a      	mov	r2, r3
 8004000:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004004:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	3301      	adds	r3, #1
 800400a:	613b      	str	r3, [r7, #16]
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	429a      	cmp	r2, r3
 8004012:	d3b7      	bcc.n	8003f84 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004022:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004026:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004034:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004038:	2b00      	cmp	r3, #0
 800403a:	d105      	bne.n	8004048 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	f043 0210 	orr.w	r2, r3, #16
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	699a      	ldr	r2, [r3, #24]
 800404c:	4b0f      	ldr	r3, [pc, #60]	; (800408c <USB_DevInit+0x2c4>)
 800404e:	4313      	orrs	r3, r2
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004056:	2b00      	cmp	r3, #0
 8004058:	d005      	beq.n	8004066 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	f043 0208 	orr.w	r2, r3, #8
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004068:	2b01      	cmp	r3, #1
 800406a:	d107      	bne.n	800407c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004074:	f043 0304 	orr.w	r3, r3, #4
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800407c:	7dfb      	ldrb	r3, [r7, #23]
}
 800407e:	4618      	mov	r0, r3
 8004080:	3718      	adds	r7, #24
 8004082:	46bd      	mov	sp, r7
 8004084:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004088:	b004      	add	sp, #16
 800408a:	4770      	bx	lr
 800408c:	803c3800 	.word	0x803c3800

08004090 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800409a:	2300      	movs	r3, #0
 800409c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	3301      	adds	r3, #1
 80040a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4a13      	ldr	r2, [pc, #76]	; (80040f4 <USB_FlushTxFifo+0x64>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d901      	bls.n	80040b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e01b      	b.n	80040e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	daf2      	bge.n	800409e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80040b8:	2300      	movs	r3, #0
 80040ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	019b      	lsls	r3, r3, #6
 80040c0:	f043 0220 	orr.w	r2, r3, #32
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	3301      	adds	r3, #1
 80040cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	4a08      	ldr	r2, [pc, #32]	; (80040f4 <USB_FlushTxFifo+0x64>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d901      	bls.n	80040da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e006      	b.n	80040e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	f003 0320 	and.w	r3, r3, #32
 80040e2:	2b20      	cmp	r3, #32
 80040e4:	d0f0      	beq.n	80040c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3714      	adds	r7, #20
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	00030d40 	.word	0x00030d40

080040f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004100:	2300      	movs	r3, #0
 8004102:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	3301      	adds	r3, #1
 8004108:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	4a11      	ldr	r2, [pc, #68]	; (8004154 <USB_FlushRxFifo+0x5c>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d901      	bls.n	8004116 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e018      	b.n	8004148 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	2b00      	cmp	r3, #0
 800411c:	daf2      	bge.n	8004104 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800411e:	2300      	movs	r3, #0
 8004120:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2210      	movs	r2, #16
 8004126:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	3301      	adds	r3, #1
 800412c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	4a08      	ldr	r2, [pc, #32]	; (8004154 <USB_FlushRxFifo+0x5c>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d901      	bls.n	800413a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e006      	b.n	8004148 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	f003 0310 	and.w	r3, r3, #16
 8004142:	2b10      	cmp	r3, #16
 8004144:	d0f0      	beq.n	8004128 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3714      	adds	r7, #20
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr
 8004154:	00030d40 	.word	0x00030d40

08004158 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	460b      	mov	r3, r1
 8004162:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	78fb      	ldrb	r3, [r7, #3]
 8004172:	68f9      	ldr	r1, [r7, #12]
 8004174:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004178:	4313      	orrs	r3, r2
 800417a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800418a:	b480      	push	{r7}
 800418c:	b087      	sub	sp, #28
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 0306 	and.w	r3, r3, #6
 80041a2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d102      	bne.n	80041b0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80041aa:	2300      	movs	r3, #0
 80041ac:	75fb      	strb	r3, [r7, #23]
 80041ae:	e00a      	b.n	80041c6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d002      	beq.n	80041bc <USB_GetDevSpeed+0x32>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2b06      	cmp	r3, #6
 80041ba:	d102      	bne.n	80041c2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80041bc:	2302      	movs	r3, #2
 80041be:	75fb      	strb	r3, [r7, #23]
 80041c0:	e001      	b.n	80041c6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80041c2:	230f      	movs	r3, #15
 80041c4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80041c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	371c      	adds	r7, #28
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	785b      	ldrb	r3, [r3, #1]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d13a      	bne.n	8004266 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041f6:	69da      	ldr	r2, [r3, #28]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	f003 030f 	and.w	r3, r3, #15
 8004200:	2101      	movs	r1, #1
 8004202:	fa01 f303 	lsl.w	r3, r1, r3
 8004206:	b29b      	uxth	r3, r3
 8004208:	68f9      	ldr	r1, [r7, #12]
 800420a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800420e:	4313      	orrs	r3, r2
 8004210:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	015a      	lsls	r2, r3, #5
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4413      	add	r3, r2
 800421a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d155      	bne.n	80042d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	015a      	lsls	r2, r3, #5
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4413      	add	r3, r2
 8004230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	791b      	ldrb	r3, [r3, #4]
 8004242:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004244:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	059b      	lsls	r3, r3, #22
 800424a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800424c:	4313      	orrs	r3, r2
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	0151      	lsls	r1, r2, #5
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	440a      	add	r2, r1
 8004256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800425a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800425e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	e036      	b.n	80042d4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800426c:	69da      	ldr	r2, [r3, #28]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	2101      	movs	r1, #1
 8004278:	fa01 f303 	lsl.w	r3, r1, r3
 800427c:	041b      	lsls	r3, r3, #16
 800427e:	68f9      	ldr	r1, [r7, #12]
 8004280:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004284:	4313      	orrs	r3, r2
 8004286:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	015a      	lsls	r2, r3, #5
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	4413      	add	r3, r2
 8004290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d11a      	bne.n	80042d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	015a      	lsls	r2, r3, #5
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	4413      	add	r3, r2
 80042a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	791b      	ldrb	r3, [r3, #4]
 80042b8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80042ba:	430b      	orrs	r3, r1
 80042bc:	4313      	orrs	r3, r2
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	0151      	lsls	r1, r2, #5
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	440a      	add	r2, r1
 80042c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042d2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
	...

080042e4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	785b      	ldrb	r3, [r3, #1]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d161      	bne.n	80043c4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	015a      	lsls	r2, r3, #5
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4413      	add	r3, r2
 8004308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004312:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004316:	d11f      	bne.n	8004358 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	015a      	lsls	r2, r3, #5
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4413      	add	r3, r2
 8004320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	0151      	lsls	r1, r2, #5
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	440a      	add	r2, r1
 800432e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004332:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004336:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	015a      	lsls	r2, r3, #5
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4413      	add	r3, r2
 8004340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	0151      	lsls	r1, r2, #5
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	440a      	add	r2, r1
 800434e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004352:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004356:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800435e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	f003 030f 	and.w	r3, r3, #15
 8004368:	2101      	movs	r1, #1
 800436a:	fa01 f303 	lsl.w	r3, r1, r3
 800436e:	b29b      	uxth	r3, r3
 8004370:	43db      	mvns	r3, r3
 8004372:	68f9      	ldr	r1, [r7, #12]
 8004374:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004378:	4013      	ands	r3, r2
 800437a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004382:	69da      	ldr	r2, [r3, #28]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	f003 030f 	and.w	r3, r3, #15
 800438c:	2101      	movs	r1, #1
 800438e:	fa01 f303 	lsl.w	r3, r1, r3
 8004392:	b29b      	uxth	r3, r3
 8004394:	43db      	mvns	r3, r3
 8004396:	68f9      	ldr	r1, [r7, #12]
 8004398:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800439c:	4013      	ands	r3, r2
 800439e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	0159      	lsls	r1, r3, #5
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	440b      	add	r3, r1
 80043b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ba:	4619      	mov	r1, r3
 80043bc:	4b35      	ldr	r3, [pc, #212]	; (8004494 <USB_DeactivateEndpoint+0x1b0>)
 80043be:	4013      	ands	r3, r2
 80043c0:	600b      	str	r3, [r1, #0]
 80043c2:	e060      	b.n	8004486 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	015a      	lsls	r2, r3, #5
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	4413      	add	r3, r2
 80043cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043da:	d11f      	bne.n	800441c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	015a      	lsls	r2, r3, #5
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	4413      	add	r3, r2
 80043e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	0151      	lsls	r1, r2, #5
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	440a      	add	r2, r1
 80043f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80043fa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	015a      	lsls	r2, r3, #5
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4413      	add	r3, r2
 8004404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	0151      	lsls	r1, r2, #5
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	440a      	add	r2, r1
 8004412:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004416:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800441a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004422:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	f003 030f 	and.w	r3, r3, #15
 800442c:	2101      	movs	r1, #1
 800442e:	fa01 f303 	lsl.w	r3, r1, r3
 8004432:	041b      	lsls	r3, r3, #16
 8004434:	43db      	mvns	r3, r3
 8004436:	68f9      	ldr	r1, [r7, #12]
 8004438:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800443c:	4013      	ands	r3, r2
 800443e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004446:	69da      	ldr	r2, [r3, #28]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	f003 030f 	and.w	r3, r3, #15
 8004450:	2101      	movs	r1, #1
 8004452:	fa01 f303 	lsl.w	r3, r1, r3
 8004456:	041b      	lsls	r3, r3, #16
 8004458:	43db      	mvns	r3, r3
 800445a:	68f9      	ldr	r1, [r7, #12]
 800445c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004460:	4013      	ands	r3, r2
 8004462:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	015a      	lsls	r2, r3, #5
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	4413      	add	r3, r2
 800446c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	0159      	lsls	r1, r3, #5
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	440b      	add	r3, r1
 800447a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800447e:	4619      	mov	r1, r3
 8004480:	4b05      	ldr	r3, [pc, #20]	; (8004498 <USB_DeactivateEndpoint+0x1b4>)
 8004482:	4013      	ands	r3, r2
 8004484:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3714      	adds	r7, #20
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	ec337800 	.word	0xec337800
 8004498:	eff37800 	.word	0xeff37800

0800449c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b08a      	sub	sp, #40	; 0x28
 80044a0:	af02      	add	r7, sp, #8
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	4613      	mov	r3, r2
 80044a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	785b      	ldrb	r3, [r3, #1]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	f040 815c 	bne.w	8004776 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d132      	bne.n	800452c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	015a      	lsls	r2, r3, #5
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	4413      	add	r3, r2
 80044ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	0151      	lsls	r1, r2, #5
 80044d8:	69fa      	ldr	r2, [r7, #28]
 80044da:	440a      	add	r2, r1
 80044dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	015a      	lsls	r2, r3, #5
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	4413      	add	r3, r2
 80044f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	0151      	lsls	r1, r2, #5
 80044fc:	69fa      	ldr	r2, [r7, #28]
 80044fe:	440a      	add	r2, r1
 8004500:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004504:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004508:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	015a      	lsls	r2, r3, #5
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	4413      	add	r3, r2
 8004512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	0151      	lsls	r1, r2, #5
 800451c:	69fa      	ldr	r2, [r7, #28]
 800451e:	440a      	add	r2, r1
 8004520:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004524:	0cdb      	lsrs	r3, r3, #19
 8004526:	04db      	lsls	r3, r3, #19
 8004528:	6113      	str	r3, [r2, #16]
 800452a:	e074      	b.n	8004616 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	015a      	lsls	r2, r3, #5
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	4413      	add	r3, r2
 8004534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	0151      	lsls	r1, r2, #5
 800453e:	69fa      	ldr	r2, [r7, #28]
 8004540:	440a      	add	r2, r1
 8004542:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004546:	0cdb      	lsrs	r3, r3, #19
 8004548:	04db      	lsls	r3, r3, #19
 800454a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	015a      	lsls	r2, r3, #5
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	4413      	add	r3, r2
 8004554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	0151      	lsls	r1, r2, #5
 800455e:	69fa      	ldr	r2, [r7, #28]
 8004560:	440a      	add	r2, r1
 8004562:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004566:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800456a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800456e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	015a      	lsls	r2, r3, #5
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	4413      	add	r3, r2
 8004578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800457c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	6999      	ldr	r1, [r3, #24]
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	440b      	add	r3, r1
 8004588:	1e59      	subs	r1, r3, #1
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004592:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004594:	4b9d      	ldr	r3, [pc, #628]	; (800480c <USB_EPStartXfer+0x370>)
 8004596:	400b      	ands	r3, r1
 8004598:	69b9      	ldr	r1, [r7, #24]
 800459a:	0148      	lsls	r0, r1, #5
 800459c:	69f9      	ldr	r1, [r7, #28]
 800459e:	4401      	add	r1, r0
 80045a0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80045a4:	4313      	orrs	r3, r2
 80045a6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	015a      	lsls	r2, r3, #5
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	4413      	add	r3, r2
 80045b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b4:	691a      	ldr	r2, [r3, #16]
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045be:	69b9      	ldr	r1, [r7, #24]
 80045c0:	0148      	lsls	r0, r1, #5
 80045c2:	69f9      	ldr	r1, [r7, #28]
 80045c4:	4401      	add	r1, r0
 80045c6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80045ca:	4313      	orrs	r3, r2
 80045cc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	791b      	ldrb	r3, [r3, #4]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d11f      	bne.n	8004616 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	015a      	lsls	r2, r3, #5
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	4413      	add	r3, r2
 80045de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	0151      	lsls	r1, r2, #5
 80045e8:	69fa      	ldr	r2, [r7, #28]
 80045ea:	440a      	add	r2, r1
 80045ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045f0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80045f4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	015a      	lsls	r2, r3, #5
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	0151      	lsls	r1, r2, #5
 8004608:	69fa      	ldr	r2, [r7, #28]
 800460a:	440a      	add	r2, r1
 800460c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004610:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004614:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004616:	79fb      	ldrb	r3, [r7, #7]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d14b      	bne.n	80046b4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d009      	beq.n	8004638 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	4413      	add	r3, r2
 800462c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004630:	461a      	mov	r2, r3
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	791b      	ldrb	r3, [r3, #4]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d128      	bne.n	8004692 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464c:	2b00      	cmp	r3, #0
 800464e:	d110      	bne.n	8004672 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	4413      	add	r3, r2
 8004658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	0151      	lsls	r1, r2, #5
 8004662:	69fa      	ldr	r2, [r7, #28]
 8004664:	440a      	add	r2, r1
 8004666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800466a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800466e:	6013      	str	r3, [r2, #0]
 8004670:	e00f      	b.n	8004692 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	015a      	lsls	r2, r3, #5
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	4413      	add	r3, r2
 800467a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	0151      	lsls	r1, r2, #5
 8004684:	69fa      	ldr	r2, [r7, #28]
 8004686:	440a      	add	r2, r1
 8004688:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800468c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004690:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	015a      	lsls	r2, r3, #5
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	4413      	add	r3, r2
 800469a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	0151      	lsls	r1, r2, #5
 80046a4:	69fa      	ldr	r2, [r7, #28]
 80046a6:	440a      	add	r2, r1
 80046a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046b0:	6013      	str	r3, [r2, #0]
 80046b2:	e133      	b.n	800491c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	0151      	lsls	r1, r2, #5
 80046c6:	69fa      	ldr	r2, [r7, #28]
 80046c8:	440a      	add	r2, r1
 80046ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046d2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	791b      	ldrb	r3, [r3, #4]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d015      	beq.n	8004708 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 811b 	beq.w	800491c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	f003 030f 	and.w	r3, r3, #15
 80046f6:	2101      	movs	r1, #1
 80046f8:	fa01 f303 	lsl.w	r3, r1, r3
 80046fc:	69f9      	ldr	r1, [r7, #28]
 80046fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004702:	4313      	orrs	r3, r2
 8004704:	634b      	str	r3, [r1, #52]	; 0x34
 8004706:	e109      	b.n	800491c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004714:	2b00      	cmp	r3, #0
 8004716:	d110      	bne.n	800473a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	4413      	add	r3, r2
 8004720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	0151      	lsls	r1, r2, #5
 800472a:	69fa      	ldr	r2, [r7, #28]
 800472c:	440a      	add	r2, r1
 800472e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004732:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	e00f      	b.n	800475a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	015a      	lsls	r2, r3, #5
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	4413      	add	r3, r2
 8004742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	0151      	lsls	r1, r2, #5
 800474c:	69fa      	ldr	r2, [r7, #28]
 800474e:	440a      	add	r2, r1
 8004750:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004758:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	6919      	ldr	r1, [r3, #16]
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	781a      	ldrb	r2, [r3, #0]
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	b298      	uxth	r0, r3
 8004768:	79fb      	ldrb	r3, [r7, #7]
 800476a:	9300      	str	r3, [sp, #0]
 800476c:	4603      	mov	r3, r0
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f000 fade 	bl	8004d30 <USB_WritePacket>
 8004774:	e0d2      	b.n	800491c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	015a      	lsls	r2, r3, #5
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	4413      	add	r3, r2
 800477e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	0151      	lsls	r1, r2, #5
 8004788:	69fa      	ldr	r2, [r7, #28]
 800478a:	440a      	add	r2, r1
 800478c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004790:	0cdb      	lsrs	r3, r3, #19
 8004792:	04db      	lsls	r3, r3, #19
 8004794:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	015a      	lsls	r2, r3, #5
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	4413      	add	r3, r2
 800479e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	0151      	lsls	r1, r2, #5
 80047a8:	69fa      	ldr	r2, [r7, #28]
 80047aa:	440a      	add	r2, r1
 80047ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80047b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80047b8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d126      	bne.n	8004810 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ce:	691a      	ldr	r2, [r3, #16]
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047d8:	69b9      	ldr	r1, [r7, #24]
 80047da:	0148      	lsls	r0, r1, #5
 80047dc:	69f9      	ldr	r1, [r7, #28]
 80047de:	4401      	add	r1, r0
 80047e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80047e4:	4313      	orrs	r3, r2
 80047e6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	015a      	lsls	r2, r3, #5
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	4413      	add	r3, r2
 80047f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	69ba      	ldr	r2, [r7, #24]
 80047f8:	0151      	lsls	r1, r2, #5
 80047fa:	69fa      	ldr	r2, [r7, #28]
 80047fc:	440a      	add	r2, r1
 80047fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004802:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004806:	6113      	str	r3, [r2, #16]
 8004808:	e03a      	b.n	8004880 <USB_EPStartXfer+0x3e4>
 800480a:	bf00      	nop
 800480c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	699a      	ldr	r2, [r3, #24]
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	4413      	add	r3, r2
 800481a:	1e5a      	subs	r2, r3, #1
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	fbb2 f3f3 	udiv	r3, r2, r3
 8004824:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	8afa      	ldrh	r2, [r7, #22]
 800482c:	fb03 f202 	mul.w	r2, r3, r2
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	015a      	lsls	r2, r3, #5
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	4413      	add	r3, r2
 800483c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004840:	691a      	ldr	r2, [r3, #16]
 8004842:	8afb      	ldrh	r3, [r7, #22]
 8004844:	04d9      	lsls	r1, r3, #19
 8004846:	4b38      	ldr	r3, [pc, #224]	; (8004928 <USB_EPStartXfer+0x48c>)
 8004848:	400b      	ands	r3, r1
 800484a:	69b9      	ldr	r1, [r7, #24]
 800484c:	0148      	lsls	r0, r1, #5
 800484e:	69f9      	ldr	r1, [r7, #28]
 8004850:	4401      	add	r1, r0
 8004852:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004856:	4313      	orrs	r3, r2
 8004858:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	015a      	lsls	r2, r3, #5
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	4413      	add	r3, r2
 8004862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004866:	691a      	ldr	r2, [r3, #16]
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	69db      	ldr	r3, [r3, #28]
 800486c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004870:	69b9      	ldr	r1, [r7, #24]
 8004872:	0148      	lsls	r0, r1, #5
 8004874:	69f9      	ldr	r1, [r7, #28]
 8004876:	4401      	add	r1, r0
 8004878:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800487c:	4313      	orrs	r3, r2
 800487e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004880:	79fb      	ldrb	r3, [r7, #7]
 8004882:	2b01      	cmp	r3, #1
 8004884:	d10d      	bne.n	80048a2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d009      	beq.n	80048a2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	6919      	ldr	r1, [r3, #16]
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	015a      	lsls	r2, r3, #5
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	4413      	add	r3, r2
 800489a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800489e:	460a      	mov	r2, r1
 80048a0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	791b      	ldrb	r3, [r3, #4]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d128      	bne.n	80048fc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d110      	bne.n	80048dc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	015a      	lsls	r2, r3, #5
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	4413      	add	r3, r2
 80048c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	0151      	lsls	r1, r2, #5
 80048cc:	69fa      	ldr	r2, [r7, #28]
 80048ce:	440a      	add	r2, r1
 80048d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048d8:	6013      	str	r3, [r2, #0]
 80048da:	e00f      	b.n	80048fc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	015a      	lsls	r2, r3, #5
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	0151      	lsls	r1, r2, #5
 80048ee:	69fa      	ldr	r2, [r7, #28]
 80048f0:	440a      	add	r2, r1
 80048f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048fa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	015a      	lsls	r2, r3, #5
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	4413      	add	r3, r2
 8004904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	0151      	lsls	r1, r2, #5
 800490e:	69fa      	ldr	r2, [r7, #28]
 8004910:	440a      	add	r2, r1
 8004912:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004916:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800491a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3720      	adds	r7, #32
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	1ff80000 	.word	0x1ff80000

0800492c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800492c:	b480      	push	{r7}
 800492e:	b087      	sub	sp, #28
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	4613      	mov	r3, r2
 8004938:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	785b      	ldrb	r3, [r3, #1]
 8004948:	2b01      	cmp	r3, #1
 800494a:	f040 80ce 	bne.w	8004aea <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d132      	bne.n	80049bc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	015a      	lsls	r2, r3, #5
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	4413      	add	r3, r2
 800495e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	0151      	lsls	r1, r2, #5
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	440a      	add	r2, r1
 800496c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004970:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004974:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004978:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	015a      	lsls	r2, r3, #5
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	4413      	add	r3, r2
 8004982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	0151      	lsls	r1, r2, #5
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	440a      	add	r2, r1
 8004990:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004994:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004998:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	015a      	lsls	r2, r3, #5
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	4413      	add	r3, r2
 80049a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	0151      	lsls	r1, r2, #5
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	440a      	add	r2, r1
 80049b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049b4:	0cdb      	lsrs	r3, r3, #19
 80049b6:	04db      	lsls	r3, r3, #19
 80049b8:	6113      	str	r3, [r2, #16]
 80049ba:	e04e      	b.n	8004a5a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	0151      	lsls	r1, r2, #5
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	440a      	add	r2, r1
 80049d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049d6:	0cdb      	lsrs	r3, r3, #19
 80049d8:	04db      	lsls	r3, r3, #19
 80049da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	0151      	lsls	r1, r2, #5
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	440a      	add	r2, r1
 80049f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049fe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	699a      	ldr	r2, [r3, #24]
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d903      	bls.n	8004a14 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	68da      	ldr	r2, [r3, #12]
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	0151      	lsls	r1, r2, #5
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	440a      	add	r2, r1
 8004a2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a40:	691a      	ldr	r2, [r3, #16]
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a4a:	6939      	ldr	r1, [r7, #16]
 8004a4c:	0148      	lsls	r0, r1, #5
 8004a4e:	6979      	ldr	r1, [r7, #20]
 8004a50:	4401      	add	r1, r0
 8004a52:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004a56:	4313      	orrs	r3, r2
 8004a58:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004a5a:	79fb      	ldrb	r3, [r7, #7]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d11e      	bne.n	8004a9e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d009      	beq.n	8004a7c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	015a      	lsls	r2, r3, #5
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	4413      	add	r3, r2
 8004a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a74:	461a      	mov	r2, r3
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	015a      	lsls	r2, r3, #5
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	4413      	add	r3, r2
 8004a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	0151      	lsls	r1, r2, #5
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	440a      	add	r2, r1
 8004a92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a9a:	6013      	str	r3, [r2, #0]
 8004a9c:	e097      	b.n	8004bce <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	015a      	lsls	r2, r3, #5
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	0151      	lsls	r1, r2, #5
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	440a      	add	r2, r1
 8004ab4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ab8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004abc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f000 8083 	beq.w	8004bce <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ace:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	f003 030f 	and.w	r3, r3, #15
 8004ad8:	2101      	movs	r1, #1
 8004ada:	fa01 f303 	lsl.w	r3, r1, r3
 8004ade:	6979      	ldr	r1, [r7, #20]
 8004ae0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	634b      	str	r3, [r1, #52]	; 0x34
 8004ae8:	e071      	b.n	8004bce <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	015a      	lsls	r2, r3, #5
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	4413      	add	r3, r2
 8004af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	0151      	lsls	r1, r2, #5
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	440a      	add	r2, r1
 8004b00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b04:	0cdb      	lsrs	r3, r3, #19
 8004b06:	04db      	lsls	r3, r3, #19
 8004b08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	015a      	lsls	r2, r3, #5
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	4413      	add	r3, r2
 8004b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	0151      	lsls	r1, r2, #5
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	440a      	add	r2, r1
 8004b20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b2c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	68da      	ldr	r2, [r3, #12]
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	68da      	ldr	r2, [r3, #12]
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	015a      	lsls	r2, r3, #5
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	0151      	lsls	r1, r2, #5
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	440a      	add	r2, r1
 8004b5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	015a      	lsls	r2, r3, #5
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b72:	691a      	ldr	r2, [r3, #16]
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	69db      	ldr	r3, [r3, #28]
 8004b78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b7c:	6939      	ldr	r1, [r7, #16]
 8004b7e:	0148      	lsls	r0, r1, #5
 8004b80:	6979      	ldr	r1, [r7, #20]
 8004b82:	4401      	add	r1, r0
 8004b84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004b8c:	79fb      	ldrb	r3, [r7, #7]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d10d      	bne.n	8004bae <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d009      	beq.n	8004bae <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	6919      	ldr	r1, [r3, #16]
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	015a      	lsls	r2, r3, #5
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004baa:	460a      	mov	r2, r1
 8004bac:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	015a      	lsls	r2, r3, #5
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	0151      	lsls	r1, r2, #5
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	440a      	add	r2, r1
 8004bc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bc8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bcc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	371c      	adds	r7, #28
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b087      	sub	sp, #28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004be6:	2300      	movs	r3, #0
 8004be8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004bea:	2300      	movs	r3, #0
 8004bec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	785b      	ldrb	r3, [r3, #1]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d14a      	bne.n	8004c90 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c12:	f040 8086 	bne.w	8004d22 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	683a      	ldr	r2, [r7, #0]
 8004c28:	7812      	ldrb	r2, [r2, #0]
 8004c2a:	0151      	lsls	r1, r2, #5
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	440a      	add	r2, r1
 8004c30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c34:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c38:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	015a      	lsls	r2, r3, #5
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	4413      	add	r3, r2
 8004c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	7812      	ldrb	r2, [r2, #0]
 8004c4e:	0151      	lsls	r1, r2, #5
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	440a      	add	r2, r1
 8004c54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c5c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	3301      	adds	r3, #1
 8004c62:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f242 7210 	movw	r2, #10000	; 0x2710
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d902      	bls.n	8004c74 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	75fb      	strb	r3, [r7, #23]
          break;
 8004c72:	e056      	b.n	8004d22 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	015a      	lsls	r2, r3, #5
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c8c:	d0e7      	beq.n	8004c5e <USB_EPStopXfer+0x82>
 8004c8e:	e048      	b.n	8004d22 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	015a      	lsls	r2, r3, #5
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	4413      	add	r3, r2
 8004c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ca4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ca8:	d13b      	bne.n	8004d22 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	015a      	lsls	r2, r3, #5
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	683a      	ldr	r2, [r7, #0]
 8004cbc:	7812      	ldrb	r2, [r2, #0]
 8004cbe:	0151      	lsls	r1, r2, #5
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	440a      	add	r2, r1
 8004cc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cc8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ccc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	015a      	lsls	r2, r3, #5
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	7812      	ldrb	r2, [r2, #0]
 8004ce2:	0151      	lsls	r1, r2, #5
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	440a      	add	r2, r1
 8004ce8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cf0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f242 7210 	movw	r2, #10000	; 0x2710
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d902      	bls.n	8004d08 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	75fb      	strb	r3, [r7, #23]
          break;
 8004d06:	e00c      	b.n	8004d22 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	015a      	lsls	r2, r3, #5
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	4413      	add	r3, r2
 8004d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d20:	d0e7      	beq.n	8004cf2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	371c      	adds	r7, #28
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b089      	sub	sp, #36	; 0x24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	4611      	mov	r1, r2
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	460b      	mov	r3, r1
 8004d40:	71fb      	strb	r3, [r7, #7]
 8004d42:	4613      	mov	r3, r2
 8004d44:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004d4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d123      	bne.n	8004d9e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004d56:	88bb      	ldrh	r3, [r7, #4]
 8004d58:	3303      	adds	r3, #3
 8004d5a:	089b      	lsrs	r3, r3, #2
 8004d5c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61bb      	str	r3, [r7, #24]
 8004d62:	e018      	b.n	8004d96 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004d64:	79fb      	ldrb	r3, [r7, #7]
 8004d66:	031a      	lsls	r2, r3, #12
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d70:	461a      	mov	r2, r3
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	3301      	adds	r3, #1
 8004d82:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	3301      	adds	r3, #1
 8004d88:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	3301      	adds	r3, #1
 8004d94:	61bb      	str	r3, [r7, #24]
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d3e2      	bcc.n	8004d64 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3724      	adds	r7, #36	; 0x24
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b08b      	sub	sp, #44	; 0x2c
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	4613      	mov	r3, r2
 8004db8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004dc2:	88fb      	ldrh	r3, [r7, #6]
 8004dc4:	089b      	lsrs	r3, r3, #2
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004dca:	88fb      	ldrh	r3, [r7, #6]
 8004dcc:	f003 0303 	and.w	r3, r3, #3
 8004dd0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	623b      	str	r3, [r7, #32]
 8004dd6:	e014      	b.n	8004e02 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	601a      	str	r2, [r3, #0]
    pDest++;
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	3301      	adds	r3, #1
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	3301      	adds	r3, #1
 8004dee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	3301      	adds	r3, #1
 8004df4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	3301      	adds	r3, #1
 8004dfa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004dfc:	6a3b      	ldr	r3, [r7, #32]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	623b      	str	r3, [r7, #32]
 8004e02:	6a3a      	ldr	r2, [r7, #32]
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d3e6      	bcc.n	8004dd8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004e0a:	8bfb      	ldrh	r3, [r7, #30]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d01e      	beq.n	8004e4e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004e10:	2300      	movs	r3, #0
 8004e12:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	f107 0310 	add.w	r3, r7, #16
 8004e20:	6812      	ldr	r2, [r2, #0]
 8004e22:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	6a3b      	ldr	r3, [r7, #32]
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	00db      	lsls	r3, r3, #3
 8004e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e30:	b2da      	uxtb	r2, r3
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	701a      	strb	r2, [r3, #0]
      i++;
 8004e36:	6a3b      	ldr	r3, [r7, #32]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	623b      	str	r3, [r7, #32]
      pDest++;
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	3301      	adds	r3, #1
 8004e40:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004e42:	8bfb      	ldrh	r3, [r7, #30]
 8004e44:	3b01      	subs	r3, #1
 8004e46:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004e48:	8bfb      	ldrh	r3, [r7, #30]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1ea      	bne.n	8004e24 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	372c      	adds	r7, #44	; 0x2c
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	785b      	ldrb	r3, [r3, #1]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d12c      	bne.n	8004ed2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	015a      	lsls	r2, r3, #5
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	db12      	blt.n	8004eb0 <USB_EPSetStall+0x54>
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00f      	beq.n	8004eb0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	015a      	lsls	r2, r3, #5
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	4413      	add	r3, r2
 8004e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68ba      	ldr	r2, [r7, #8]
 8004ea0:	0151      	lsls	r1, r2, #5
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	440a      	add	r2, r1
 8004ea6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eaa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004eae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68ba      	ldr	r2, [r7, #8]
 8004ec0:	0151      	lsls	r1, r2, #5
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	440a      	add	r2, r1
 8004ec6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ece:	6013      	str	r3, [r2, #0]
 8004ed0:	e02b      	b.n	8004f2a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	015a      	lsls	r2, r3, #5
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	4413      	add	r3, r2
 8004eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	db12      	blt.n	8004f0a <USB_EPSetStall+0xae>
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00f      	beq.n	8004f0a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	015a      	lsls	r2, r3, #5
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68ba      	ldr	r2, [r7, #8]
 8004efa:	0151      	lsls	r1, r2, #5
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	440a      	add	r2, r1
 8004f00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f08:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	0151      	lsls	r1, r2, #5
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	440a      	add	r2, r1
 8004f20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f28:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	785b      	ldrb	r3, [r3, #1]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d128      	bne.n	8004fa6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	0151      	lsls	r1, r2, #5
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	440a      	add	r2, r1
 8004f6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f72:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	791b      	ldrb	r3, [r3, #4]
 8004f78:	2b03      	cmp	r3, #3
 8004f7a:	d003      	beq.n	8004f84 <USB_EPClearStall+0x4c>
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	791b      	ldrb	r3, [r3, #4]
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d138      	bne.n	8004ff6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	015a      	lsls	r2, r3, #5
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	0151      	lsls	r1, r2, #5
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	440a      	add	r2, r1
 8004f9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fa2:	6013      	str	r3, [r2, #0]
 8004fa4:	e027      	b.n	8004ff6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	015a      	lsls	r2, r3, #5
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	4413      	add	r3, r2
 8004fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	0151      	lsls	r1, r2, #5
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	440a      	add	r2, r1
 8004fbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fc0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004fc4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	791b      	ldrb	r3, [r3, #4]
 8004fca:	2b03      	cmp	r3, #3
 8004fcc:	d003      	beq.n	8004fd6 <USB_EPClearStall+0x9e>
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	791b      	ldrb	r3, [r3, #4]
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d10f      	bne.n	8004ff6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	015a      	lsls	r2, r3, #5
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	4413      	add	r3, r2
 8004fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	0151      	lsls	r1, r2, #5
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	440a      	add	r2, r1
 8004fec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ff4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3714      	adds	r7, #20
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	460b      	mov	r3, r1
 800500e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005022:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005026:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	78fb      	ldrb	r3, [r7, #3]
 8005032:	011b      	lsls	r3, r3, #4
 8005034:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005038:	68f9      	ldr	r1, [r7, #12]
 800503a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800503e:	4313      	orrs	r3, r2
 8005040:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3714      	adds	r7, #20
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800506a:	f023 0303 	bic.w	r3, r3, #3
 800506e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800507e:	f023 0302 	bic.w	r3, r3, #2
 8005082:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr

08005092 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005092:	b480      	push	{r7}
 8005094:	b085      	sub	sp, #20
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80050ac:	f023 0303 	bic.w	r3, r3, #3
 80050b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050c0:	f043 0302 	orr.w	r3, r3, #2
 80050c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3714      	adds	r7, #20
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	4013      	ands	r3, r2
 80050ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80050ec:	68fb      	ldr	r3, [r7, #12]
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3714      	adds	r7, #20
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b085      	sub	sp, #20
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005116:	69db      	ldr	r3, [r3, #28]
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	4013      	ands	r3, r2
 800511c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	0c1b      	lsrs	r3, r3, #16
}
 8005122:	4618      	mov	r0, r3
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800512e:	b480      	push	{r7}
 8005130:	b085      	sub	sp, #20
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800514a:	69db      	ldr	r3, [r3, #28]
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	4013      	ands	r3, r2
 8005150:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	b29b      	uxth	r3, r3
}
 8005156:	4618      	mov	r0, r3
 8005158:	3714      	adds	r7, #20
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr

08005162 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005162:	b480      	push	{r7}
 8005164:	b085      	sub	sp, #20
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	460b      	mov	r3, r1
 800516c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005172:	78fb      	ldrb	r3, [r7, #3]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	4413      	add	r3, r2
 800517a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	4013      	ands	r3, r2
 800518e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005190:	68bb      	ldr	r3, [r7, #8]
}
 8005192:	4618      	mov	r0, r3
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800519e:	b480      	push	{r7}
 80051a0:	b087      	sub	sp, #28
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
 80051a6:	460b      	mov	r3, r1
 80051a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80051c2:	78fb      	ldrb	r3, [r7, #3]
 80051c4:	f003 030f 	and.w	r3, r3, #15
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	fa22 f303 	lsr.w	r3, r2, r3
 80051ce:	01db      	lsls	r3, r3, #7
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80051d8:	78fb      	ldrb	r3, [r7, #3]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	4013      	ands	r3, r2
 80051ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80051ec:	68bb      	ldr	r3, [r7, #8]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	371c      	adds	r7, #28
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b083      	sub	sp, #12
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	f003 0301 	and.w	r3, r3, #1
}
 800520a:	4618      	mov	r0, r3
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr

08005216 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005216:	b480      	push	{r7}
 8005218:	b085      	sub	sp, #20
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005230:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005234:	f023 0307 	bic.w	r3, r3, #7
 8005238:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800524c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3714      	adds	r7, #20
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800525c:	b480      	push	{r7}
 800525e:	b087      	sub	sp, #28
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	460b      	mov	r3, r1
 8005266:	607a      	str	r2, [r7, #4]
 8005268:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	333c      	adds	r3, #60	; 0x3c
 8005272:	3304      	adds	r3, #4
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	4a26      	ldr	r2, [pc, #152]	; (8005314 <USB_EP0_OutStart+0xb8>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d90a      	bls.n	8005296 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800528c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005290:	d101      	bne.n	8005296 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005292:	2300      	movs	r3, #0
 8005294:	e037      	b.n	8005306 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529c:	461a      	mov	r2, r3
 800529e:	2300      	movs	r3, #0
 80052a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052c4:	f043 0318 	orr.w	r3, r3, #24
 80052c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052d8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80052dc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80052de:	7afb      	ldrb	r3, [r7, #11]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d10f      	bne.n	8005304 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ea:	461a      	mov	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052fe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005302:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	371c      	adds	r7, #28
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	4f54300a 	.word	0x4f54300a

08005318 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005320:	2300      	movs	r3, #0
 8005322:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	3301      	adds	r3, #1
 8005328:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	4a13      	ldr	r2, [pc, #76]	; (800537c <USB_CoreReset+0x64>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d901      	bls.n	8005336 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e01b      	b.n	800536e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	2b00      	cmp	r3, #0
 800533c:	daf2      	bge.n	8005324 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800533e:	2300      	movs	r3, #0
 8005340:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	f043 0201 	orr.w	r2, r3, #1
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	3301      	adds	r3, #1
 8005352:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	4a09      	ldr	r2, [pc, #36]	; (800537c <USB_CoreReset+0x64>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d901      	bls.n	8005360 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e006      	b.n	800536e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	2b01      	cmp	r3, #1
 800536a:	d0f0      	beq.n	800534e <USB_CoreReset+0x36>

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3714      	adds	r7, #20
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	00030d40 	.word	0x00030d40

08005380 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	460b      	mov	r3, r1
 800538a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800538c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005390:	f002 fcb2 	bl	8007cf8 <USBD_static_malloc>
 8005394:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d109      	bne.n	80053b0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	32b0      	adds	r2, #176	; 0xb0
 80053a6:	2100      	movs	r1, #0
 80053a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80053ac:	2302      	movs	r3, #2
 80053ae:	e0d4      	b.n	800555a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80053b0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80053b4:	2100      	movs	r1, #0
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f002 fde4 	bl	8007f84 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	32b0      	adds	r2, #176	; 0xb0
 80053c6:	68f9      	ldr	r1, [r7, #12]
 80053c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	32b0      	adds	r2, #176	; 0xb0
 80053d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	7c1b      	ldrb	r3, [r3, #16]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d138      	bne.n	800545a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80053e8:	4b5e      	ldr	r3, [pc, #376]	; (8005564 <USBD_CDC_Init+0x1e4>)
 80053ea:	7819      	ldrb	r1, [r3, #0]
 80053ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053f0:	2202      	movs	r2, #2
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f002 fb5d 	bl	8007ab2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80053f8:	4b5a      	ldr	r3, [pc, #360]	; (8005564 <USBD_CDC_Init+0x1e4>)
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	f003 020f 	and.w	r2, r3, #15
 8005400:	6879      	ldr	r1, [r7, #4]
 8005402:	4613      	mov	r3, r2
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	4413      	add	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	440b      	add	r3, r1
 800540c:	3324      	adds	r3, #36	; 0x24
 800540e:	2201      	movs	r2, #1
 8005410:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005412:	4b55      	ldr	r3, [pc, #340]	; (8005568 <USBD_CDC_Init+0x1e8>)
 8005414:	7819      	ldrb	r1, [r3, #0]
 8005416:	f44f 7300 	mov.w	r3, #512	; 0x200
 800541a:	2202      	movs	r2, #2
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f002 fb48 	bl	8007ab2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005422:	4b51      	ldr	r3, [pc, #324]	; (8005568 <USBD_CDC_Init+0x1e8>)
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	f003 020f 	and.w	r2, r3, #15
 800542a:	6879      	ldr	r1, [r7, #4]
 800542c:	4613      	mov	r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4413      	add	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	440b      	add	r3, r1
 8005436:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800543a:	2201      	movs	r2, #1
 800543c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800543e:	4b4b      	ldr	r3, [pc, #300]	; (800556c <USBD_CDC_Init+0x1ec>)
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	f003 020f 	and.w	r2, r3, #15
 8005446:	6879      	ldr	r1, [r7, #4]
 8005448:	4613      	mov	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	440b      	add	r3, r1
 8005452:	3326      	adds	r3, #38	; 0x26
 8005454:	2210      	movs	r2, #16
 8005456:	801a      	strh	r2, [r3, #0]
 8005458:	e035      	b.n	80054c6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800545a:	4b42      	ldr	r3, [pc, #264]	; (8005564 <USBD_CDC_Init+0x1e4>)
 800545c:	7819      	ldrb	r1, [r3, #0]
 800545e:	2340      	movs	r3, #64	; 0x40
 8005460:	2202      	movs	r2, #2
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f002 fb25 	bl	8007ab2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005468:	4b3e      	ldr	r3, [pc, #248]	; (8005564 <USBD_CDC_Init+0x1e4>)
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	f003 020f 	and.w	r2, r3, #15
 8005470:	6879      	ldr	r1, [r7, #4]
 8005472:	4613      	mov	r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	4413      	add	r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	440b      	add	r3, r1
 800547c:	3324      	adds	r3, #36	; 0x24
 800547e:	2201      	movs	r2, #1
 8005480:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005482:	4b39      	ldr	r3, [pc, #228]	; (8005568 <USBD_CDC_Init+0x1e8>)
 8005484:	7819      	ldrb	r1, [r3, #0]
 8005486:	2340      	movs	r3, #64	; 0x40
 8005488:	2202      	movs	r2, #2
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f002 fb11 	bl	8007ab2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005490:	4b35      	ldr	r3, [pc, #212]	; (8005568 <USBD_CDC_Init+0x1e8>)
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	f003 020f 	and.w	r2, r3, #15
 8005498:	6879      	ldr	r1, [r7, #4]
 800549a:	4613      	mov	r3, r2
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	4413      	add	r3, r2
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	440b      	add	r3, r1
 80054a4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80054a8:	2201      	movs	r2, #1
 80054aa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80054ac:	4b2f      	ldr	r3, [pc, #188]	; (800556c <USBD_CDC_Init+0x1ec>)
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	f003 020f 	and.w	r2, r3, #15
 80054b4:	6879      	ldr	r1, [r7, #4]
 80054b6:	4613      	mov	r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4413      	add	r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	440b      	add	r3, r1
 80054c0:	3326      	adds	r3, #38	; 0x26
 80054c2:	2210      	movs	r2, #16
 80054c4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80054c6:	4b29      	ldr	r3, [pc, #164]	; (800556c <USBD_CDC_Init+0x1ec>)
 80054c8:	7819      	ldrb	r1, [r3, #0]
 80054ca:	2308      	movs	r3, #8
 80054cc:	2203      	movs	r2, #3
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f002 faef 	bl	8007ab2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80054d4:	4b25      	ldr	r3, [pc, #148]	; (800556c <USBD_CDC_Init+0x1ec>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	f003 020f 	and.w	r2, r3, #15
 80054dc:	6879      	ldr	r1, [r7, #4]
 80054de:	4613      	mov	r3, r2
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4413      	add	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	440b      	add	r3, r1
 80054e8:	3324      	adds	r3, #36	; 0x24
 80054ea:	2201      	movs	r2, #1
 80054ec:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	33b0      	adds	r3, #176	; 0xb0
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	4413      	add	r3, r2
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005520:	2b00      	cmp	r3, #0
 8005522:	d101      	bne.n	8005528 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005524:	2302      	movs	r3, #2
 8005526:	e018      	b.n	800555a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	7c1b      	ldrb	r3, [r3, #16]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10a      	bne.n	8005546 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005530:	4b0d      	ldr	r3, [pc, #52]	; (8005568 <USBD_CDC_Init+0x1e8>)
 8005532:	7819      	ldrb	r1, [r3, #0]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800553a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f002 fba6 	bl	8007c90 <USBD_LL_PrepareReceive>
 8005544:	e008      	b.n	8005558 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005546:	4b08      	ldr	r3, [pc, #32]	; (8005568 <USBD_CDC_Init+0x1e8>)
 8005548:	7819      	ldrb	r1, [r3, #0]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005550:	2340      	movs	r3, #64	; 0x40
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f002 fb9c 	bl	8007c90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	200000b7 	.word	0x200000b7
 8005568:	200000b8 	.word	0x200000b8
 800556c:	200000b9 	.word	0x200000b9

08005570 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	460b      	mov	r3, r1
 800557a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800557c:	4b3a      	ldr	r3, [pc, #232]	; (8005668 <USBD_CDC_DeInit+0xf8>)
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	4619      	mov	r1, r3
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f002 fabb 	bl	8007afe <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005588:	4b37      	ldr	r3, [pc, #220]	; (8005668 <USBD_CDC_DeInit+0xf8>)
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	f003 020f 	and.w	r2, r3, #15
 8005590:	6879      	ldr	r1, [r7, #4]
 8005592:	4613      	mov	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4413      	add	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	440b      	add	r3, r1
 800559c:	3324      	adds	r3, #36	; 0x24
 800559e:	2200      	movs	r2, #0
 80055a0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80055a2:	4b32      	ldr	r3, [pc, #200]	; (800566c <USBD_CDC_DeInit+0xfc>)
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	4619      	mov	r1, r3
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f002 faa8 	bl	8007afe <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80055ae:	4b2f      	ldr	r3, [pc, #188]	; (800566c <USBD_CDC_DeInit+0xfc>)
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	f003 020f 	and.w	r2, r3, #15
 80055b6:	6879      	ldr	r1, [r7, #4]
 80055b8:	4613      	mov	r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	440b      	add	r3, r1
 80055c2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80055c6:	2200      	movs	r2, #0
 80055c8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80055ca:	4b29      	ldr	r3, [pc, #164]	; (8005670 <USBD_CDC_DeInit+0x100>)
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	4619      	mov	r1, r3
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f002 fa94 	bl	8007afe <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80055d6:	4b26      	ldr	r3, [pc, #152]	; (8005670 <USBD_CDC_DeInit+0x100>)
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	f003 020f 	and.w	r2, r3, #15
 80055de:	6879      	ldr	r1, [r7, #4]
 80055e0:	4613      	mov	r3, r2
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	4413      	add	r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	440b      	add	r3, r1
 80055ea:	3324      	adds	r3, #36	; 0x24
 80055ec:	2200      	movs	r2, #0
 80055ee:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80055f0:	4b1f      	ldr	r3, [pc, #124]	; (8005670 <USBD_CDC_DeInit+0x100>)
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	f003 020f 	and.w	r2, r3, #15
 80055f8:	6879      	ldr	r1, [r7, #4]
 80055fa:	4613      	mov	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4413      	add	r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	440b      	add	r3, r1
 8005604:	3326      	adds	r3, #38	; 0x26
 8005606:	2200      	movs	r2, #0
 8005608:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	32b0      	adds	r2, #176	; 0xb0
 8005614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d01f      	beq.n	800565c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	33b0      	adds	r3, #176	; 0xb0
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4413      	add	r3, r2
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	32b0      	adds	r2, #176	; 0xb0
 800563a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800563e:	4618      	mov	r0, r3
 8005640:	f002 fb68 	bl	8007d14 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	32b0      	adds	r2, #176	; 0xb0
 800564e:	2100      	movs	r1, #0
 8005650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	200000b7 	.word	0x200000b7
 800566c:	200000b8 	.word	0x200000b8
 8005670:	200000b9 	.word	0x200000b9

08005674 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b086      	sub	sp, #24
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	32b0      	adds	r2, #176	; 0xb0
 8005688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800568c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800568e:	2300      	movs	r3, #0
 8005690:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005692:	2300      	movs	r3, #0
 8005694:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005696:	2300      	movs	r3, #0
 8005698:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d101      	bne.n	80056a4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e0bf      	b.n	8005824 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d050      	beq.n	8005752 <USBD_CDC_Setup+0xde>
 80056b0:	2b20      	cmp	r3, #32
 80056b2:	f040 80af 	bne.w	8005814 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	88db      	ldrh	r3, [r3, #6]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d03a      	beq.n	8005734 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	b25b      	sxtb	r3, r3
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	da1b      	bge.n	8005700 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	33b0      	adds	r3, #176	; 0xb0
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4413      	add	r3, r2
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80056de:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80056e0:	683a      	ldr	r2, [r7, #0]
 80056e2:	88d2      	ldrh	r2, [r2, #6]
 80056e4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	88db      	ldrh	r3, [r3, #6]
 80056ea:	2b07      	cmp	r3, #7
 80056ec:	bf28      	it	cs
 80056ee:	2307      	movcs	r3, #7
 80056f0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	89fa      	ldrh	r2, [r7, #14]
 80056f6:	4619      	mov	r1, r3
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f001 fd89 	bl	8007210 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80056fe:	e090      	b.n	8005822 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	785a      	ldrb	r2, [r3, #1]
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	88db      	ldrh	r3, [r3, #6]
 800570e:	2b3f      	cmp	r3, #63	; 0x3f
 8005710:	d803      	bhi.n	800571a <USBD_CDC_Setup+0xa6>
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	88db      	ldrh	r3, [r3, #6]
 8005716:	b2da      	uxtb	r2, r3
 8005718:	e000      	b.n	800571c <USBD_CDC_Setup+0xa8>
 800571a:	2240      	movs	r2, #64	; 0x40
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005722:	6939      	ldr	r1, [r7, #16]
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800572a:	461a      	mov	r2, r3
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f001 fd9b 	bl	8007268 <USBD_CtlPrepareRx>
      break;
 8005732:	e076      	b.n	8005822 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	33b0      	adds	r3, #176	; 0xb0
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4413      	add	r3, r2
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	683a      	ldr	r2, [r7, #0]
 8005748:	7850      	ldrb	r0, [r2, #1]
 800574a:	2200      	movs	r2, #0
 800574c:	6839      	ldr	r1, [r7, #0]
 800574e:	4798      	blx	r3
      break;
 8005750:	e067      	b.n	8005822 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	785b      	ldrb	r3, [r3, #1]
 8005756:	2b0b      	cmp	r3, #11
 8005758:	d851      	bhi.n	80057fe <USBD_CDC_Setup+0x18a>
 800575a:	a201      	add	r2, pc, #4	; (adr r2, 8005760 <USBD_CDC_Setup+0xec>)
 800575c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005760:	08005791 	.word	0x08005791
 8005764:	0800580d 	.word	0x0800580d
 8005768:	080057ff 	.word	0x080057ff
 800576c:	080057ff 	.word	0x080057ff
 8005770:	080057ff 	.word	0x080057ff
 8005774:	080057ff 	.word	0x080057ff
 8005778:	080057ff 	.word	0x080057ff
 800577c:	080057ff 	.word	0x080057ff
 8005780:	080057ff 	.word	0x080057ff
 8005784:	080057ff 	.word	0x080057ff
 8005788:	080057bb 	.word	0x080057bb
 800578c:	080057e5 	.word	0x080057e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005796:	b2db      	uxtb	r3, r3
 8005798:	2b03      	cmp	r3, #3
 800579a:	d107      	bne.n	80057ac <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800579c:	f107 030a 	add.w	r3, r7, #10
 80057a0:	2202      	movs	r2, #2
 80057a2:	4619      	mov	r1, r3
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f001 fd33 	bl	8007210 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80057aa:	e032      	b.n	8005812 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80057ac:	6839      	ldr	r1, [r7, #0]
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f001 fcbd 	bl	800712e <USBD_CtlError>
            ret = USBD_FAIL;
 80057b4:	2303      	movs	r3, #3
 80057b6:	75fb      	strb	r3, [r7, #23]
          break;
 80057b8:	e02b      	b.n	8005812 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b03      	cmp	r3, #3
 80057c4:	d107      	bne.n	80057d6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80057c6:	f107 030d 	add.w	r3, r7, #13
 80057ca:	2201      	movs	r2, #1
 80057cc:	4619      	mov	r1, r3
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f001 fd1e 	bl	8007210 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80057d4:	e01d      	b.n	8005812 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80057d6:	6839      	ldr	r1, [r7, #0]
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f001 fca8 	bl	800712e <USBD_CtlError>
            ret = USBD_FAIL;
 80057de:	2303      	movs	r3, #3
 80057e0:	75fb      	strb	r3, [r7, #23]
          break;
 80057e2:	e016      	b.n	8005812 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	2b03      	cmp	r3, #3
 80057ee:	d00f      	beq.n	8005810 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80057f0:	6839      	ldr	r1, [r7, #0]
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f001 fc9b 	bl	800712e <USBD_CtlError>
            ret = USBD_FAIL;
 80057f8:	2303      	movs	r3, #3
 80057fa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80057fc:	e008      	b.n	8005810 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80057fe:	6839      	ldr	r1, [r7, #0]
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f001 fc94 	bl	800712e <USBD_CtlError>
          ret = USBD_FAIL;
 8005806:	2303      	movs	r3, #3
 8005808:	75fb      	strb	r3, [r7, #23]
          break;
 800580a:	e002      	b.n	8005812 <USBD_CDC_Setup+0x19e>
          break;
 800580c:	bf00      	nop
 800580e:	e008      	b.n	8005822 <USBD_CDC_Setup+0x1ae>
          break;
 8005810:	bf00      	nop
      }
      break;
 8005812:	e006      	b.n	8005822 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005814:	6839      	ldr	r1, [r7, #0]
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f001 fc89 	bl	800712e <USBD_CtlError>
      ret = USBD_FAIL;
 800581c:	2303      	movs	r3, #3
 800581e:	75fb      	strb	r3, [r7, #23]
      break;
 8005820:	bf00      	nop
  }

  return (uint8_t)ret;
 8005822:	7dfb      	ldrb	r3, [r7, #23]
}
 8005824:	4618      	mov	r0, r3
 8005826:	3718      	adds	r7, #24
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	460b      	mov	r3, r1
 8005836:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800583e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	32b0      	adds	r2, #176	; 0xb0
 800584a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d101      	bne.n	8005856 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005852:	2303      	movs	r3, #3
 8005854:	e065      	b.n	8005922 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	32b0      	adds	r2, #176	; 0xb0
 8005860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005864:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005866:	78fb      	ldrb	r3, [r7, #3]
 8005868:	f003 020f 	and.w	r2, r3, #15
 800586c:	6879      	ldr	r1, [r7, #4]
 800586e:	4613      	mov	r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	4413      	add	r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	440b      	add	r3, r1
 8005878:	3318      	adds	r3, #24
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d02f      	beq.n	80058e0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005880:	78fb      	ldrb	r3, [r7, #3]
 8005882:	f003 020f 	and.w	r2, r3, #15
 8005886:	6879      	ldr	r1, [r7, #4]
 8005888:	4613      	mov	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	440b      	add	r3, r1
 8005892:	3318      	adds	r3, #24
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	78fb      	ldrb	r3, [r7, #3]
 8005898:	f003 010f 	and.w	r1, r3, #15
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	460b      	mov	r3, r1
 80058a0:	00db      	lsls	r3, r3, #3
 80058a2:	440b      	add	r3, r1
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4403      	add	r3, r0
 80058a8:	3348      	adds	r3, #72	; 0x48
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	fbb2 f1f3 	udiv	r1, r2, r3
 80058b0:	fb01 f303 	mul.w	r3, r1, r3
 80058b4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d112      	bne.n	80058e0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80058ba:	78fb      	ldrb	r3, [r7, #3]
 80058bc:	f003 020f 	and.w	r2, r3, #15
 80058c0:	6879      	ldr	r1, [r7, #4]
 80058c2:	4613      	mov	r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4413      	add	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	440b      	add	r3, r1
 80058cc:	3318      	adds	r3, #24
 80058ce:	2200      	movs	r2, #0
 80058d0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80058d2:	78f9      	ldrb	r1, [r7, #3]
 80058d4:	2300      	movs	r3, #0
 80058d6:	2200      	movs	r2, #0
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f002 f9b8 	bl	8007c4e <USBD_LL_Transmit>
 80058de:	e01f      	b.n	8005920 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	33b0      	adds	r3, #176	; 0xb0
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	4413      	add	r3, r2
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d010      	beq.n	8005920 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	33b0      	adds	r3, #176	; 0xb0
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	4413      	add	r3, r2
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800591c:	78fa      	ldrb	r2, [r7, #3]
 800591e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b084      	sub	sp, #16
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
 8005932:	460b      	mov	r3, r1
 8005934:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	32b0      	adds	r2, #176	; 0xb0
 8005940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005944:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	32b0      	adds	r2, #176	; 0xb0
 8005950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d101      	bne.n	800595c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005958:	2303      	movs	r3, #3
 800595a:	e01a      	b.n	8005992 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800595c:	78fb      	ldrb	r3, [r7, #3]
 800595e:	4619      	mov	r1, r3
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f002 f9b6 	bl	8007cd2 <USBD_LL_GetRxDataSize>
 8005966:	4602      	mov	r2, r0
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	33b0      	adds	r3, #176	; 0xb0
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4413      	add	r3, r2
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800598c:	4611      	mov	r1, r2
 800598e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b084      	sub	sp, #16
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	32b0      	adds	r2, #176	; 0xb0
 80059ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059b0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d101      	bne.n	80059bc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80059b8:	2303      	movs	r3, #3
 80059ba:	e025      	b.n	8005a08 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	33b0      	adds	r3, #176	; 0xb0
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4413      	add	r3, r2
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d01a      	beq.n	8005a06 <USBD_CDC_EP0_RxReady+0x6c>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80059d6:	2bff      	cmp	r3, #255	; 0xff
 80059d8:	d015      	beq.n	8005a06 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	33b0      	adds	r3, #176	; 0xb0
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	4413      	add	r3, r2
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80059f2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80059fa:	b292      	uxth	r2, r2
 80059fc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	22ff      	movs	r2, #255	; 0xff
 8005a02:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005a18:	2182      	movs	r1, #130	; 0x82
 8005a1a:	4818      	ldr	r0, [pc, #96]	; (8005a7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005a1c:	f000 fd4f 	bl	80064be <USBD_GetEpDesc>
 8005a20:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005a22:	2101      	movs	r1, #1
 8005a24:	4815      	ldr	r0, [pc, #84]	; (8005a7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005a26:	f000 fd4a 	bl	80064be <USBD_GetEpDesc>
 8005a2a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005a2c:	2181      	movs	r1, #129	; 0x81
 8005a2e:	4813      	ldr	r0, [pc, #76]	; (8005a7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005a30:	f000 fd45 	bl	80064be <USBD_GetEpDesc>
 8005a34:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d002      	beq.n	8005a42 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	2210      	movs	r2, #16
 8005a40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d006      	beq.n	8005a56 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a50:	711a      	strb	r2, [r3, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d006      	beq.n	8005a6a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a64:	711a      	strb	r2, [r3, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2243      	movs	r2, #67	; 0x43
 8005a6e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005a70:	4b02      	ldr	r3, [pc, #8]	; (8005a7c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3718      	adds	r7, #24
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	20000074 	.word	0x20000074

08005a80 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b086      	sub	sp, #24
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005a88:	2182      	movs	r1, #130	; 0x82
 8005a8a:	4818      	ldr	r0, [pc, #96]	; (8005aec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005a8c:	f000 fd17 	bl	80064be <USBD_GetEpDesc>
 8005a90:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005a92:	2101      	movs	r1, #1
 8005a94:	4815      	ldr	r0, [pc, #84]	; (8005aec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005a96:	f000 fd12 	bl	80064be <USBD_GetEpDesc>
 8005a9a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005a9c:	2181      	movs	r1, #129	; 0x81
 8005a9e:	4813      	ldr	r0, [pc, #76]	; (8005aec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005aa0:	f000 fd0d 	bl	80064be <USBD_GetEpDesc>
 8005aa4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d002      	beq.n	8005ab2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	2210      	movs	r2, #16
 8005ab0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d006      	beq.n	8005ac6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	2200      	movs	r2, #0
 8005abc:	711a      	strb	r2, [r3, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f042 0202 	orr.w	r2, r2, #2
 8005ac4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d006      	beq.n	8005ada <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	711a      	strb	r2, [r3, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f042 0202 	orr.w	r2, r2, #2
 8005ad8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2243      	movs	r2, #67	; 0x43
 8005ade:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005ae0:	4b02      	ldr	r3, [pc, #8]	; (8005aec <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3718      	adds	r7, #24
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	20000074 	.word	0x20000074

08005af0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005af8:	2182      	movs	r1, #130	; 0x82
 8005afa:	4818      	ldr	r0, [pc, #96]	; (8005b5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005afc:	f000 fcdf 	bl	80064be <USBD_GetEpDesc>
 8005b00:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005b02:	2101      	movs	r1, #1
 8005b04:	4815      	ldr	r0, [pc, #84]	; (8005b5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005b06:	f000 fcda 	bl	80064be <USBD_GetEpDesc>
 8005b0a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005b0c:	2181      	movs	r1, #129	; 0x81
 8005b0e:	4813      	ldr	r0, [pc, #76]	; (8005b5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005b10:	f000 fcd5 	bl	80064be <USBD_GetEpDesc>
 8005b14:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	2210      	movs	r2, #16
 8005b20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d006      	beq.n	8005b36 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b30:	711a      	strb	r2, [r3, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d006      	beq.n	8005b4a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b44:	711a      	strb	r2, [r3, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2243      	movs	r2, #67	; 0x43
 8005b4e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005b50:	4b02      	ldr	r3, [pc, #8]	; (8005b5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3718      	adds	r7, #24
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	20000074 	.word	0x20000074

08005b60 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	220a      	movs	r2, #10
 8005b6c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005b6e:	4b03      	ldr	r3, [pc, #12]	; (8005b7c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr
 8005b7c:	20000030 	.word	0x20000030

08005b80 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d101      	bne.n	8005b94 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e009      	b.n	8005ba8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	33b0      	adds	r3, #176	; 0xb0
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4413      	add	r3, r2
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b087      	sub	sp, #28
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	32b0      	adds	r2, #176	; 0xb0
 8005bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bce:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e008      	b.n	8005bec <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	371c      	adds	r7, #28
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	32b0      	adds	r2, #176	; 0xb0
 8005c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c10:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d101      	bne.n	8005c1c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e004      	b.n	8005c26 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	683a      	ldr	r2, [r7, #0]
 8005c20:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3714      	adds	r7, #20
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
	...

08005c34 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	32b0      	adds	r2, #176	; 0xb0
 8005c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c4a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	32b0      	adds	r2, #176	; 0xb0
 8005c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d101      	bne.n	8005c66 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e025      	b.n	8005cb2 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d11f      	bne.n	8005cb0 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005c78:	4b10      	ldr	r3, [pc, #64]	; (8005cbc <USBD_CDC_TransmitPacket+0x88>)
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	f003 020f 	and.w	r2, r3, #15
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	4613      	mov	r3, r2
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	4413      	add	r3, r2
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	4403      	add	r3, r0
 8005c92:	3318      	adds	r3, #24
 8005c94:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005c96:	4b09      	ldr	r3, [pc, #36]	; (8005cbc <USBD_CDC_TransmitPacket+0x88>)
 8005c98:	7819      	ldrb	r1, [r3, #0]
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f001 ffd1 	bl	8007c4e <USBD_LL_Transmit>

    ret = USBD_OK;
 8005cac:	2300      	movs	r3, #0
 8005cae:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	200000b7 	.word	0x200000b7

08005cc0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	32b0      	adds	r2, #176	; 0xb0
 8005cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cd6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	32b0      	adds	r2, #176	; 0xb0
 8005ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e018      	b.n	8005d20 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	7c1b      	ldrb	r3, [r3, #16]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10a      	bne.n	8005d0c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005cf6:	4b0c      	ldr	r3, [pc, #48]	; (8005d28 <USBD_CDC_ReceivePacket+0x68>)
 8005cf8:	7819      	ldrb	r1, [r3, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f001 ffc3 	bl	8007c90 <USBD_LL_PrepareReceive>
 8005d0a:	e008      	b.n	8005d1e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005d0c:	4b06      	ldr	r3, [pc, #24]	; (8005d28 <USBD_CDC_ReceivePacket+0x68>)
 8005d0e:	7819      	ldrb	r1, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d16:	2340      	movs	r3, #64	; 0x40
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f001 ffb9 	bl	8007c90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	200000b8 	.word	0x200000b8

08005d2c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b086      	sub	sp, #24
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	4613      	mov	r3, r2
 8005d38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d101      	bne.n	8005d44 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e01f      	b.n	8005d84 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d003      	beq.n	8005d6a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	79fa      	ldrb	r2, [r7, #7]
 8005d76:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f001 fe33 	bl	80079e4 <USBD_LL_Init>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005d82:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3718      	adds	r7, #24
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005d96:	2300      	movs	r3, #0
 8005d98:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d101      	bne.n	8005da4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005da0:	2303      	movs	r3, #3
 8005da2:	e025      	b.n	8005df0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	32ae      	adds	r2, #174	; 0xae
 8005db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00f      	beq.n	8005de0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	32ae      	adds	r2, #174	; 0xae
 8005dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd0:	f107 020e 	add.w	r2, r7, #14
 8005dd4:	4610      	mov	r0, r2
 8005dd6:	4798      	blx	r3
 8005dd8:	4602      	mov	r2, r0
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005de6:	1c5a      	adds	r2, r3, #1
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3710      	adds	r7, #16
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f001 fe3b 	bl	8007a7c <USBD_LL_Start>
 8005e06:	4603      	mov	r3, r0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3708      	adds	r7, #8
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005e18:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b084      	sub	sp, #16
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
 8005e2e:	460b      	mov	r3, r1
 8005e30:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e32:	2300      	movs	r3, #0
 8005e34:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d009      	beq.n	8005e54 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	78fa      	ldrb	r2, [r7, #3]
 8005e4a:	4611      	mov	r1, r2
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	4798      	blx	r3
 8005e50:	4603      	mov	r3, r0
 8005e52:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b084      	sub	sp, #16
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
 8005e66:	460b      	mov	r3, r1
 8005e68:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	78fa      	ldrb	r2, [r7, #3]
 8005e78:	4611      	mov	r1, r2
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	4798      	blx	r3
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d001      	beq.n	8005e88 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005e84:	2303      	movs	r3, #3
 8005e86:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b084      	sub	sp, #16
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
 8005e9a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ea2:	6839      	ldr	r1, [r7, #0]
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f001 f908 	bl	80070ba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005eb8:	461a      	mov	r2, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005ec6:	f003 031f 	and.w	r3, r3, #31
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d01a      	beq.n	8005f04 <USBD_LL_SetupStage+0x72>
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d822      	bhi.n	8005f18 <USBD_LL_SetupStage+0x86>
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d002      	beq.n	8005edc <USBD_LL_SetupStage+0x4a>
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d00a      	beq.n	8005ef0 <USBD_LL_SetupStage+0x5e>
 8005eda:	e01d      	b.n	8005f18 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 fb5f 	bl	80065a8 <USBD_StdDevReq>
 8005eea:	4603      	mov	r3, r0
 8005eec:	73fb      	strb	r3, [r7, #15]
      break;
 8005eee:	e020      	b.n	8005f32 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 fbc7 	bl	800668c <USBD_StdItfReq>
 8005efe:	4603      	mov	r3, r0
 8005f00:	73fb      	strb	r3, [r7, #15]
      break;
 8005f02:	e016      	b.n	8005f32 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 fc29 	bl	8006764 <USBD_StdEPReq>
 8005f12:	4603      	mov	r3, r0
 8005f14:	73fb      	strb	r3, [r7, #15]
      break;
 8005f16:	e00c      	b.n	8005f32 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005f1e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	4619      	mov	r1, r3
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f001 fe08 	bl	8007b3c <USBD_LL_StallEP>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f30:	bf00      	nop
  }

  return ret;
 8005f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	460b      	mov	r3, r1
 8005f46:	607a      	str	r2, [r7, #4]
 8005f48:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005f4e:	7afb      	ldrb	r3, [r7, #11]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d16e      	bne.n	8006032 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005f5a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f62:	2b03      	cmp	r3, #3
 8005f64:	f040 8098 	bne.w	8006098 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	689a      	ldr	r2, [r3, #8]
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d913      	bls.n	8005f9c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	689a      	ldr	r2, [r3, #8]
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	1ad2      	subs	r2, r2, r3
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	68da      	ldr	r2, [r3, #12]
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	bf28      	it	cs
 8005f8e:	4613      	movcs	r3, r2
 8005f90:	461a      	mov	r2, r3
 8005f92:	6879      	ldr	r1, [r7, #4]
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	f001 f984 	bl	80072a2 <USBD_CtlContinueRx>
 8005f9a:	e07d      	b.n	8006098 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005fa2:	f003 031f 	and.w	r3, r3, #31
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d014      	beq.n	8005fd4 <USBD_LL_DataOutStage+0x98>
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d81d      	bhi.n	8005fea <USBD_LL_DataOutStage+0xae>
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d002      	beq.n	8005fb8 <USBD_LL_DataOutStage+0x7c>
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d003      	beq.n	8005fbe <USBD_LL_DataOutStage+0x82>
 8005fb6:	e018      	b.n	8005fea <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	75bb      	strb	r3, [r7, #22]
            break;
 8005fbc:	e018      	b.n	8005ff0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f000 fa5e 	bl	800648a <USBD_CoreFindIF>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	75bb      	strb	r3, [r7, #22]
            break;
 8005fd2:	e00d      	b.n	8005ff0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	4619      	mov	r1, r3
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f000 fa60 	bl	80064a4 <USBD_CoreFindEP>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	75bb      	strb	r3, [r7, #22]
            break;
 8005fe8:	e002      	b.n	8005ff0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005fea:	2300      	movs	r3, #0
 8005fec:	75bb      	strb	r3, [r7, #22]
            break;
 8005fee:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005ff0:	7dbb      	ldrb	r3, [r7, #22]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d119      	bne.n	800602a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b03      	cmp	r3, #3
 8006000:	d113      	bne.n	800602a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006002:	7dba      	ldrb	r2, [r7, #22]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	32ae      	adds	r2, #174	; 0xae
 8006008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00b      	beq.n	800602a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006012:	7dba      	ldrb	r2, [r7, #22]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800601a:	7dba      	ldrb	r2, [r7, #22]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	32ae      	adds	r2, #174	; 0xae
 8006020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f001 f94a 	bl	80072c4 <USBD_CtlSendStatus>
 8006030:	e032      	b.n	8006098 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006032:	7afb      	ldrb	r3, [r7, #11]
 8006034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006038:	b2db      	uxtb	r3, r3
 800603a:	4619      	mov	r1, r3
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f000 fa31 	bl	80064a4 <USBD_CoreFindEP>
 8006042:	4603      	mov	r3, r0
 8006044:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006046:	7dbb      	ldrb	r3, [r7, #22]
 8006048:	2bff      	cmp	r3, #255	; 0xff
 800604a:	d025      	beq.n	8006098 <USBD_LL_DataOutStage+0x15c>
 800604c:	7dbb      	ldrb	r3, [r7, #22]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d122      	bne.n	8006098 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b03      	cmp	r3, #3
 800605c:	d117      	bne.n	800608e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800605e:	7dba      	ldrb	r2, [r7, #22]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	32ae      	adds	r2, #174	; 0xae
 8006064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00f      	beq.n	800608e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800606e:	7dba      	ldrb	r2, [r7, #22]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006076:	7dba      	ldrb	r2, [r7, #22]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	32ae      	adds	r2, #174	; 0xae
 800607c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	7afa      	ldrb	r2, [r7, #11]
 8006084:	4611      	mov	r1, r2
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	4798      	blx	r3
 800608a:	4603      	mov	r3, r0
 800608c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800608e:	7dfb      	ldrb	r3, [r7, #23]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d001      	beq.n	8006098 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006094:	7dfb      	ldrb	r3, [r7, #23]
 8006096:	e000      	b.n	800609a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3718      	adds	r7, #24
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}

080060a2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80060a2:	b580      	push	{r7, lr}
 80060a4:	b086      	sub	sp, #24
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	60f8      	str	r0, [r7, #12]
 80060aa:	460b      	mov	r3, r1
 80060ac:	607a      	str	r2, [r7, #4]
 80060ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80060b0:	7afb      	ldrb	r3, [r7, #11]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d16f      	bne.n	8006196 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	3314      	adds	r3, #20
 80060ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d15a      	bne.n	800617c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	689a      	ldr	r2, [r3, #8]
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d914      	bls.n	80060fc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	689a      	ldr	r2, [r3, #8]
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	1ad2      	subs	r2, r2, r3
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	461a      	mov	r2, r3
 80060e6:	6879      	ldr	r1, [r7, #4]
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f001 f8ac 	bl	8007246 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80060ee:	2300      	movs	r3, #0
 80060f0:	2200      	movs	r2, #0
 80060f2:	2100      	movs	r1, #0
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f001 fdcb 	bl	8007c90 <USBD_LL_PrepareReceive>
 80060fa:	e03f      	b.n	800617c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	68da      	ldr	r2, [r3, #12]
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	429a      	cmp	r2, r3
 8006106:	d11c      	bne.n	8006142 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	685a      	ldr	r2, [r3, #4]
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006110:	429a      	cmp	r2, r3
 8006112:	d316      	bcc.n	8006142 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	685a      	ldr	r2, [r3, #4]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800611e:	429a      	cmp	r2, r3
 8006120:	d20f      	bcs.n	8006142 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006122:	2200      	movs	r2, #0
 8006124:	2100      	movs	r1, #0
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f001 f88d 	bl	8007246 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006134:	2300      	movs	r3, #0
 8006136:	2200      	movs	r2, #0
 8006138:	2100      	movs	r1, #0
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f001 fda8 	bl	8007c90 <USBD_LL_PrepareReceive>
 8006140:	e01c      	b.n	800617c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b03      	cmp	r3, #3
 800614c:	d10f      	bne.n	800616e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d009      	beq.n	800616e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800616e:	2180      	movs	r1, #128	; 0x80
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f001 fce3 	bl	8007b3c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f001 f8b7 	bl	80072ea <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d03a      	beq.n	80061fc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f7ff fe42 	bl	8005e10 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006194:	e032      	b.n	80061fc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006196:	7afb      	ldrb	r3, [r7, #11]
 8006198:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800619c:	b2db      	uxtb	r3, r3
 800619e:	4619      	mov	r1, r3
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f000 f97f 	bl	80064a4 <USBD_CoreFindEP>
 80061a6:	4603      	mov	r3, r0
 80061a8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80061aa:	7dfb      	ldrb	r3, [r7, #23]
 80061ac:	2bff      	cmp	r3, #255	; 0xff
 80061ae:	d025      	beq.n	80061fc <USBD_LL_DataInStage+0x15a>
 80061b0:	7dfb      	ldrb	r3, [r7, #23]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d122      	bne.n	80061fc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b03      	cmp	r3, #3
 80061c0:	d11c      	bne.n	80061fc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80061c2:	7dfa      	ldrb	r2, [r7, #23]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	32ae      	adds	r2, #174	; 0xae
 80061c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061cc:	695b      	ldr	r3, [r3, #20]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d014      	beq.n	80061fc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80061d2:	7dfa      	ldrb	r2, [r7, #23]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80061da:	7dfa      	ldrb	r2, [r7, #23]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	32ae      	adds	r2, #174	; 0xae
 80061e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	7afa      	ldrb	r2, [r7, #11]
 80061e8:	4611      	mov	r1, r2
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	4798      	blx	r3
 80061ee:	4603      	mov	r3, r0
 80061f0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80061f2:	7dbb      	ldrb	r3, [r7, #22]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d001      	beq.n	80061fc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80061f8:	7dbb      	ldrb	r3, [r7, #22]
 80061fa:	e000      	b.n	80061fe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3718      	adds	r7, #24
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b084      	sub	sp, #16
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800620e:	2300      	movs	r3, #0
 8006210:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800623e:	2b00      	cmp	r3, #0
 8006240:	d014      	beq.n	800626c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00e      	beq.n	800626c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	6852      	ldr	r2, [r2, #4]
 800625a:	b2d2      	uxtb	r2, r2
 800625c:	4611      	mov	r1, r2
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	4798      	blx	r3
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d001      	beq.n	800626c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006268:	2303      	movs	r3, #3
 800626a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800626c:	2340      	movs	r3, #64	; 0x40
 800626e:	2200      	movs	r2, #0
 8006270:	2100      	movs	r1, #0
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f001 fc1d 	bl	8007ab2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2240      	movs	r2, #64	; 0x40
 8006284:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006288:	2340      	movs	r3, #64	; 0x40
 800628a:	2200      	movs	r2, #0
 800628c:	2180      	movs	r1, #128	; 0x80
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f001 fc0f 	bl	8007ab2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2240      	movs	r2, #64	; 0x40
 800629e:	621a      	str	r2, [r3, #32]

  return ret;
 80062a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3710      	adds	r7, #16
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}

080062aa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80062aa:	b480      	push	{r7}
 80062ac:	b083      	sub	sp, #12
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
 80062b2:	460b      	mov	r3, r1
 80062b4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	78fa      	ldrb	r2, [r7, #3]
 80062ba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80062ca:	b480      	push	{r7}
 80062cc:	b083      	sub	sp, #12
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2204      	movs	r2, #4
 80062e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80062f6:	b480      	push	{r7}
 80062f8:	b083      	sub	sp, #12
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b04      	cmp	r3, #4
 8006308:	d106      	bne.n	8006318 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006310:	b2da      	uxtb	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	370c      	adds	r7, #12
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b082      	sub	sp, #8
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b03      	cmp	r3, #3
 8006338:	d110      	bne.n	800635c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00b      	beq.n	800635c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800634a:	69db      	ldr	r3, [r3, #28]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d005      	beq.n	800635c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006356:	69db      	ldr	r3, [r3, #28]
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3708      	adds	r7, #8
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b082      	sub	sp, #8
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
 800636e:	460b      	mov	r3, r1
 8006370:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	32ae      	adds	r2, #174	; 0xae
 800637c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d101      	bne.n	8006388 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006384:	2303      	movs	r3, #3
 8006386:	e01c      	b.n	80063c2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800638e:	b2db      	uxtb	r3, r3
 8006390:	2b03      	cmp	r3, #3
 8006392:	d115      	bne.n	80063c0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	32ae      	adds	r2, #174	; 0xae
 800639e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063a2:	6a1b      	ldr	r3, [r3, #32]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00b      	beq.n	80063c0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	32ae      	adds	r2, #174	; 0xae
 80063b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063b6:	6a1b      	ldr	r3, [r3, #32]
 80063b8:	78fa      	ldrb	r2, [r7, #3]
 80063ba:	4611      	mov	r1, r2
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3708      	adds	r7, #8
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b082      	sub	sp, #8
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
 80063d2:	460b      	mov	r3, r1
 80063d4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	32ae      	adds	r2, #174	; 0xae
 80063e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d101      	bne.n	80063ec <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e01c      	b.n	8006426 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	2b03      	cmp	r3, #3
 80063f6:	d115      	bne.n	8006424 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	32ae      	adds	r2, #174	; 0xae
 8006402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00b      	beq.n	8006424 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	32ae      	adds	r2, #174	; 0xae
 8006416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800641a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641c:	78fa      	ldrb	r2, [r7, #3]
 800641e:	4611      	mov	r1, r2
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3708      	adds	r7, #8
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800642e:	b480      	push	{r7}
 8006430:	b083      	sub	sp, #12
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800644c:	2300      	movs	r3, #0
 800644e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00e      	beq.n	8006480 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	6852      	ldr	r2, [r2, #4]
 800646e:	b2d2      	uxtb	r2, r2
 8006470:	4611      	mov	r1, r2
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	4798      	blx	r3
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d001      	beq.n	8006480 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800647c:	2303      	movs	r3, #3
 800647e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006480:	7bfb      	ldrb	r3, [r7, #15]
}
 8006482:	4618      	mov	r0, r3
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800648a:	b480      	push	{r7}
 800648c:	b083      	sub	sp, #12
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
 8006492:	460b      	mov	r3, r1
 8006494:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006496:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006498:	4618      	mov	r0, r3
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	460b      	mov	r3, r1
 80064ae:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80064b0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	370c      	adds	r7, #12
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b086      	sub	sp, #24
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
 80064c6:	460b      	mov	r3, r1
 80064c8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80064d2:	2300      	movs	r3, #0
 80064d4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	885b      	ldrh	r3, [r3, #2]
 80064da:	b29a      	uxth	r2, r3
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d920      	bls.n	8006528 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80064ee:	e013      	b.n	8006518 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80064f0:	f107 030a 	add.w	r3, r7, #10
 80064f4:	4619      	mov	r1, r3
 80064f6:	6978      	ldr	r0, [r7, #20]
 80064f8:	f000 f81b 	bl	8006532 <USBD_GetNextDesc>
 80064fc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	785b      	ldrb	r3, [r3, #1]
 8006502:	2b05      	cmp	r3, #5
 8006504:	d108      	bne.n	8006518 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	789b      	ldrb	r3, [r3, #2]
 800650e:	78fa      	ldrb	r2, [r7, #3]
 8006510:	429a      	cmp	r2, r3
 8006512:	d008      	beq.n	8006526 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006514:	2300      	movs	r3, #0
 8006516:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	885b      	ldrh	r3, [r3, #2]
 800651c:	b29a      	uxth	r2, r3
 800651e:	897b      	ldrh	r3, [r7, #10]
 8006520:	429a      	cmp	r2, r3
 8006522:	d8e5      	bhi.n	80064f0 <USBD_GetEpDesc+0x32>
 8006524:	e000      	b.n	8006528 <USBD_GetEpDesc+0x6a>
          break;
 8006526:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006528:	693b      	ldr	r3, [r7, #16]
}
 800652a:	4618      	mov	r0, r3
 800652c:	3718      	adds	r7, #24
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006532:	b480      	push	{r7}
 8006534:	b085      	sub	sp, #20
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
 800653a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	881a      	ldrh	r2, [r3, #0]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	b29b      	uxth	r3, r3
 800654a:	4413      	add	r3, r2
 800654c:	b29a      	uxth	r2, r3
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	461a      	mov	r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4413      	add	r3, r2
 800655c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800655e:	68fb      	ldr	r3, [r7, #12]
}
 8006560:	4618      	mov	r0, r3
 8006562:	3714      	adds	r7, #20
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800656c:	b480      	push	{r7}
 800656e:	b087      	sub	sp, #28
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	3301      	adds	r3, #1
 8006582:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800658a:	8a3b      	ldrh	r3, [r7, #16]
 800658c:	021b      	lsls	r3, r3, #8
 800658e:	b21a      	sxth	r2, r3
 8006590:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006594:	4313      	orrs	r3, r2
 8006596:	b21b      	sxth	r3, r3
 8006598:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800659a:	89fb      	ldrh	r3, [r7, #14]
}
 800659c:	4618      	mov	r0, r3
 800659e:	371c      	adds	r7, #28
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065b2:	2300      	movs	r3, #0
 80065b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065be:	2b40      	cmp	r3, #64	; 0x40
 80065c0:	d005      	beq.n	80065ce <USBD_StdDevReq+0x26>
 80065c2:	2b40      	cmp	r3, #64	; 0x40
 80065c4:	d857      	bhi.n	8006676 <USBD_StdDevReq+0xce>
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00f      	beq.n	80065ea <USBD_StdDevReq+0x42>
 80065ca:	2b20      	cmp	r3, #32
 80065cc:	d153      	bne.n	8006676 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	32ae      	adds	r2, #174	; 0xae
 80065d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	6839      	ldr	r1, [r7, #0]
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	4798      	blx	r3
 80065e4:	4603      	mov	r3, r0
 80065e6:	73fb      	strb	r3, [r7, #15]
      break;
 80065e8:	e04a      	b.n	8006680 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	785b      	ldrb	r3, [r3, #1]
 80065ee:	2b09      	cmp	r3, #9
 80065f0:	d83b      	bhi.n	800666a <USBD_StdDevReq+0xc2>
 80065f2:	a201      	add	r2, pc, #4	; (adr r2, 80065f8 <USBD_StdDevReq+0x50>)
 80065f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f8:	0800664d 	.word	0x0800664d
 80065fc:	08006661 	.word	0x08006661
 8006600:	0800666b 	.word	0x0800666b
 8006604:	08006657 	.word	0x08006657
 8006608:	0800666b 	.word	0x0800666b
 800660c:	0800662b 	.word	0x0800662b
 8006610:	08006621 	.word	0x08006621
 8006614:	0800666b 	.word	0x0800666b
 8006618:	08006643 	.word	0x08006643
 800661c:	08006635 	.word	0x08006635
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006620:	6839      	ldr	r1, [r7, #0]
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 fa3c 	bl	8006aa0 <USBD_GetDescriptor>
          break;
 8006628:	e024      	b.n	8006674 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800662a:	6839      	ldr	r1, [r7, #0]
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 fba1 	bl	8006d74 <USBD_SetAddress>
          break;
 8006632:	e01f      	b.n	8006674 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006634:	6839      	ldr	r1, [r7, #0]
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 fbe0 	bl	8006dfc <USBD_SetConfig>
 800663c:	4603      	mov	r3, r0
 800663e:	73fb      	strb	r3, [r7, #15]
          break;
 8006640:	e018      	b.n	8006674 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006642:	6839      	ldr	r1, [r7, #0]
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 fc83 	bl	8006f50 <USBD_GetConfig>
          break;
 800664a:	e013      	b.n	8006674 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800664c:	6839      	ldr	r1, [r7, #0]
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 fcb4 	bl	8006fbc <USBD_GetStatus>
          break;
 8006654:	e00e      	b.n	8006674 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006656:	6839      	ldr	r1, [r7, #0]
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 fce3 	bl	8007024 <USBD_SetFeature>
          break;
 800665e:	e009      	b.n	8006674 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006660:	6839      	ldr	r1, [r7, #0]
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 fd07 	bl	8007076 <USBD_ClrFeature>
          break;
 8006668:	e004      	b.n	8006674 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800666a:	6839      	ldr	r1, [r7, #0]
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 fd5e 	bl	800712e <USBD_CtlError>
          break;
 8006672:	bf00      	nop
      }
      break;
 8006674:	e004      	b.n	8006680 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006676:	6839      	ldr	r1, [r7, #0]
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 fd58 	bl	800712e <USBD_CtlError>
      break;
 800667e:	bf00      	nop
  }

  return ret;
 8006680:	7bfb      	ldrb	r3, [r7, #15]
}
 8006682:	4618      	mov	r0, r3
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop

0800668c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006696:	2300      	movs	r3, #0
 8006698:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066a2:	2b40      	cmp	r3, #64	; 0x40
 80066a4:	d005      	beq.n	80066b2 <USBD_StdItfReq+0x26>
 80066a6:	2b40      	cmp	r3, #64	; 0x40
 80066a8:	d852      	bhi.n	8006750 <USBD_StdItfReq+0xc4>
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d001      	beq.n	80066b2 <USBD_StdItfReq+0x26>
 80066ae:	2b20      	cmp	r3, #32
 80066b0:	d14e      	bne.n	8006750 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	3b01      	subs	r3, #1
 80066bc:	2b02      	cmp	r3, #2
 80066be:	d840      	bhi.n	8006742 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	889b      	ldrh	r3, [r3, #4]
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d836      	bhi.n	8006738 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	889b      	ldrh	r3, [r3, #4]
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	4619      	mov	r1, r3
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f7ff fed9 	bl	800648a <USBD_CoreFindIF>
 80066d8:	4603      	mov	r3, r0
 80066da:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80066dc:	7bbb      	ldrb	r3, [r7, #14]
 80066de:	2bff      	cmp	r3, #255	; 0xff
 80066e0:	d01d      	beq.n	800671e <USBD_StdItfReq+0x92>
 80066e2:	7bbb      	ldrb	r3, [r7, #14]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d11a      	bne.n	800671e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80066e8:	7bba      	ldrb	r2, [r7, #14]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	32ae      	adds	r2, #174	; 0xae
 80066ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00f      	beq.n	8006718 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80066f8:	7bba      	ldrb	r2, [r7, #14]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006700:	7bba      	ldrb	r2, [r7, #14]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	32ae      	adds	r2, #174	; 0xae
 8006706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	6839      	ldr	r1, [r7, #0]
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	4798      	blx	r3
 8006712:	4603      	mov	r3, r0
 8006714:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006716:	e004      	b.n	8006722 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006718:	2303      	movs	r3, #3
 800671a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800671c:	e001      	b.n	8006722 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800671e:	2303      	movs	r3, #3
 8006720:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	88db      	ldrh	r3, [r3, #6]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d110      	bne.n	800674c <USBD_StdItfReq+0xc0>
 800672a:	7bfb      	ldrb	r3, [r7, #15]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d10d      	bne.n	800674c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 fdc7 	bl	80072c4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006736:	e009      	b.n	800674c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006738:	6839      	ldr	r1, [r7, #0]
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 fcf7 	bl	800712e <USBD_CtlError>
          break;
 8006740:	e004      	b.n	800674c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006742:	6839      	ldr	r1, [r7, #0]
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 fcf2 	bl	800712e <USBD_CtlError>
          break;
 800674a:	e000      	b.n	800674e <USBD_StdItfReq+0xc2>
          break;
 800674c:	bf00      	nop
      }
      break;
 800674e:	e004      	b.n	800675a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006750:	6839      	ldr	r1, [r7, #0]
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 fceb 	bl	800712e <USBD_CtlError>
      break;
 8006758:	bf00      	nop
  }

  return ret;
 800675a:	7bfb      	ldrb	r3, [r7, #15]
}
 800675c:	4618      	mov	r0, r3
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800676e:	2300      	movs	r3, #0
 8006770:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	889b      	ldrh	r3, [r3, #4]
 8006776:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006780:	2b40      	cmp	r3, #64	; 0x40
 8006782:	d007      	beq.n	8006794 <USBD_StdEPReq+0x30>
 8006784:	2b40      	cmp	r3, #64	; 0x40
 8006786:	f200 817f 	bhi.w	8006a88 <USBD_StdEPReq+0x324>
 800678a:	2b00      	cmp	r3, #0
 800678c:	d02a      	beq.n	80067e4 <USBD_StdEPReq+0x80>
 800678e:	2b20      	cmp	r3, #32
 8006790:	f040 817a 	bne.w	8006a88 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006794:	7bbb      	ldrb	r3, [r7, #14]
 8006796:	4619      	mov	r1, r3
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f7ff fe83 	bl	80064a4 <USBD_CoreFindEP>
 800679e:	4603      	mov	r3, r0
 80067a0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80067a2:	7b7b      	ldrb	r3, [r7, #13]
 80067a4:	2bff      	cmp	r3, #255	; 0xff
 80067a6:	f000 8174 	beq.w	8006a92 <USBD_StdEPReq+0x32e>
 80067aa:	7b7b      	ldrb	r3, [r7, #13]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	f040 8170 	bne.w	8006a92 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80067b2:	7b7a      	ldrb	r2, [r7, #13]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80067ba:	7b7a      	ldrb	r2, [r7, #13]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	32ae      	adds	r2, #174	; 0xae
 80067c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f000 8163 	beq.w	8006a92 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80067cc:	7b7a      	ldrb	r2, [r7, #13]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	32ae      	adds	r2, #174	; 0xae
 80067d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	6839      	ldr	r1, [r7, #0]
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	4798      	blx	r3
 80067de:	4603      	mov	r3, r0
 80067e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80067e2:	e156      	b.n	8006a92 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	785b      	ldrb	r3, [r3, #1]
 80067e8:	2b03      	cmp	r3, #3
 80067ea:	d008      	beq.n	80067fe <USBD_StdEPReq+0x9a>
 80067ec:	2b03      	cmp	r3, #3
 80067ee:	f300 8145 	bgt.w	8006a7c <USBD_StdEPReq+0x318>
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f000 809b 	beq.w	800692e <USBD_StdEPReq+0x1ca>
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d03c      	beq.n	8006876 <USBD_StdEPReq+0x112>
 80067fc:	e13e      	b.n	8006a7c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b02      	cmp	r3, #2
 8006808:	d002      	beq.n	8006810 <USBD_StdEPReq+0xac>
 800680a:	2b03      	cmp	r3, #3
 800680c:	d016      	beq.n	800683c <USBD_StdEPReq+0xd8>
 800680e:	e02c      	b.n	800686a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006810:	7bbb      	ldrb	r3, [r7, #14]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00d      	beq.n	8006832 <USBD_StdEPReq+0xce>
 8006816:	7bbb      	ldrb	r3, [r7, #14]
 8006818:	2b80      	cmp	r3, #128	; 0x80
 800681a:	d00a      	beq.n	8006832 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800681c:	7bbb      	ldrb	r3, [r7, #14]
 800681e:	4619      	mov	r1, r3
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f001 f98b 	bl	8007b3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006826:	2180      	movs	r1, #128	; 0x80
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f001 f987 	bl	8007b3c <USBD_LL_StallEP>
 800682e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006830:	e020      	b.n	8006874 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006832:	6839      	ldr	r1, [r7, #0]
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 fc7a 	bl	800712e <USBD_CtlError>
              break;
 800683a:	e01b      	b.n	8006874 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	885b      	ldrh	r3, [r3, #2]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d10e      	bne.n	8006862 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006844:	7bbb      	ldrb	r3, [r7, #14]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00b      	beq.n	8006862 <USBD_StdEPReq+0xfe>
 800684a:	7bbb      	ldrb	r3, [r7, #14]
 800684c:	2b80      	cmp	r3, #128	; 0x80
 800684e:	d008      	beq.n	8006862 <USBD_StdEPReq+0xfe>
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	88db      	ldrh	r3, [r3, #6]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d104      	bne.n	8006862 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006858:	7bbb      	ldrb	r3, [r7, #14]
 800685a:	4619      	mov	r1, r3
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f001 f96d 	bl	8007b3c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 fd2e 	bl	80072c4 <USBD_CtlSendStatus>

              break;
 8006868:	e004      	b.n	8006874 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800686a:	6839      	ldr	r1, [r7, #0]
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fc5e 	bl	800712e <USBD_CtlError>
              break;
 8006872:	bf00      	nop
          }
          break;
 8006874:	e107      	b.n	8006a86 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b02      	cmp	r3, #2
 8006880:	d002      	beq.n	8006888 <USBD_StdEPReq+0x124>
 8006882:	2b03      	cmp	r3, #3
 8006884:	d016      	beq.n	80068b4 <USBD_StdEPReq+0x150>
 8006886:	e04b      	b.n	8006920 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006888:	7bbb      	ldrb	r3, [r7, #14]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00d      	beq.n	80068aa <USBD_StdEPReq+0x146>
 800688e:	7bbb      	ldrb	r3, [r7, #14]
 8006890:	2b80      	cmp	r3, #128	; 0x80
 8006892:	d00a      	beq.n	80068aa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006894:	7bbb      	ldrb	r3, [r7, #14]
 8006896:	4619      	mov	r1, r3
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f001 f94f 	bl	8007b3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800689e:	2180      	movs	r1, #128	; 0x80
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f001 f94b 	bl	8007b3c <USBD_LL_StallEP>
 80068a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80068a8:	e040      	b.n	800692c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80068aa:	6839      	ldr	r1, [r7, #0]
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 fc3e 	bl	800712e <USBD_CtlError>
              break;
 80068b2:	e03b      	b.n	800692c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	885b      	ldrh	r3, [r3, #2]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d136      	bne.n	800692a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80068bc:	7bbb      	ldrb	r3, [r7, #14]
 80068be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d004      	beq.n	80068d0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80068c6:	7bbb      	ldrb	r3, [r7, #14]
 80068c8:	4619      	mov	r1, r3
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f001 f955 	bl	8007b7a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 fcf7 	bl	80072c4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80068d6:	7bbb      	ldrb	r3, [r7, #14]
 80068d8:	4619      	mov	r1, r3
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7ff fde2 	bl	80064a4 <USBD_CoreFindEP>
 80068e0:	4603      	mov	r3, r0
 80068e2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80068e4:	7b7b      	ldrb	r3, [r7, #13]
 80068e6:	2bff      	cmp	r3, #255	; 0xff
 80068e8:	d01f      	beq.n	800692a <USBD_StdEPReq+0x1c6>
 80068ea:	7b7b      	ldrb	r3, [r7, #13]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d11c      	bne.n	800692a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80068f0:	7b7a      	ldrb	r2, [r7, #13]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80068f8:	7b7a      	ldrb	r2, [r7, #13]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	32ae      	adds	r2, #174	; 0xae
 80068fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d010      	beq.n	800692a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006908:	7b7a      	ldrb	r2, [r7, #13]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	32ae      	adds	r2, #174	; 0xae
 800690e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	6839      	ldr	r1, [r7, #0]
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	4798      	blx	r3
 800691a:	4603      	mov	r3, r0
 800691c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800691e:	e004      	b.n	800692a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006920:	6839      	ldr	r1, [r7, #0]
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 fc03 	bl	800712e <USBD_CtlError>
              break;
 8006928:	e000      	b.n	800692c <USBD_StdEPReq+0x1c8>
              break;
 800692a:	bf00      	nop
          }
          break;
 800692c:	e0ab      	b.n	8006a86 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006934:	b2db      	uxtb	r3, r3
 8006936:	2b02      	cmp	r3, #2
 8006938:	d002      	beq.n	8006940 <USBD_StdEPReq+0x1dc>
 800693a:	2b03      	cmp	r3, #3
 800693c:	d032      	beq.n	80069a4 <USBD_StdEPReq+0x240>
 800693e:	e097      	b.n	8006a70 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006940:	7bbb      	ldrb	r3, [r7, #14]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d007      	beq.n	8006956 <USBD_StdEPReq+0x1f2>
 8006946:	7bbb      	ldrb	r3, [r7, #14]
 8006948:	2b80      	cmp	r3, #128	; 0x80
 800694a:	d004      	beq.n	8006956 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800694c:	6839      	ldr	r1, [r7, #0]
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 fbed 	bl	800712e <USBD_CtlError>
                break;
 8006954:	e091      	b.n	8006a7a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006956:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800695a:	2b00      	cmp	r3, #0
 800695c:	da0b      	bge.n	8006976 <USBD_StdEPReq+0x212>
 800695e:	7bbb      	ldrb	r3, [r7, #14]
 8006960:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006964:	4613      	mov	r3, r2
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4413      	add	r3, r2
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	3310      	adds	r3, #16
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	4413      	add	r3, r2
 8006972:	3304      	adds	r3, #4
 8006974:	e00b      	b.n	800698e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006976:	7bbb      	ldrb	r3, [r7, #14]
 8006978:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800697c:	4613      	mov	r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	4413      	add	r3, r2
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	4413      	add	r3, r2
 800698c:	3304      	adds	r3, #4
 800698e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	2200      	movs	r2, #0
 8006994:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	2202      	movs	r2, #2
 800699a:	4619      	mov	r1, r3
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 fc37 	bl	8007210 <USBD_CtlSendData>
              break;
 80069a2:	e06a      	b.n	8006a7a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80069a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	da11      	bge.n	80069d0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80069ac:	7bbb      	ldrb	r3, [r7, #14]
 80069ae:	f003 020f 	and.w	r2, r3, #15
 80069b2:	6879      	ldr	r1, [r7, #4]
 80069b4:	4613      	mov	r3, r2
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	4413      	add	r3, r2
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	440b      	add	r3, r1
 80069be:	3324      	adds	r3, #36	; 0x24
 80069c0:	881b      	ldrh	r3, [r3, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d117      	bne.n	80069f6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80069c6:	6839      	ldr	r1, [r7, #0]
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 fbb0 	bl	800712e <USBD_CtlError>
                  break;
 80069ce:	e054      	b.n	8006a7a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80069d0:	7bbb      	ldrb	r3, [r7, #14]
 80069d2:	f003 020f 	and.w	r2, r3, #15
 80069d6:	6879      	ldr	r1, [r7, #4]
 80069d8:	4613      	mov	r3, r2
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4413      	add	r3, r2
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	440b      	add	r3, r1
 80069e2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80069e6:	881b      	ldrh	r3, [r3, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d104      	bne.n	80069f6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80069ec:	6839      	ldr	r1, [r7, #0]
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fb9d 	bl	800712e <USBD_CtlError>
                  break;
 80069f4:	e041      	b.n	8006a7a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	da0b      	bge.n	8006a16 <USBD_StdEPReq+0x2b2>
 80069fe:	7bbb      	ldrb	r3, [r7, #14]
 8006a00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a04:	4613      	mov	r3, r2
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	4413      	add	r3, r2
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	3310      	adds	r3, #16
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	4413      	add	r3, r2
 8006a12:	3304      	adds	r3, #4
 8006a14:	e00b      	b.n	8006a2e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a16:	7bbb      	ldrb	r3, [r7, #14]
 8006a18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	4413      	add	r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	3304      	adds	r3, #4
 8006a2e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006a30:	7bbb      	ldrb	r3, [r7, #14]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d002      	beq.n	8006a3c <USBD_StdEPReq+0x2d8>
 8006a36:	7bbb      	ldrb	r3, [r7, #14]
 8006a38:	2b80      	cmp	r3, #128	; 0x80
 8006a3a:	d103      	bne.n	8006a44 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	601a      	str	r2, [r3, #0]
 8006a42:	e00e      	b.n	8006a62 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006a44:	7bbb      	ldrb	r3, [r7, #14]
 8006a46:	4619      	mov	r1, r3
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f001 f8b5 	bl	8007bb8 <USBD_LL_IsStallEP>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d003      	beq.n	8006a5c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	2201      	movs	r2, #1
 8006a58:	601a      	str	r2, [r3, #0]
 8006a5a:	e002      	b.n	8006a62 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	2202      	movs	r2, #2
 8006a66:	4619      	mov	r1, r3
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 fbd1 	bl	8007210 <USBD_CtlSendData>
              break;
 8006a6e:	e004      	b.n	8006a7a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006a70:	6839      	ldr	r1, [r7, #0]
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 fb5b 	bl	800712e <USBD_CtlError>
              break;
 8006a78:	bf00      	nop
          }
          break;
 8006a7a:	e004      	b.n	8006a86 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006a7c:	6839      	ldr	r1, [r7, #0]
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fb55 	bl	800712e <USBD_CtlError>
          break;
 8006a84:	bf00      	nop
      }
      break;
 8006a86:	e005      	b.n	8006a94 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 fb4f 	bl	800712e <USBD_CtlError>
      break;
 8006a90:	e000      	b.n	8006a94 <USBD_StdEPReq+0x330>
      break;
 8006a92:	bf00      	nop
  }

  return ret;
 8006a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
	...

08006aa0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	885b      	ldrh	r3, [r3, #2]
 8006aba:	0a1b      	lsrs	r3, r3, #8
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	2b06      	cmp	r3, #6
 8006ac2:	f200 8128 	bhi.w	8006d16 <USBD_GetDescriptor+0x276>
 8006ac6:	a201      	add	r2, pc, #4	; (adr r2, 8006acc <USBD_GetDescriptor+0x2c>)
 8006ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006acc:	08006ae9 	.word	0x08006ae9
 8006ad0:	08006b01 	.word	0x08006b01
 8006ad4:	08006b41 	.word	0x08006b41
 8006ad8:	08006d17 	.word	0x08006d17
 8006adc:	08006d17 	.word	0x08006d17
 8006ae0:	08006cb7 	.word	0x08006cb7
 8006ae4:	08006ce3 	.word	0x08006ce3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	7c12      	ldrb	r2, [r2, #16]
 8006af4:	f107 0108 	add.w	r1, r7, #8
 8006af8:	4610      	mov	r0, r2
 8006afa:	4798      	blx	r3
 8006afc:	60f8      	str	r0, [r7, #12]
      break;
 8006afe:	e112      	b.n	8006d26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	7c1b      	ldrb	r3, [r3, #16]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d10d      	bne.n	8006b24 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b10:	f107 0208 	add.w	r2, r7, #8
 8006b14:	4610      	mov	r0, r2
 8006b16:	4798      	blx	r3
 8006b18:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	2202      	movs	r2, #2
 8006b20:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006b22:	e100      	b.n	8006d26 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2c:	f107 0208 	add.w	r2, r7, #8
 8006b30:	4610      	mov	r0, r2
 8006b32:	4798      	blx	r3
 8006b34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	2202      	movs	r2, #2
 8006b3c:	701a      	strb	r2, [r3, #0]
      break;
 8006b3e:	e0f2      	b.n	8006d26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	885b      	ldrh	r3, [r3, #2]
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	2b05      	cmp	r3, #5
 8006b48:	f200 80ac 	bhi.w	8006ca4 <USBD_GetDescriptor+0x204>
 8006b4c:	a201      	add	r2, pc, #4	; (adr r2, 8006b54 <USBD_GetDescriptor+0xb4>)
 8006b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b52:	bf00      	nop
 8006b54:	08006b6d 	.word	0x08006b6d
 8006b58:	08006ba1 	.word	0x08006ba1
 8006b5c:	08006bd5 	.word	0x08006bd5
 8006b60:	08006c09 	.word	0x08006c09
 8006b64:	08006c3d 	.word	0x08006c3d
 8006b68:	08006c71 	.word	0x08006c71
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d00b      	beq.n	8006b90 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	7c12      	ldrb	r2, [r2, #16]
 8006b84:	f107 0108 	add.w	r1, r7, #8
 8006b88:	4610      	mov	r0, r2
 8006b8a:	4798      	blx	r3
 8006b8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b8e:	e091      	b.n	8006cb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b90:	6839      	ldr	r1, [r7, #0]
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 facb 	bl	800712e <USBD_CtlError>
            err++;
 8006b98:	7afb      	ldrb	r3, [r7, #11]
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	72fb      	strb	r3, [r7, #11]
          break;
 8006b9e:	e089      	b.n	8006cb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00b      	beq.n	8006bc4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	7c12      	ldrb	r2, [r2, #16]
 8006bb8:	f107 0108 	add.w	r1, r7, #8
 8006bbc:	4610      	mov	r0, r2
 8006bbe:	4798      	blx	r3
 8006bc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bc2:	e077      	b.n	8006cb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bc4:	6839      	ldr	r1, [r7, #0]
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 fab1 	bl	800712e <USBD_CtlError>
            err++;
 8006bcc:	7afb      	ldrb	r3, [r7, #11]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	72fb      	strb	r3, [r7, #11]
          break;
 8006bd2:	e06f      	b.n	8006cb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00b      	beq.n	8006bf8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	7c12      	ldrb	r2, [r2, #16]
 8006bec:	f107 0108 	add.w	r1, r7, #8
 8006bf0:	4610      	mov	r0, r2
 8006bf2:	4798      	blx	r3
 8006bf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bf6:	e05d      	b.n	8006cb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bf8:	6839      	ldr	r1, [r7, #0]
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 fa97 	bl	800712e <USBD_CtlError>
            err++;
 8006c00:	7afb      	ldrb	r3, [r7, #11]
 8006c02:	3301      	adds	r3, #1
 8006c04:	72fb      	strb	r3, [r7, #11]
          break;
 8006c06:	e055      	b.n	8006cb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d00b      	beq.n	8006c2c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	7c12      	ldrb	r2, [r2, #16]
 8006c20:	f107 0108 	add.w	r1, r7, #8
 8006c24:	4610      	mov	r0, r2
 8006c26:	4798      	blx	r3
 8006c28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c2a:	e043      	b.n	8006cb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c2c:	6839      	ldr	r1, [r7, #0]
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 fa7d 	bl	800712e <USBD_CtlError>
            err++;
 8006c34:	7afb      	ldrb	r3, [r7, #11]
 8006c36:	3301      	adds	r3, #1
 8006c38:	72fb      	strb	r3, [r7, #11]
          break;
 8006c3a:	e03b      	b.n	8006cb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c42:	695b      	ldr	r3, [r3, #20]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00b      	beq.n	8006c60 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c4e:	695b      	ldr	r3, [r3, #20]
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	7c12      	ldrb	r2, [r2, #16]
 8006c54:	f107 0108 	add.w	r1, r7, #8
 8006c58:	4610      	mov	r0, r2
 8006c5a:	4798      	blx	r3
 8006c5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c5e:	e029      	b.n	8006cb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c60:	6839      	ldr	r1, [r7, #0]
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 fa63 	bl	800712e <USBD_CtlError>
            err++;
 8006c68:	7afb      	ldrb	r3, [r7, #11]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	72fb      	strb	r3, [r7, #11]
          break;
 8006c6e:	e021      	b.n	8006cb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00b      	beq.n	8006c94 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c82:	699b      	ldr	r3, [r3, #24]
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	7c12      	ldrb	r2, [r2, #16]
 8006c88:	f107 0108 	add.w	r1, r7, #8
 8006c8c:	4610      	mov	r0, r2
 8006c8e:	4798      	blx	r3
 8006c90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c92:	e00f      	b.n	8006cb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c94:	6839      	ldr	r1, [r7, #0]
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fa49 	bl	800712e <USBD_CtlError>
            err++;
 8006c9c:	7afb      	ldrb	r3, [r7, #11]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	72fb      	strb	r3, [r7, #11]
          break;
 8006ca2:	e007      	b.n	8006cb4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006ca4:	6839      	ldr	r1, [r7, #0]
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 fa41 	bl	800712e <USBD_CtlError>
          err++;
 8006cac:	7afb      	ldrb	r3, [r7, #11]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006cb2:	bf00      	nop
      }
      break;
 8006cb4:	e037      	b.n	8006d26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	7c1b      	ldrb	r3, [r3, #16]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d109      	bne.n	8006cd2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cc6:	f107 0208 	add.w	r2, r7, #8
 8006cca:	4610      	mov	r0, r2
 8006ccc:	4798      	blx	r3
 8006cce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006cd0:	e029      	b.n	8006d26 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006cd2:	6839      	ldr	r1, [r7, #0]
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 fa2a 	bl	800712e <USBD_CtlError>
        err++;
 8006cda:	7afb      	ldrb	r3, [r7, #11]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	72fb      	strb	r3, [r7, #11]
      break;
 8006ce0:	e021      	b.n	8006d26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	7c1b      	ldrb	r3, [r3, #16]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10d      	bne.n	8006d06 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf2:	f107 0208 	add.w	r2, r7, #8
 8006cf6:	4610      	mov	r0, r2
 8006cf8:	4798      	blx	r3
 8006cfa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	2207      	movs	r2, #7
 8006d02:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d04:	e00f      	b.n	8006d26 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006d06:	6839      	ldr	r1, [r7, #0]
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 fa10 	bl	800712e <USBD_CtlError>
        err++;
 8006d0e:	7afb      	ldrb	r3, [r7, #11]
 8006d10:	3301      	adds	r3, #1
 8006d12:	72fb      	strb	r3, [r7, #11]
      break;
 8006d14:	e007      	b.n	8006d26 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006d16:	6839      	ldr	r1, [r7, #0]
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 fa08 	bl	800712e <USBD_CtlError>
      err++;
 8006d1e:	7afb      	ldrb	r3, [r7, #11]
 8006d20:	3301      	adds	r3, #1
 8006d22:	72fb      	strb	r3, [r7, #11]
      break;
 8006d24:	bf00      	nop
  }

  if (err != 0U)
 8006d26:	7afb      	ldrb	r3, [r7, #11]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d11e      	bne.n	8006d6a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	88db      	ldrh	r3, [r3, #6]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d016      	beq.n	8006d62 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006d34:	893b      	ldrh	r3, [r7, #8]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00e      	beq.n	8006d58 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	88da      	ldrh	r2, [r3, #6]
 8006d3e:	893b      	ldrh	r3, [r7, #8]
 8006d40:	4293      	cmp	r3, r2
 8006d42:	bf28      	it	cs
 8006d44:	4613      	movcs	r3, r2
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006d4a:	893b      	ldrh	r3, [r7, #8]
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	68f9      	ldr	r1, [r7, #12]
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 fa5d 	bl	8007210 <USBD_CtlSendData>
 8006d56:	e009      	b.n	8006d6c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006d58:	6839      	ldr	r1, [r7, #0]
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f9e7 	bl	800712e <USBD_CtlError>
 8006d60:	e004      	b.n	8006d6c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 faae 	bl	80072c4 <USBD_CtlSendStatus>
 8006d68:	e000      	b.n	8006d6c <USBD_GetDescriptor+0x2cc>
    return;
 8006d6a:	bf00      	nop
  }
}
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop

08006d74 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	889b      	ldrh	r3, [r3, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d131      	bne.n	8006dea <USBD_SetAddress+0x76>
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	88db      	ldrh	r3, [r3, #6]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d12d      	bne.n	8006dea <USBD_SetAddress+0x76>
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	885b      	ldrh	r3, [r3, #2]
 8006d92:	2b7f      	cmp	r3, #127	; 0x7f
 8006d94:	d829      	bhi.n	8006dea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	885b      	ldrh	r3, [r3, #2]
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006da0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b03      	cmp	r3, #3
 8006dac:	d104      	bne.n	8006db8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006dae:	6839      	ldr	r1, [r7, #0]
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 f9bc 	bl	800712e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006db6:	e01d      	b.n	8006df4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	7bfa      	ldrb	r2, [r7, #15]
 8006dbc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006dc0:	7bfb      	ldrb	r3, [r7, #15]
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 ff23 	bl	8007c10 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 fa7a 	bl	80072c4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006dd0:	7bfb      	ldrb	r3, [r7, #15]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d004      	beq.n	8006de0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2202      	movs	r2, #2
 8006dda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dde:	e009      	b.n	8006df4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006de8:	e004      	b.n	8006df4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006dea:	6839      	ldr	r1, [r7, #0]
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 f99e 	bl	800712e <USBD_CtlError>
  }
}
 8006df2:	bf00      	nop
 8006df4:	bf00      	nop
 8006df6:	3710      	adds	r7, #16
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e06:	2300      	movs	r3, #0
 8006e08:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	885b      	ldrh	r3, [r3, #2]
 8006e0e:	b2da      	uxtb	r2, r3
 8006e10:	4b4e      	ldr	r3, [pc, #312]	; (8006f4c <USBD_SetConfig+0x150>)
 8006e12:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006e14:	4b4d      	ldr	r3, [pc, #308]	; (8006f4c <USBD_SetConfig+0x150>)
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d905      	bls.n	8006e28 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006e1c:	6839      	ldr	r1, [r7, #0]
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f985 	bl	800712e <USBD_CtlError>
    return USBD_FAIL;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e08c      	b.n	8006f42 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d002      	beq.n	8006e3a <USBD_SetConfig+0x3e>
 8006e34:	2b03      	cmp	r3, #3
 8006e36:	d029      	beq.n	8006e8c <USBD_SetConfig+0x90>
 8006e38:	e075      	b.n	8006f26 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006e3a:	4b44      	ldr	r3, [pc, #272]	; (8006f4c <USBD_SetConfig+0x150>)
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d020      	beq.n	8006e84 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006e42:	4b42      	ldr	r3, [pc, #264]	; (8006f4c <USBD_SetConfig+0x150>)
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	461a      	mov	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006e4c:	4b3f      	ldr	r3, [pc, #252]	; (8006f4c <USBD_SetConfig+0x150>)
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	4619      	mov	r1, r3
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f7fe ffe7 	bl	8005e26 <USBD_SetClassConfig>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006e5c:	7bfb      	ldrb	r3, [r7, #15]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d008      	beq.n	8006e74 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006e62:	6839      	ldr	r1, [r7, #0]
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 f962 	bl	800712e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2202      	movs	r2, #2
 8006e6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006e72:	e065      	b.n	8006f40 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 fa25 	bl	80072c4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2203      	movs	r2, #3
 8006e7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006e82:	e05d      	b.n	8006f40 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 fa1d 	bl	80072c4 <USBD_CtlSendStatus>
      break;
 8006e8a:	e059      	b.n	8006f40 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006e8c:	4b2f      	ldr	r3, [pc, #188]	; (8006f4c <USBD_SetConfig+0x150>)
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d112      	bne.n	8006eba <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2202      	movs	r2, #2
 8006e98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006e9c:	4b2b      	ldr	r3, [pc, #172]	; (8006f4c <USBD_SetConfig+0x150>)
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006ea6:	4b29      	ldr	r3, [pc, #164]	; (8006f4c <USBD_SetConfig+0x150>)
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	4619      	mov	r1, r3
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f7fe ffd6 	bl	8005e5e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 fa06 	bl	80072c4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006eb8:	e042      	b.n	8006f40 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006eba:	4b24      	ldr	r3, [pc, #144]	; (8006f4c <USBD_SetConfig+0x150>)
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d02a      	beq.n	8006f1e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	4619      	mov	r1, r3
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f7fe ffc4 	bl	8005e5e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006ed6:	4b1d      	ldr	r3, [pc, #116]	; (8006f4c <USBD_SetConfig+0x150>)
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	461a      	mov	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006ee0:	4b1a      	ldr	r3, [pc, #104]	; (8006f4c <USBD_SetConfig+0x150>)
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f7fe ff9d 	bl	8005e26 <USBD_SetClassConfig>
 8006eec:	4603      	mov	r3, r0
 8006eee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006ef0:	7bfb      	ldrb	r3, [r7, #15]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00f      	beq.n	8006f16 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006ef6:	6839      	ldr	r1, [r7, #0]
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 f918 	bl	800712e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	4619      	mov	r1, r3
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f7fe ffa9 	bl	8005e5e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2202      	movs	r2, #2
 8006f10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006f14:	e014      	b.n	8006f40 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 f9d4 	bl	80072c4 <USBD_CtlSendStatus>
      break;
 8006f1c:	e010      	b.n	8006f40 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 f9d0 	bl	80072c4 <USBD_CtlSendStatus>
      break;
 8006f24:	e00c      	b.n	8006f40 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006f26:	6839      	ldr	r1, [r7, #0]
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 f900 	bl	800712e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f2e:	4b07      	ldr	r3, [pc, #28]	; (8006f4c <USBD_SetConfig+0x150>)
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	4619      	mov	r1, r3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f7fe ff92 	bl	8005e5e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	73fb      	strb	r3, [r7, #15]
      break;
 8006f3e:	bf00      	nop
  }

  return ret;
 8006f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3710      	adds	r7, #16
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	200001ac 	.word	0x200001ac

08006f50 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	88db      	ldrh	r3, [r3, #6]
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d004      	beq.n	8006f6c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006f62:	6839      	ldr	r1, [r7, #0]
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f8e2 	bl	800712e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006f6a:	e023      	b.n	8006fb4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	dc02      	bgt.n	8006f7e <USBD_GetConfig+0x2e>
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	dc03      	bgt.n	8006f84 <USBD_GetConfig+0x34>
 8006f7c:	e015      	b.n	8006faa <USBD_GetConfig+0x5a>
 8006f7e:	2b03      	cmp	r3, #3
 8006f80:	d00b      	beq.n	8006f9a <USBD_GetConfig+0x4a>
 8006f82:	e012      	b.n	8006faa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	3308      	adds	r3, #8
 8006f8e:	2201      	movs	r2, #1
 8006f90:	4619      	mov	r1, r3
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f93c 	bl	8007210 <USBD_CtlSendData>
        break;
 8006f98:	e00c      	b.n	8006fb4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	3304      	adds	r3, #4
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 f934 	bl	8007210 <USBD_CtlSendData>
        break;
 8006fa8:	e004      	b.n	8006fb4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006faa:	6839      	ldr	r1, [r7, #0]
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 f8be 	bl	800712e <USBD_CtlError>
        break;
 8006fb2:	bf00      	nop
}
 8006fb4:	bf00      	nop
 8006fb6:	3708      	adds	r7, #8
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d81e      	bhi.n	8007012 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	88db      	ldrh	r3, [r3, #6]
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d004      	beq.n	8006fe6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006fdc:	6839      	ldr	r1, [r7, #0]
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 f8a5 	bl	800712e <USBD_CtlError>
        break;
 8006fe4:	e01a      	b.n	800701c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d005      	beq.n	8007002 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	f043 0202 	orr.w	r2, r3, #2
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	330c      	adds	r3, #12
 8007006:	2202      	movs	r2, #2
 8007008:	4619      	mov	r1, r3
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 f900 	bl	8007210 <USBD_CtlSendData>
      break;
 8007010:	e004      	b.n	800701c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007012:	6839      	ldr	r1, [r7, #0]
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 f88a 	bl	800712e <USBD_CtlError>
      break;
 800701a:	bf00      	nop
  }
}
 800701c:	bf00      	nop
 800701e:	3708      	adds	r7, #8
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	885b      	ldrh	r3, [r3, #2]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d107      	bne.n	8007046 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2201      	movs	r2, #1
 800703a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 f940 	bl	80072c4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007044:	e013      	b.n	800706e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	885b      	ldrh	r3, [r3, #2]
 800704a:	2b02      	cmp	r3, #2
 800704c:	d10b      	bne.n	8007066 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	889b      	ldrh	r3, [r3, #4]
 8007052:	0a1b      	lsrs	r3, r3, #8
 8007054:	b29b      	uxth	r3, r3
 8007056:	b2da      	uxtb	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 f930 	bl	80072c4 <USBD_CtlSendStatus>
}
 8007064:	e003      	b.n	800706e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007066:	6839      	ldr	r1, [r7, #0]
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 f860 	bl	800712e <USBD_CtlError>
}
 800706e:	bf00      	nop
 8007070:	3708      	adds	r7, #8
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}

08007076 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007076:	b580      	push	{r7, lr}
 8007078:	b082      	sub	sp, #8
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
 800707e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007086:	b2db      	uxtb	r3, r3
 8007088:	3b01      	subs	r3, #1
 800708a:	2b02      	cmp	r3, #2
 800708c:	d80b      	bhi.n	80070a6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	885b      	ldrh	r3, [r3, #2]
 8007092:	2b01      	cmp	r3, #1
 8007094:	d10c      	bne.n	80070b0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 f910 	bl	80072c4 <USBD_CtlSendStatus>
      }
      break;
 80070a4:	e004      	b.n	80070b0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80070a6:	6839      	ldr	r1, [r7, #0]
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 f840 	bl	800712e <USBD_CtlError>
      break;
 80070ae:	e000      	b.n	80070b2 <USBD_ClrFeature+0x3c>
      break;
 80070b0:	bf00      	nop
  }
}
 80070b2:	bf00      	nop
 80070b4:	3708      	adds	r7, #8
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b084      	sub	sp, #16
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
 80070c2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	781a      	ldrb	r2, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	3301      	adds	r3, #1
 80070d4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	781a      	ldrb	r2, [r3, #0]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	3301      	adds	r3, #1
 80070e2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f7ff fa41 	bl	800656c <SWAPBYTE>
 80070ea:	4603      	mov	r3, r0
 80070ec:	461a      	mov	r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	3301      	adds	r3, #1
 80070f6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	3301      	adds	r3, #1
 80070fc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f7ff fa34 	bl	800656c <SWAPBYTE>
 8007104:	4603      	mov	r3, r0
 8007106:	461a      	mov	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	3301      	adds	r3, #1
 8007110:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	3301      	adds	r3, #1
 8007116:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	f7ff fa27 	bl	800656c <SWAPBYTE>
 800711e:	4603      	mov	r3, r0
 8007120:	461a      	mov	r2, r3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	80da      	strh	r2, [r3, #6]
}
 8007126:	bf00      	nop
 8007128:	3710      	adds	r7, #16
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b082      	sub	sp, #8
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
 8007136:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007138:	2180      	movs	r1, #128	; 0x80
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fcfe 	bl	8007b3c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007140:	2100      	movs	r1, #0
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 fcfa 	bl	8007b3c <USBD_LL_StallEP>
}
 8007148:	bf00      	nop
 800714a:	3708      	adds	r7, #8
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800715c:	2300      	movs	r3, #0
 800715e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d036      	beq.n	80071d4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800716a:	6938      	ldr	r0, [r7, #16]
 800716c:	f000 f836 	bl	80071dc <USBD_GetLen>
 8007170:	4603      	mov	r3, r0
 8007172:	3301      	adds	r3, #1
 8007174:	b29b      	uxth	r3, r3
 8007176:	005b      	lsls	r3, r3, #1
 8007178:	b29a      	uxth	r2, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800717e:	7dfb      	ldrb	r3, [r7, #23]
 8007180:	68ba      	ldr	r2, [r7, #8]
 8007182:	4413      	add	r3, r2
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	7812      	ldrb	r2, [r2, #0]
 8007188:	701a      	strb	r2, [r3, #0]
  idx++;
 800718a:	7dfb      	ldrb	r3, [r7, #23]
 800718c:	3301      	adds	r3, #1
 800718e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007190:	7dfb      	ldrb	r3, [r7, #23]
 8007192:	68ba      	ldr	r2, [r7, #8]
 8007194:	4413      	add	r3, r2
 8007196:	2203      	movs	r2, #3
 8007198:	701a      	strb	r2, [r3, #0]
  idx++;
 800719a:	7dfb      	ldrb	r3, [r7, #23]
 800719c:	3301      	adds	r3, #1
 800719e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80071a0:	e013      	b.n	80071ca <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80071a2:	7dfb      	ldrb	r3, [r7, #23]
 80071a4:	68ba      	ldr	r2, [r7, #8]
 80071a6:	4413      	add	r3, r2
 80071a8:	693a      	ldr	r2, [r7, #16]
 80071aa:	7812      	ldrb	r2, [r2, #0]
 80071ac:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	3301      	adds	r3, #1
 80071b2:	613b      	str	r3, [r7, #16]
    idx++;
 80071b4:	7dfb      	ldrb	r3, [r7, #23]
 80071b6:	3301      	adds	r3, #1
 80071b8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80071ba:	7dfb      	ldrb	r3, [r7, #23]
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	4413      	add	r3, r2
 80071c0:	2200      	movs	r2, #0
 80071c2:	701a      	strb	r2, [r3, #0]
    idx++;
 80071c4:	7dfb      	ldrb	r3, [r7, #23]
 80071c6:	3301      	adds	r3, #1
 80071c8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1e7      	bne.n	80071a2 <USBD_GetString+0x52>
 80071d2:	e000      	b.n	80071d6 <USBD_GetString+0x86>
    return;
 80071d4:	bf00      	nop
  }
}
 80071d6:	3718      	adds	r7, #24
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80071e4:	2300      	movs	r3, #0
 80071e6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80071ec:	e005      	b.n	80071fa <USBD_GetLen+0x1e>
  {
    len++;
 80071ee:	7bfb      	ldrb	r3, [r7, #15]
 80071f0:	3301      	adds	r3, #1
 80071f2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	3301      	adds	r3, #1
 80071f8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1f5      	bne.n	80071ee <USBD_GetLen+0x12>
  }

  return len;
 8007202:	7bfb      	ldrb	r3, [r7, #15]
}
 8007204:	4618      	mov	r0, r3
 8007206:	3714      	adds	r7, #20
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2202      	movs	r2, #2
 8007220:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	68ba      	ldr	r2, [r7, #8]
 8007234:	2100      	movs	r1, #0
 8007236:	68f8      	ldr	r0, [r7, #12]
 8007238:	f000 fd09 	bl	8007c4e <USBD_LL_Transmit>

  return USBD_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b084      	sub	sp, #16
 800724a:	af00      	add	r7, sp, #0
 800724c:	60f8      	str	r0, [r7, #12]
 800724e:	60b9      	str	r1, [r7, #8]
 8007250:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	68ba      	ldr	r2, [r7, #8]
 8007256:	2100      	movs	r1, #0
 8007258:	68f8      	ldr	r0, [r7, #12]
 800725a:	f000 fcf8 	bl	8007c4e <USBD_LL_Transmit>

  return USBD_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	3710      	adds	r7, #16
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2203      	movs	r2, #3
 8007278:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	68ba      	ldr	r2, [r7, #8]
 8007290:	2100      	movs	r1, #0
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f000 fcfc 	bl	8007c90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3710      	adds	r7, #16
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b084      	sub	sp, #16
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	60f8      	str	r0, [r7, #12]
 80072aa:	60b9      	str	r1, [r7, #8]
 80072ac:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	68ba      	ldr	r2, [r7, #8]
 80072b2:	2100      	movs	r1, #0
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f000 fceb 	bl	8007c90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3710      	adds	r7, #16
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2204      	movs	r2, #4
 80072d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80072d4:	2300      	movs	r3, #0
 80072d6:	2200      	movs	r2, #0
 80072d8:	2100      	movs	r1, #0
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fcb7 	bl	8007c4e <USBD_LL_Transmit>

  return USBD_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3708      	adds	r7, #8
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b082      	sub	sp, #8
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2205      	movs	r2, #5
 80072f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072fa:	2300      	movs	r3, #0
 80072fc:	2200      	movs	r2, #0
 80072fe:	2100      	movs	r1, #0
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fcc5 	bl	8007c90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3708      	adds	r7, #8
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007314:	2200      	movs	r2, #0
 8007316:	4912      	ldr	r1, [pc, #72]	; (8007360 <MX_USB_DEVICE_Init+0x50>)
 8007318:	4812      	ldr	r0, [pc, #72]	; (8007364 <MX_USB_DEVICE_Init+0x54>)
 800731a:	f7fe fd07 	bl	8005d2c <USBD_Init>
 800731e:	4603      	mov	r3, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d001      	beq.n	8007328 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007324:	f7f9 fb1a 	bl	800095c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007328:	490f      	ldr	r1, [pc, #60]	; (8007368 <MX_USB_DEVICE_Init+0x58>)
 800732a:	480e      	ldr	r0, [pc, #56]	; (8007364 <MX_USB_DEVICE_Init+0x54>)
 800732c:	f7fe fd2e 	bl	8005d8c <USBD_RegisterClass>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d001      	beq.n	800733a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007336:	f7f9 fb11 	bl	800095c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800733a:	490c      	ldr	r1, [pc, #48]	; (800736c <MX_USB_DEVICE_Init+0x5c>)
 800733c:	4809      	ldr	r0, [pc, #36]	; (8007364 <MX_USB_DEVICE_Init+0x54>)
 800733e:	f7fe fc1f 	bl	8005b80 <USBD_CDC_RegisterInterface>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d001      	beq.n	800734c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007348:	f7f9 fb08 	bl	800095c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800734c:	4805      	ldr	r0, [pc, #20]	; (8007364 <MX_USB_DEVICE_Init+0x54>)
 800734e:	f7fe fd53 	bl	8005df8 <USBD_Start>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d001      	beq.n	800735c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007358:	f7f9 fb00 	bl	800095c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800735c:	bf00      	nop
 800735e:	bd80      	pop	{r7, pc}
 8007360:	200000d0 	.word	0x200000d0
 8007364:	200001b0 	.word	0x200001b0
 8007368:	2000003c 	.word	0x2000003c
 800736c:	200000bc 	.word	0x200000bc

08007370 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007374:	2200      	movs	r2, #0
 8007376:	4905      	ldr	r1, [pc, #20]	; (800738c <CDC_Init_FS+0x1c>)
 8007378:	4805      	ldr	r0, [pc, #20]	; (8007390 <CDC_Init_FS+0x20>)
 800737a:	f7fe fc1b 	bl	8005bb4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800737e:	4905      	ldr	r1, [pc, #20]	; (8007394 <CDC_Init_FS+0x24>)
 8007380:	4803      	ldr	r0, [pc, #12]	; (8007390 <CDC_Init_FS+0x20>)
 8007382:	f7fe fc39 	bl	8005bf8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007386:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007388:	4618      	mov	r0, r3
 800738a:	bd80      	pop	{r7, pc}
 800738c:	20000c8c 	.word	0x20000c8c
 8007390:	200001b0 	.word	0x200001b0
 8007394:	2000048c 	.word	0x2000048c

08007398 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007398:	b480      	push	{r7}
 800739a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800739c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800739e:	4618      	mov	r0, r3
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	4603      	mov	r3, r0
 80073b0:	6039      	str	r1, [r7, #0]
 80073b2:	71fb      	strb	r3, [r7, #7]
 80073b4:	4613      	mov	r3, r2
 80073b6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80073b8:	79fb      	ldrb	r3, [r7, #7]
 80073ba:	2b23      	cmp	r3, #35	; 0x23
 80073bc:	d84a      	bhi.n	8007454 <CDC_Control_FS+0xac>
 80073be:	a201      	add	r2, pc, #4	; (adr r2, 80073c4 <CDC_Control_FS+0x1c>)
 80073c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c4:	08007455 	.word	0x08007455
 80073c8:	08007455 	.word	0x08007455
 80073cc:	08007455 	.word	0x08007455
 80073d0:	08007455 	.word	0x08007455
 80073d4:	08007455 	.word	0x08007455
 80073d8:	08007455 	.word	0x08007455
 80073dc:	08007455 	.word	0x08007455
 80073e0:	08007455 	.word	0x08007455
 80073e4:	08007455 	.word	0x08007455
 80073e8:	08007455 	.word	0x08007455
 80073ec:	08007455 	.word	0x08007455
 80073f0:	08007455 	.word	0x08007455
 80073f4:	08007455 	.word	0x08007455
 80073f8:	08007455 	.word	0x08007455
 80073fc:	08007455 	.word	0x08007455
 8007400:	08007455 	.word	0x08007455
 8007404:	08007455 	.word	0x08007455
 8007408:	08007455 	.word	0x08007455
 800740c:	08007455 	.word	0x08007455
 8007410:	08007455 	.word	0x08007455
 8007414:	08007455 	.word	0x08007455
 8007418:	08007455 	.word	0x08007455
 800741c:	08007455 	.word	0x08007455
 8007420:	08007455 	.word	0x08007455
 8007424:	08007455 	.word	0x08007455
 8007428:	08007455 	.word	0x08007455
 800742c:	08007455 	.word	0x08007455
 8007430:	08007455 	.word	0x08007455
 8007434:	08007455 	.word	0x08007455
 8007438:	08007455 	.word	0x08007455
 800743c:	08007455 	.word	0x08007455
 8007440:	08007455 	.word	0x08007455
 8007444:	08007455 	.word	0x08007455
 8007448:	08007455 	.word	0x08007455
 800744c:	08007455 	.word	0x08007455
 8007450:	08007455 	.word	0x08007455
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007454:	bf00      	nop
  }

  return (USBD_OK);
 8007456:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007458:	4618      	mov	r0, r3
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800746e:	6879      	ldr	r1, [r7, #4]
 8007470:	480a      	ldr	r0, [pc, #40]	; (800749c <CDC_Receive_FS+0x38>)
 8007472:	f7fe fbc1 	bl	8005bf8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007476:	4809      	ldr	r0, [pc, #36]	; (800749c <CDC_Receive_FS+0x38>)
 8007478:	f7fe fc22 	bl	8005cc0 <USBD_CDC_ReceivePacket>

  rxFlag = 1;
 800747c:	4b08      	ldr	r3, [pc, #32]	; (80074a0 <CDC_Receive_FS+0x3c>)
 800747e:	2201      	movs	r2, #1
 8007480:	701a      	strb	r2, [r3, #0]
  rxBuffPtr = Buf;
 8007482:	4a08      	ldr	r2, [pc, #32]	; (80074a4 <CDC_Receive_FS+0x40>)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6013      	str	r3, [r2, #0]
  rxBuffLength = *Len;
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a06      	ldr	r2, [pc, #24]	; (80074a8 <CDC_Receive_FS+0x44>)
 800748e:	6013      	str	r3, [r2, #0]

  return (USBD_OK);
 8007490:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007492:	4618      	mov	r0, r3
 8007494:	3708      	adds	r7, #8
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	200001b0 	.word	0x200001b0
 80074a0:	200001a0 	.word	0x200001a0
 80074a4:	20000198 	.word	0x20000198
 80074a8:	2000019c 	.word	0x2000019c

080074ac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	460b      	mov	r3, r1
 80074b6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80074b8:	2300      	movs	r3, #0
 80074ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80074bc:	4b0d      	ldr	r3, [pc, #52]	; (80074f4 <CDC_Transmit_FS+0x48>)
 80074be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074c2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d001      	beq.n	80074d2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80074ce:	2301      	movs	r3, #1
 80074d0:	e00b      	b.n	80074ea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80074d2:	887b      	ldrh	r3, [r7, #2]
 80074d4:	461a      	mov	r2, r3
 80074d6:	6879      	ldr	r1, [r7, #4]
 80074d8:	4806      	ldr	r0, [pc, #24]	; (80074f4 <CDC_Transmit_FS+0x48>)
 80074da:	f7fe fb6b 	bl	8005bb4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80074de:	4805      	ldr	r0, [pc, #20]	; (80074f4 <CDC_Transmit_FS+0x48>)
 80074e0:	f7fe fba8 	bl	8005c34 <USBD_CDC_TransmitPacket>
 80074e4:	4603      	mov	r3, r0
 80074e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80074e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	200001b0 	.word	0x200001b0

080074f8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b087      	sub	sp, #28
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	4613      	mov	r3, r2
 8007504:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007506:	2300      	movs	r3, #0
 8007508:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800750a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800750e:	4618      	mov	r0, r3
 8007510:	371c      	adds	r7, #28
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
	...

0800751c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	4603      	mov	r3, r0
 8007524:	6039      	str	r1, [r7, #0]
 8007526:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	2212      	movs	r2, #18
 800752c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800752e:	4b03      	ldr	r3, [pc, #12]	; (800753c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007530:	4618      	mov	r0, r3
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr
 800753c:	200000ec 	.word	0x200000ec

08007540 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	4603      	mov	r3, r0
 8007548:	6039      	str	r1, [r7, #0]
 800754a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	2204      	movs	r2, #4
 8007550:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007552:	4b03      	ldr	r3, [pc, #12]	; (8007560 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007554:	4618      	mov	r0, r3
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr
 8007560:	20000100 	.word	0x20000100

08007564 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	4603      	mov	r3, r0
 800756c:	6039      	str	r1, [r7, #0]
 800756e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007570:	79fb      	ldrb	r3, [r7, #7]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d105      	bne.n	8007582 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007576:	683a      	ldr	r2, [r7, #0]
 8007578:	4907      	ldr	r1, [pc, #28]	; (8007598 <USBD_FS_ProductStrDescriptor+0x34>)
 800757a:	4808      	ldr	r0, [pc, #32]	; (800759c <USBD_FS_ProductStrDescriptor+0x38>)
 800757c:	f7ff fde8 	bl	8007150 <USBD_GetString>
 8007580:	e004      	b.n	800758c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007582:	683a      	ldr	r2, [r7, #0]
 8007584:	4904      	ldr	r1, [pc, #16]	; (8007598 <USBD_FS_ProductStrDescriptor+0x34>)
 8007586:	4805      	ldr	r0, [pc, #20]	; (800759c <USBD_FS_ProductStrDescriptor+0x38>)
 8007588:	f7ff fde2 	bl	8007150 <USBD_GetString>
  }
  return USBD_StrDesc;
 800758c:	4b02      	ldr	r3, [pc, #8]	; (8007598 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800758e:	4618      	mov	r0, r3
 8007590:	3708      	adds	r7, #8
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	2000148c 	.word	0x2000148c
 800759c:	08008160 	.word	0x08008160

080075a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	4603      	mov	r3, r0
 80075a8:	6039      	str	r1, [r7, #0]
 80075aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80075ac:	683a      	ldr	r2, [r7, #0]
 80075ae:	4904      	ldr	r1, [pc, #16]	; (80075c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80075b0:	4804      	ldr	r0, [pc, #16]	; (80075c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80075b2:	f7ff fdcd 	bl	8007150 <USBD_GetString>
  return USBD_StrDesc;
 80075b6:	4b02      	ldr	r3, [pc, #8]	; (80075c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3708      	adds	r7, #8
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	2000148c 	.word	0x2000148c
 80075c4:	08008178 	.word	0x08008178

080075c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	4603      	mov	r3, r0
 80075d0:	6039      	str	r1, [r7, #0]
 80075d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	221a      	movs	r2, #26
 80075d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80075da:	f000 f843 	bl	8007664 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80075de:	4b02      	ldr	r3, [pc, #8]	; (80075e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3708      	adds	r7, #8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	20000104 	.word	0x20000104

080075ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	4603      	mov	r3, r0
 80075f4:	6039      	str	r1, [r7, #0]
 80075f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80075f8:	79fb      	ldrb	r3, [r7, #7]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d105      	bne.n	800760a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80075fe:	683a      	ldr	r2, [r7, #0]
 8007600:	4907      	ldr	r1, [pc, #28]	; (8007620 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007602:	4808      	ldr	r0, [pc, #32]	; (8007624 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007604:	f7ff fda4 	bl	8007150 <USBD_GetString>
 8007608:	e004      	b.n	8007614 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800760a:	683a      	ldr	r2, [r7, #0]
 800760c:	4904      	ldr	r1, [pc, #16]	; (8007620 <USBD_FS_ConfigStrDescriptor+0x34>)
 800760e:	4805      	ldr	r0, [pc, #20]	; (8007624 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007610:	f7ff fd9e 	bl	8007150 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007614:	4b02      	ldr	r3, [pc, #8]	; (8007620 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007616:	4618      	mov	r0, r3
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	2000148c 	.word	0x2000148c
 8007624:	0800818c 	.word	0x0800818c

08007628 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	4603      	mov	r3, r0
 8007630:	6039      	str	r1, [r7, #0]
 8007632:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007634:	79fb      	ldrb	r3, [r7, #7]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d105      	bne.n	8007646 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800763a:	683a      	ldr	r2, [r7, #0]
 800763c:	4907      	ldr	r1, [pc, #28]	; (800765c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800763e:	4808      	ldr	r0, [pc, #32]	; (8007660 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007640:	f7ff fd86 	bl	8007150 <USBD_GetString>
 8007644:	e004      	b.n	8007650 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007646:	683a      	ldr	r2, [r7, #0]
 8007648:	4904      	ldr	r1, [pc, #16]	; (800765c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800764a:	4805      	ldr	r0, [pc, #20]	; (8007660 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800764c:	f7ff fd80 	bl	8007150 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007650:	4b02      	ldr	r3, [pc, #8]	; (800765c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007652:	4618      	mov	r0, r3
 8007654:	3708      	adds	r7, #8
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	2000148c 	.word	0x2000148c
 8007660:	08008198 	.word	0x08008198

08007664 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800766a:	4b0f      	ldr	r3, [pc, #60]	; (80076a8 <Get_SerialNum+0x44>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007670:	4b0e      	ldr	r3, [pc, #56]	; (80076ac <Get_SerialNum+0x48>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007676:	4b0e      	ldr	r3, [pc, #56]	; (80076b0 <Get_SerialNum+0x4c>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4413      	add	r3, r2
 8007682:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d009      	beq.n	800769e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800768a:	2208      	movs	r2, #8
 800768c:	4909      	ldr	r1, [pc, #36]	; (80076b4 <Get_SerialNum+0x50>)
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f000 f814 	bl	80076bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007694:	2204      	movs	r2, #4
 8007696:	4908      	ldr	r1, [pc, #32]	; (80076b8 <Get_SerialNum+0x54>)
 8007698:	68b8      	ldr	r0, [r7, #8]
 800769a:	f000 f80f 	bl	80076bc <IntToUnicode>
  }
}
 800769e:	bf00      	nop
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	1fff7a10 	.word	0x1fff7a10
 80076ac:	1fff7a14 	.word	0x1fff7a14
 80076b0:	1fff7a18 	.word	0x1fff7a18
 80076b4:	20000106 	.word	0x20000106
 80076b8:	20000116 	.word	0x20000116

080076bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80076bc:	b480      	push	{r7}
 80076be:	b087      	sub	sp, #28
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	4613      	mov	r3, r2
 80076c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80076ca:	2300      	movs	r3, #0
 80076cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80076ce:	2300      	movs	r3, #0
 80076d0:	75fb      	strb	r3, [r7, #23]
 80076d2:	e027      	b.n	8007724 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	0f1b      	lsrs	r3, r3, #28
 80076d8:	2b09      	cmp	r3, #9
 80076da:	d80b      	bhi.n	80076f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	0f1b      	lsrs	r3, r3, #28
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	7dfb      	ldrb	r3, [r7, #23]
 80076e4:	005b      	lsls	r3, r3, #1
 80076e6:	4619      	mov	r1, r3
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	440b      	add	r3, r1
 80076ec:	3230      	adds	r2, #48	; 0x30
 80076ee:	b2d2      	uxtb	r2, r2
 80076f0:	701a      	strb	r2, [r3, #0]
 80076f2:	e00a      	b.n	800770a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	0f1b      	lsrs	r3, r3, #28
 80076f8:	b2da      	uxtb	r2, r3
 80076fa:	7dfb      	ldrb	r3, [r7, #23]
 80076fc:	005b      	lsls	r3, r3, #1
 80076fe:	4619      	mov	r1, r3
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	440b      	add	r3, r1
 8007704:	3237      	adds	r2, #55	; 0x37
 8007706:	b2d2      	uxtb	r2, r2
 8007708:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	011b      	lsls	r3, r3, #4
 800770e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007710:	7dfb      	ldrb	r3, [r7, #23]
 8007712:	005b      	lsls	r3, r3, #1
 8007714:	3301      	adds	r3, #1
 8007716:	68ba      	ldr	r2, [r7, #8]
 8007718:	4413      	add	r3, r2
 800771a:	2200      	movs	r2, #0
 800771c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800771e:	7dfb      	ldrb	r3, [r7, #23]
 8007720:	3301      	adds	r3, #1
 8007722:	75fb      	strb	r3, [r7, #23]
 8007724:	7dfa      	ldrb	r2, [r7, #23]
 8007726:	79fb      	ldrb	r3, [r7, #7]
 8007728:	429a      	cmp	r2, r3
 800772a:	d3d3      	bcc.n	80076d4 <IntToUnicode+0x18>
  }
}
 800772c:	bf00      	nop
 800772e:	bf00      	nop
 8007730:	371c      	adds	r7, #28
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr
	...

0800773c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b08a      	sub	sp, #40	; 0x28
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007744:	f107 0314 	add.w	r3, r7, #20
 8007748:	2200      	movs	r2, #0
 800774a:	601a      	str	r2, [r3, #0]
 800774c:	605a      	str	r2, [r3, #4]
 800774e:	609a      	str	r2, [r3, #8]
 8007750:	60da      	str	r2, [r3, #12]
 8007752:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800775c:	d147      	bne.n	80077ee <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800775e:	2300      	movs	r3, #0
 8007760:	613b      	str	r3, [r7, #16]
 8007762:	4b25      	ldr	r3, [pc, #148]	; (80077f8 <HAL_PCD_MspInit+0xbc>)
 8007764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007766:	4a24      	ldr	r2, [pc, #144]	; (80077f8 <HAL_PCD_MspInit+0xbc>)
 8007768:	f043 0301 	orr.w	r3, r3, #1
 800776c:	6313      	str	r3, [r2, #48]	; 0x30
 800776e:	4b22      	ldr	r3, [pc, #136]	; (80077f8 <HAL_PCD_MspInit+0xbc>)
 8007770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007772:	f003 0301 	and.w	r3, r3, #1
 8007776:	613b      	str	r3, [r7, #16]
 8007778:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800777a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800777e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007780:	2302      	movs	r3, #2
 8007782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007784:	2300      	movs	r3, #0
 8007786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007788:	2303      	movs	r3, #3
 800778a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800778c:	230a      	movs	r3, #10
 800778e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007790:	f107 0314 	add.w	r3, r7, #20
 8007794:	4619      	mov	r1, r3
 8007796:	4819      	ldr	r0, [pc, #100]	; (80077fc <HAL_PCD_MspInit+0xc0>)
 8007798:	f7fa f8f2 	bl	8001980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800779c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80077a2:	2300      	movs	r3, #0
 80077a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077a6:	2300      	movs	r3, #0
 80077a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80077aa:	f107 0314 	add.w	r3, r7, #20
 80077ae:	4619      	mov	r1, r3
 80077b0:	4812      	ldr	r0, [pc, #72]	; (80077fc <HAL_PCD_MspInit+0xc0>)
 80077b2:	f7fa f8e5 	bl	8001980 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80077b6:	4b10      	ldr	r3, [pc, #64]	; (80077f8 <HAL_PCD_MspInit+0xbc>)
 80077b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ba:	4a0f      	ldr	r2, [pc, #60]	; (80077f8 <HAL_PCD_MspInit+0xbc>)
 80077bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077c0:	6353      	str	r3, [r2, #52]	; 0x34
 80077c2:	2300      	movs	r3, #0
 80077c4:	60fb      	str	r3, [r7, #12]
 80077c6:	4b0c      	ldr	r3, [pc, #48]	; (80077f8 <HAL_PCD_MspInit+0xbc>)
 80077c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ca:	4a0b      	ldr	r2, [pc, #44]	; (80077f8 <HAL_PCD_MspInit+0xbc>)
 80077cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80077d0:	6453      	str	r3, [r2, #68]	; 0x44
 80077d2:	4b09      	ldr	r3, [pc, #36]	; (80077f8 <HAL_PCD_MspInit+0xbc>)
 80077d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077da:	60fb      	str	r3, [r7, #12]
 80077dc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80077de:	2200      	movs	r2, #0
 80077e0:	2100      	movs	r1, #0
 80077e2:	2043      	movs	r0, #67	; 0x43
 80077e4:	f7fa f895 	bl	8001912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80077e8:	2043      	movs	r0, #67	; 0x43
 80077ea:	f7fa f8ae 	bl	800194a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80077ee:	bf00      	nop
 80077f0:	3728      	adds	r7, #40	; 0x28
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	40023800 	.word	0x40023800
 80077fc:	40020000 	.word	0x40020000

08007800 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007814:	4619      	mov	r1, r3
 8007816:	4610      	mov	r0, r2
 8007818:	f7fe fb3b 	bl	8005e92 <USBD_LL_SetupStage>
}
 800781c:	bf00      	nop
 800781e:	3708      	adds	r7, #8
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	460b      	mov	r3, r1
 800782e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007836:	78fa      	ldrb	r2, [r7, #3]
 8007838:	6879      	ldr	r1, [r7, #4]
 800783a:	4613      	mov	r3, r2
 800783c:	00db      	lsls	r3, r3, #3
 800783e:	4413      	add	r3, r2
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	440b      	add	r3, r1
 8007844:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	78fb      	ldrb	r3, [r7, #3]
 800784c:	4619      	mov	r1, r3
 800784e:	f7fe fb75 	bl	8005f3c <USBD_LL_DataOutStage>
}
 8007852:	bf00      	nop
 8007854:	3708      	adds	r7, #8
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}

0800785a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800785a:	b580      	push	{r7, lr}
 800785c:	b082      	sub	sp, #8
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
 8007862:	460b      	mov	r3, r1
 8007864:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800786c:	78fa      	ldrb	r2, [r7, #3]
 800786e:	6879      	ldr	r1, [r7, #4]
 8007870:	4613      	mov	r3, r2
 8007872:	00db      	lsls	r3, r3, #3
 8007874:	4413      	add	r3, r2
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	440b      	add	r3, r1
 800787a:	334c      	adds	r3, #76	; 0x4c
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	78fb      	ldrb	r3, [r7, #3]
 8007880:	4619      	mov	r1, r3
 8007882:	f7fe fc0e 	bl	80060a2 <USBD_LL_DataInStage>
}
 8007886:	bf00      	nop
 8007888:	3708      	adds	r7, #8
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b082      	sub	sp, #8
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800789c:	4618      	mov	r0, r3
 800789e:	f7fe fd42 	bl	8006326 <USBD_LL_SOF>
}
 80078a2:	bf00      	nop
 80078a4:	3708      	adds	r7, #8
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b084      	sub	sp, #16
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80078b2:	2301      	movs	r3, #1
 80078b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d102      	bne.n	80078c4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80078be:	2300      	movs	r3, #0
 80078c0:	73fb      	strb	r3, [r7, #15]
 80078c2:	e008      	b.n	80078d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	d102      	bne.n	80078d2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80078cc:	2301      	movs	r3, #1
 80078ce:	73fb      	strb	r3, [r7, #15]
 80078d0:	e001      	b.n	80078d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80078d2:	f7f9 f843 	bl	800095c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80078dc:	7bfa      	ldrb	r2, [r7, #15]
 80078de:	4611      	mov	r1, r2
 80078e0:	4618      	mov	r0, r3
 80078e2:	f7fe fce2 	bl	80062aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7fe fc8a 	bl	8006206 <USBD_LL_Reset>
}
 80078f2:	bf00      	nop
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
	...

080078fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800790a:	4618      	mov	r0, r3
 800790c:	f7fe fcdd 	bl	80062ca <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	6812      	ldr	r2, [r2, #0]
 800791e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007922:	f043 0301 	orr.w	r3, r3, #1
 8007926:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a1b      	ldr	r3, [r3, #32]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d005      	beq.n	800793c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007930:	4b04      	ldr	r3, [pc, #16]	; (8007944 <HAL_PCD_SuspendCallback+0x48>)
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	4a03      	ldr	r2, [pc, #12]	; (8007944 <HAL_PCD_SuspendCallback+0x48>)
 8007936:	f043 0306 	orr.w	r3, r3, #6
 800793a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800793c:	bf00      	nop
 800793e:	3708      	adds	r7, #8
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	e000ed00 	.word	0xe000ed00

08007948 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007956:	4618      	mov	r0, r3
 8007958:	f7fe fccd 	bl	80062f6 <USBD_LL_Resume>
}
 800795c:	bf00      	nop
 800795e:	3708      	adds	r7, #8
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b082      	sub	sp, #8
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	460b      	mov	r3, r1
 800796e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007976:	78fa      	ldrb	r2, [r7, #3]
 8007978:	4611      	mov	r1, r2
 800797a:	4618      	mov	r0, r3
 800797c:	f7fe fd25 	bl	80063ca <USBD_LL_IsoOUTIncomplete>
}
 8007980:	bf00      	nop
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	460b      	mov	r3, r1
 8007992:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800799a:	78fa      	ldrb	r2, [r7, #3]
 800799c:	4611      	mov	r1, r2
 800799e:	4618      	mov	r0, r3
 80079a0:	f7fe fce1 	bl	8006366 <USBD_LL_IsoINIncomplete>
}
 80079a4:	bf00      	nop
 80079a6:	3708      	adds	r7, #8
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7fe fd37 	bl	800642e <USBD_LL_DevConnected>
}
 80079c0:	bf00      	nop
 80079c2:	3708      	adds	r7, #8
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7fe fd34 	bl	8006444 <USBD_LL_DevDisconnected>
}
 80079dc:	bf00      	nop
 80079de:	3708      	adds	r7, #8
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b082      	sub	sp, #8
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d13c      	bne.n	8007a6e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80079f4:	4a20      	ldr	r2, [pc, #128]	; (8007a78 <USBD_LL_Init+0x94>)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	4a1e      	ldr	r2, [pc, #120]	; (8007a78 <USBD_LL_Init+0x94>)
 8007a00:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007a04:	4b1c      	ldr	r3, [pc, #112]	; (8007a78 <USBD_LL_Init+0x94>)
 8007a06:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007a0a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007a0c:	4b1a      	ldr	r3, [pc, #104]	; (8007a78 <USBD_LL_Init+0x94>)
 8007a0e:	2204      	movs	r2, #4
 8007a10:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007a12:	4b19      	ldr	r3, [pc, #100]	; (8007a78 <USBD_LL_Init+0x94>)
 8007a14:	2202      	movs	r2, #2
 8007a16:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007a18:	4b17      	ldr	r3, [pc, #92]	; (8007a78 <USBD_LL_Init+0x94>)
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007a1e:	4b16      	ldr	r3, [pc, #88]	; (8007a78 <USBD_LL_Init+0x94>)
 8007a20:	2202      	movs	r2, #2
 8007a22:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8007a24:	4b14      	ldr	r3, [pc, #80]	; (8007a78 <USBD_LL_Init+0x94>)
 8007a26:	2201      	movs	r2, #1
 8007a28:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007a2a:	4b13      	ldr	r3, [pc, #76]	; (8007a78 <USBD_LL_Init+0x94>)
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007a30:	4b11      	ldr	r3, [pc, #68]	; (8007a78 <USBD_LL_Init+0x94>)
 8007a32:	2200      	movs	r2, #0
 8007a34:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8007a36:	4b10      	ldr	r3, [pc, #64]	; (8007a78 <USBD_LL_Init+0x94>)
 8007a38:	2201      	movs	r2, #1
 8007a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007a3c:	4b0e      	ldr	r3, [pc, #56]	; (8007a78 <USBD_LL_Init+0x94>)
 8007a3e:	2200      	movs	r2, #0
 8007a40:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007a42:	480d      	ldr	r0, [pc, #52]	; (8007a78 <USBD_LL_Init+0x94>)
 8007a44:	f7fa f961 	bl	8001d0a <HAL_PCD_Init>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d001      	beq.n	8007a52 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007a4e:	f7f8 ff85 	bl	800095c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007a52:	2180      	movs	r1, #128	; 0x80
 8007a54:	4808      	ldr	r0, [pc, #32]	; (8007a78 <USBD_LL_Init+0x94>)
 8007a56:	f7fb fbb8 	bl	80031ca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007a5a:	2240      	movs	r2, #64	; 0x40
 8007a5c:	2100      	movs	r1, #0
 8007a5e:	4806      	ldr	r0, [pc, #24]	; (8007a78 <USBD_LL_Init+0x94>)
 8007a60:	f7fb fb6c 	bl	800313c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007a64:	2280      	movs	r2, #128	; 0x80
 8007a66:	2101      	movs	r1, #1
 8007a68:	4803      	ldr	r0, [pc, #12]	; (8007a78 <USBD_LL_Init+0x94>)
 8007a6a:	f7fb fb67 	bl	800313c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3708      	adds	r7, #8
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	2000168c 	.word	0x2000168c

08007a7c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a84:	2300      	movs	r3, #0
 8007a86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7fa fa56 	bl	8001f44 <HAL_PCD_Start>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a9c:	7bfb      	ldrb	r3, [r7, #15]
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f000 f942 	bl	8007d28 <USBD_Get_USB_Status>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007aa8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3710      	adds	r7, #16
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}

08007ab2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b084      	sub	sp, #16
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
 8007aba:	4608      	mov	r0, r1
 8007abc:	4611      	mov	r1, r2
 8007abe:	461a      	mov	r2, r3
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	70fb      	strb	r3, [r7, #3]
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	70bb      	strb	r3, [r7, #2]
 8007ac8:	4613      	mov	r3, r2
 8007aca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007acc:	2300      	movs	r3, #0
 8007ace:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007ada:	78bb      	ldrb	r3, [r7, #2]
 8007adc:	883a      	ldrh	r2, [r7, #0]
 8007ade:	78f9      	ldrb	r1, [r7, #3]
 8007ae0:	f7fa ff27 	bl	8002932 <HAL_PCD_EP_Open>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ae8:	7bfb      	ldrb	r3, [r7, #15]
 8007aea:	4618      	mov	r0, r3
 8007aec:	f000 f91c 	bl	8007d28 <USBD_Get_USB_Status>
 8007af0:	4603      	mov	r3, r0
 8007af2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007af4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b084      	sub	sp, #16
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
 8007b06:	460b      	mov	r3, r1
 8007b08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b18:	78fa      	ldrb	r2, [r7, #3]
 8007b1a:	4611      	mov	r1, r2
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7fa ff70 	bl	8002a02 <HAL_PCD_EP_Close>
 8007b22:	4603      	mov	r3, r0
 8007b24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b26:	7bfb      	ldrb	r3, [r7, #15]
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f000 f8fd 	bl	8007d28 <USBD_Get_USB_Status>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b32:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3710      	adds	r7, #16
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	460b      	mov	r3, r1
 8007b46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b56:	78fa      	ldrb	r2, [r7, #3]
 8007b58:	4611      	mov	r1, r2
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7fb f848 	bl	8002bf0 <HAL_PCD_EP_SetStall>
 8007b60:	4603      	mov	r3, r0
 8007b62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b64:	7bfb      	ldrb	r3, [r7, #15]
 8007b66:	4618      	mov	r0, r3
 8007b68:	f000 f8de 	bl	8007d28 <USBD_Get_USB_Status>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b70:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b084      	sub	sp, #16
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
 8007b82:	460b      	mov	r3, r1
 8007b84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b86:	2300      	movs	r3, #0
 8007b88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b94:	78fa      	ldrb	r2, [r7, #3]
 8007b96:	4611      	mov	r1, r2
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7fb f88d 	bl	8002cb8 <HAL_PCD_EP_ClrStall>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ba2:	7bfb      	ldrb	r3, [r7, #15]
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f000 f8bf 	bl	8007d28 <USBD_Get_USB_Status>
 8007baa:	4603      	mov	r3, r0
 8007bac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bae:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3710      	adds	r7, #16
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007bca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007bcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	da0b      	bge.n	8007bec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007bd4:	78fb      	ldrb	r3, [r7, #3]
 8007bd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bda:	68f9      	ldr	r1, [r7, #12]
 8007bdc:	4613      	mov	r3, r2
 8007bde:	00db      	lsls	r3, r3, #3
 8007be0:	4413      	add	r3, r2
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	440b      	add	r3, r1
 8007be6:	333e      	adds	r3, #62	; 0x3e
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	e00b      	b.n	8007c04 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007bec:	78fb      	ldrb	r3, [r7, #3]
 8007bee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bf2:	68f9      	ldr	r1, [r7, #12]
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	00db      	lsls	r3, r3, #3
 8007bf8:	4413      	add	r3, r2
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	440b      	add	r3, r1
 8007bfe:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007c02:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3714      	adds	r7, #20
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	460b      	mov	r3, r1
 8007c1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c20:	2300      	movs	r3, #0
 8007c22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007c2a:	78fa      	ldrb	r2, [r7, #3]
 8007c2c:	4611      	mov	r1, r2
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7fa fe5a 	bl	80028e8 <HAL_PCD_SetAddress>
 8007c34:	4603      	mov	r3, r0
 8007c36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c38:	7bfb      	ldrb	r3, [r7, #15]
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f000 f874 	bl	8007d28 <USBD_Get_USB_Status>
 8007c40:	4603      	mov	r3, r0
 8007c42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c44:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b086      	sub	sp, #24
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	60f8      	str	r0, [r7, #12]
 8007c56:	607a      	str	r2, [r7, #4]
 8007c58:	603b      	str	r3, [r7, #0]
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c62:	2300      	movs	r3, #0
 8007c64:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007c6c:	7af9      	ldrb	r1, [r7, #11]
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	f7fa ff73 	bl	8002b5c <HAL_PCD_EP_Transmit>
 8007c76:	4603      	mov	r3, r0
 8007c78:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c7a:	7dfb      	ldrb	r3, [r7, #23]
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f000 f853 	bl	8007d28 <USBD_Get_USB_Status>
 8007c82:	4603      	mov	r3, r0
 8007c84:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007c86:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3718      	adds	r7, #24
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	607a      	str	r2, [r7, #4]
 8007c9a:	603b      	str	r3, [r7, #0]
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007cae:	7af9      	ldrb	r1, [r7, #11]
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	f7fa feef 	bl	8002a96 <HAL_PCD_EP_Receive>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cbc:	7dfb      	ldrb	r3, [r7, #23]
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f000 f832 	bl	8007d28 <USBD_Get_USB_Status>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007cc8:	7dbb      	ldrb	r3, [r7, #22]
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3718      	adds	r7, #24
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b082      	sub	sp, #8
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
 8007cda:	460b      	mov	r3, r1
 8007cdc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007ce4:	78fa      	ldrb	r2, [r7, #3]
 8007ce6:	4611      	mov	r1, r2
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f7fa ff1f 	bl	8002b2c <HAL_PCD_EP_GetRxCount>
 8007cee:	4603      	mov	r3, r0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3708      	adds	r7, #8
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007d00:	4b03      	ldr	r3, [pc, #12]	; (8007d10 <USBD_static_malloc+0x18>)
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	370c      	adds	r7, #12
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr
 8007d0e:	bf00      	nop
 8007d10:	20001b98 	.word	0x20001b98

08007d14 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]

}
 8007d1c:	bf00      	nop
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	4603      	mov	r3, r0
 8007d30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d32:	2300      	movs	r3, #0
 8007d34:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007d36:	79fb      	ldrb	r3, [r7, #7]
 8007d38:	2b03      	cmp	r3, #3
 8007d3a:	d817      	bhi.n	8007d6c <USBD_Get_USB_Status+0x44>
 8007d3c:	a201      	add	r2, pc, #4	; (adr r2, 8007d44 <USBD_Get_USB_Status+0x1c>)
 8007d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d42:	bf00      	nop
 8007d44:	08007d55 	.word	0x08007d55
 8007d48:	08007d5b 	.word	0x08007d5b
 8007d4c:	08007d61 	.word	0x08007d61
 8007d50:	08007d67 	.word	0x08007d67
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007d54:	2300      	movs	r3, #0
 8007d56:	73fb      	strb	r3, [r7, #15]
    break;
 8007d58:	e00b      	b.n	8007d72 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	73fb      	strb	r3, [r7, #15]
    break;
 8007d5e:	e008      	b.n	8007d72 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007d60:	2301      	movs	r3, #1
 8007d62:	73fb      	strb	r3, [r7, #15]
    break;
 8007d64:	e005      	b.n	8007d72 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007d66:	2303      	movs	r3, #3
 8007d68:	73fb      	strb	r3, [r7, #15]
    break;
 8007d6a:	e002      	b.n	8007d72 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007d6c:	2303      	movs	r3, #3
 8007d6e:	73fb      	strb	r3, [r7, #15]
    break;
 8007d70:	bf00      	nop
  }
  return usb_status;
 8007d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3714      	adds	r7, #20
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <_ZdlPvj>:
 8007d80:	f000 b817 	b.w	8007db2 <_ZdlPv>

08007d84 <_Znwj>:
 8007d84:	2801      	cmp	r0, #1
 8007d86:	bf38      	it	cc
 8007d88:	2001      	movcc	r0, #1
 8007d8a:	b510      	push	{r4, lr}
 8007d8c:	4604      	mov	r4, r0
 8007d8e:	4620      	mov	r0, r4
 8007d90:	f000 f822 	bl	8007dd8 <malloc>
 8007d94:	b100      	cbz	r0, 8007d98 <_Znwj+0x14>
 8007d96:	bd10      	pop	{r4, pc}
 8007d98:	f000 f80e 	bl	8007db8 <_ZSt15get_new_handlerv>
 8007d9c:	b908      	cbnz	r0, 8007da2 <_Znwj+0x1e>
 8007d9e:	f000 f813 	bl	8007dc8 <abort>
 8007da2:	4780      	blx	r0
 8007da4:	e7f3      	b.n	8007d8e <_Znwj+0xa>

08007da6 <_ZSt17__throw_bad_allocv>:
 8007da6:	b508      	push	{r3, lr}
 8007da8:	f000 f80e 	bl	8007dc8 <abort>

08007dac <_ZSt20__throw_length_errorPKc>:
 8007dac:	b508      	push	{r3, lr}
 8007dae:	f000 f80b 	bl	8007dc8 <abort>

08007db2 <_ZdlPv>:
 8007db2:	f000 b819 	b.w	8007de8 <free>
	...

08007db8 <_ZSt15get_new_handlerv>:
 8007db8:	4b02      	ldr	r3, [pc, #8]	; (8007dc4 <_ZSt15get_new_handlerv+0xc>)
 8007dba:	6818      	ldr	r0, [r3, #0]
 8007dbc:	f3bf 8f5b 	dmb	ish
 8007dc0:	4770      	bx	lr
 8007dc2:	bf00      	nop
 8007dc4:	20001db8 	.word	0x20001db8

08007dc8 <abort>:
 8007dc8:	b508      	push	{r3, lr}
 8007dca:	2006      	movs	r0, #6
 8007dcc:	f000 f90a 	bl	8007fe4 <raise>
 8007dd0:	2001      	movs	r0, #1
 8007dd2:	f7f9 fbb1 	bl	8001538 <_exit>
	...

08007dd8 <malloc>:
 8007dd8:	4b02      	ldr	r3, [pc, #8]	; (8007de4 <malloc+0xc>)
 8007dda:	4601      	mov	r1, r0
 8007ddc:	6818      	ldr	r0, [r3, #0]
 8007dde:	f000 b82b 	b.w	8007e38 <_malloc_r>
 8007de2:	bf00      	nop
 8007de4:	2000016c 	.word	0x2000016c

08007de8 <free>:
 8007de8:	4b02      	ldr	r3, [pc, #8]	; (8007df4 <free+0xc>)
 8007dea:	4601      	mov	r1, r0
 8007dec:	6818      	ldr	r0, [r3, #0]
 8007dee:	f000 b951 	b.w	8008094 <_free_r>
 8007df2:	bf00      	nop
 8007df4:	2000016c 	.word	0x2000016c

08007df8 <sbrk_aligned>:
 8007df8:	b570      	push	{r4, r5, r6, lr}
 8007dfa:	4e0e      	ldr	r6, [pc, #56]	; (8007e34 <sbrk_aligned+0x3c>)
 8007dfc:	460c      	mov	r4, r1
 8007dfe:	6831      	ldr	r1, [r6, #0]
 8007e00:	4605      	mov	r5, r0
 8007e02:	b911      	cbnz	r1, 8007e0a <sbrk_aligned+0x12>
 8007e04:	f000 f90a 	bl	800801c <_sbrk_r>
 8007e08:	6030      	str	r0, [r6, #0]
 8007e0a:	4621      	mov	r1, r4
 8007e0c:	4628      	mov	r0, r5
 8007e0e:	f000 f905 	bl	800801c <_sbrk_r>
 8007e12:	1c43      	adds	r3, r0, #1
 8007e14:	d00a      	beq.n	8007e2c <sbrk_aligned+0x34>
 8007e16:	1cc4      	adds	r4, r0, #3
 8007e18:	f024 0403 	bic.w	r4, r4, #3
 8007e1c:	42a0      	cmp	r0, r4
 8007e1e:	d007      	beq.n	8007e30 <sbrk_aligned+0x38>
 8007e20:	1a21      	subs	r1, r4, r0
 8007e22:	4628      	mov	r0, r5
 8007e24:	f000 f8fa 	bl	800801c <_sbrk_r>
 8007e28:	3001      	adds	r0, #1
 8007e2a:	d101      	bne.n	8007e30 <sbrk_aligned+0x38>
 8007e2c:	f04f 34ff 	mov.w	r4, #4294967295
 8007e30:	4620      	mov	r0, r4
 8007e32:	bd70      	pop	{r4, r5, r6, pc}
 8007e34:	20001dc0 	.word	0x20001dc0

08007e38 <_malloc_r>:
 8007e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e3c:	1ccd      	adds	r5, r1, #3
 8007e3e:	f025 0503 	bic.w	r5, r5, #3
 8007e42:	3508      	adds	r5, #8
 8007e44:	2d0c      	cmp	r5, #12
 8007e46:	bf38      	it	cc
 8007e48:	250c      	movcc	r5, #12
 8007e4a:	2d00      	cmp	r5, #0
 8007e4c:	4607      	mov	r7, r0
 8007e4e:	db01      	blt.n	8007e54 <_malloc_r+0x1c>
 8007e50:	42a9      	cmp	r1, r5
 8007e52:	d905      	bls.n	8007e60 <_malloc_r+0x28>
 8007e54:	230c      	movs	r3, #12
 8007e56:	603b      	str	r3, [r7, #0]
 8007e58:	2600      	movs	r6, #0
 8007e5a:	4630      	mov	r0, r6
 8007e5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e60:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007f34 <_malloc_r+0xfc>
 8007e64:	f000 f868 	bl	8007f38 <__malloc_lock>
 8007e68:	f8d8 3000 	ldr.w	r3, [r8]
 8007e6c:	461c      	mov	r4, r3
 8007e6e:	bb5c      	cbnz	r4, 8007ec8 <_malloc_r+0x90>
 8007e70:	4629      	mov	r1, r5
 8007e72:	4638      	mov	r0, r7
 8007e74:	f7ff ffc0 	bl	8007df8 <sbrk_aligned>
 8007e78:	1c43      	adds	r3, r0, #1
 8007e7a:	4604      	mov	r4, r0
 8007e7c:	d155      	bne.n	8007f2a <_malloc_r+0xf2>
 8007e7e:	f8d8 4000 	ldr.w	r4, [r8]
 8007e82:	4626      	mov	r6, r4
 8007e84:	2e00      	cmp	r6, #0
 8007e86:	d145      	bne.n	8007f14 <_malloc_r+0xdc>
 8007e88:	2c00      	cmp	r4, #0
 8007e8a:	d048      	beq.n	8007f1e <_malloc_r+0xe6>
 8007e8c:	6823      	ldr	r3, [r4, #0]
 8007e8e:	4631      	mov	r1, r6
 8007e90:	4638      	mov	r0, r7
 8007e92:	eb04 0903 	add.w	r9, r4, r3
 8007e96:	f000 f8c1 	bl	800801c <_sbrk_r>
 8007e9a:	4581      	cmp	r9, r0
 8007e9c:	d13f      	bne.n	8007f1e <_malloc_r+0xe6>
 8007e9e:	6821      	ldr	r1, [r4, #0]
 8007ea0:	1a6d      	subs	r5, r5, r1
 8007ea2:	4629      	mov	r1, r5
 8007ea4:	4638      	mov	r0, r7
 8007ea6:	f7ff ffa7 	bl	8007df8 <sbrk_aligned>
 8007eaa:	3001      	adds	r0, #1
 8007eac:	d037      	beq.n	8007f1e <_malloc_r+0xe6>
 8007eae:	6823      	ldr	r3, [r4, #0]
 8007eb0:	442b      	add	r3, r5
 8007eb2:	6023      	str	r3, [r4, #0]
 8007eb4:	f8d8 3000 	ldr.w	r3, [r8]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d038      	beq.n	8007f2e <_malloc_r+0xf6>
 8007ebc:	685a      	ldr	r2, [r3, #4]
 8007ebe:	42a2      	cmp	r2, r4
 8007ec0:	d12b      	bne.n	8007f1a <_malloc_r+0xe2>
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	605a      	str	r2, [r3, #4]
 8007ec6:	e00f      	b.n	8007ee8 <_malloc_r+0xb0>
 8007ec8:	6822      	ldr	r2, [r4, #0]
 8007eca:	1b52      	subs	r2, r2, r5
 8007ecc:	d41f      	bmi.n	8007f0e <_malloc_r+0xd6>
 8007ece:	2a0b      	cmp	r2, #11
 8007ed0:	d917      	bls.n	8007f02 <_malloc_r+0xca>
 8007ed2:	1961      	adds	r1, r4, r5
 8007ed4:	42a3      	cmp	r3, r4
 8007ed6:	6025      	str	r5, [r4, #0]
 8007ed8:	bf18      	it	ne
 8007eda:	6059      	strne	r1, [r3, #4]
 8007edc:	6863      	ldr	r3, [r4, #4]
 8007ede:	bf08      	it	eq
 8007ee0:	f8c8 1000 	streq.w	r1, [r8]
 8007ee4:	5162      	str	r2, [r4, r5]
 8007ee6:	604b      	str	r3, [r1, #4]
 8007ee8:	4638      	mov	r0, r7
 8007eea:	f104 060b 	add.w	r6, r4, #11
 8007eee:	f000 f829 	bl	8007f44 <__malloc_unlock>
 8007ef2:	f026 0607 	bic.w	r6, r6, #7
 8007ef6:	1d23      	adds	r3, r4, #4
 8007ef8:	1af2      	subs	r2, r6, r3
 8007efa:	d0ae      	beq.n	8007e5a <_malloc_r+0x22>
 8007efc:	1b9b      	subs	r3, r3, r6
 8007efe:	50a3      	str	r3, [r4, r2]
 8007f00:	e7ab      	b.n	8007e5a <_malloc_r+0x22>
 8007f02:	42a3      	cmp	r3, r4
 8007f04:	6862      	ldr	r2, [r4, #4]
 8007f06:	d1dd      	bne.n	8007ec4 <_malloc_r+0x8c>
 8007f08:	f8c8 2000 	str.w	r2, [r8]
 8007f0c:	e7ec      	b.n	8007ee8 <_malloc_r+0xb0>
 8007f0e:	4623      	mov	r3, r4
 8007f10:	6864      	ldr	r4, [r4, #4]
 8007f12:	e7ac      	b.n	8007e6e <_malloc_r+0x36>
 8007f14:	4634      	mov	r4, r6
 8007f16:	6876      	ldr	r6, [r6, #4]
 8007f18:	e7b4      	b.n	8007e84 <_malloc_r+0x4c>
 8007f1a:	4613      	mov	r3, r2
 8007f1c:	e7cc      	b.n	8007eb8 <_malloc_r+0x80>
 8007f1e:	230c      	movs	r3, #12
 8007f20:	603b      	str	r3, [r7, #0]
 8007f22:	4638      	mov	r0, r7
 8007f24:	f000 f80e 	bl	8007f44 <__malloc_unlock>
 8007f28:	e797      	b.n	8007e5a <_malloc_r+0x22>
 8007f2a:	6025      	str	r5, [r4, #0]
 8007f2c:	e7dc      	b.n	8007ee8 <_malloc_r+0xb0>
 8007f2e:	605b      	str	r3, [r3, #4]
 8007f30:	deff      	udf	#255	; 0xff
 8007f32:	bf00      	nop
 8007f34:	20001dbc 	.word	0x20001dbc

08007f38 <__malloc_lock>:
 8007f38:	4801      	ldr	r0, [pc, #4]	; (8007f40 <__malloc_lock+0x8>)
 8007f3a:	f000 b8a9 	b.w	8008090 <__retarget_lock_acquire_recursive>
 8007f3e:	bf00      	nop
 8007f40:	20001f00 	.word	0x20001f00

08007f44 <__malloc_unlock>:
 8007f44:	4801      	ldr	r0, [pc, #4]	; (8007f4c <__malloc_unlock+0x8>)
 8007f46:	f000 b8a4 	b.w	8008092 <__retarget_lock_release_recursive>
 8007f4a:	bf00      	nop
 8007f4c:	20001f00 	.word	0x20001f00

08007f50 <memmove>:
 8007f50:	4288      	cmp	r0, r1
 8007f52:	b510      	push	{r4, lr}
 8007f54:	eb01 0402 	add.w	r4, r1, r2
 8007f58:	d902      	bls.n	8007f60 <memmove+0x10>
 8007f5a:	4284      	cmp	r4, r0
 8007f5c:	4623      	mov	r3, r4
 8007f5e:	d807      	bhi.n	8007f70 <memmove+0x20>
 8007f60:	1e43      	subs	r3, r0, #1
 8007f62:	42a1      	cmp	r1, r4
 8007f64:	d008      	beq.n	8007f78 <memmove+0x28>
 8007f66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f6e:	e7f8      	b.n	8007f62 <memmove+0x12>
 8007f70:	4402      	add	r2, r0
 8007f72:	4601      	mov	r1, r0
 8007f74:	428a      	cmp	r2, r1
 8007f76:	d100      	bne.n	8007f7a <memmove+0x2a>
 8007f78:	bd10      	pop	{r4, pc}
 8007f7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f82:	e7f7      	b.n	8007f74 <memmove+0x24>

08007f84 <memset>:
 8007f84:	4402      	add	r2, r0
 8007f86:	4603      	mov	r3, r0
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d100      	bne.n	8007f8e <memset+0xa>
 8007f8c:	4770      	bx	lr
 8007f8e:	f803 1b01 	strb.w	r1, [r3], #1
 8007f92:	e7f9      	b.n	8007f88 <memset+0x4>

08007f94 <_raise_r>:
 8007f94:	291f      	cmp	r1, #31
 8007f96:	b538      	push	{r3, r4, r5, lr}
 8007f98:	4604      	mov	r4, r0
 8007f9a:	460d      	mov	r5, r1
 8007f9c:	d904      	bls.n	8007fa8 <_raise_r+0x14>
 8007f9e:	2316      	movs	r3, #22
 8007fa0:	6003      	str	r3, [r0, #0]
 8007fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa6:	bd38      	pop	{r3, r4, r5, pc}
 8007fa8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007faa:	b112      	cbz	r2, 8007fb2 <_raise_r+0x1e>
 8007fac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007fb0:	b94b      	cbnz	r3, 8007fc6 <_raise_r+0x32>
 8007fb2:	4620      	mov	r0, r4
 8007fb4:	f000 f830 	bl	8008018 <_getpid_r>
 8007fb8:	462a      	mov	r2, r5
 8007fba:	4601      	mov	r1, r0
 8007fbc:	4620      	mov	r0, r4
 8007fbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fc2:	f000 b817 	b.w	8007ff4 <_kill_r>
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d00a      	beq.n	8007fe0 <_raise_r+0x4c>
 8007fca:	1c59      	adds	r1, r3, #1
 8007fcc:	d103      	bne.n	8007fd6 <_raise_r+0x42>
 8007fce:	2316      	movs	r3, #22
 8007fd0:	6003      	str	r3, [r0, #0]
 8007fd2:	2001      	movs	r0, #1
 8007fd4:	e7e7      	b.n	8007fa6 <_raise_r+0x12>
 8007fd6:	2400      	movs	r4, #0
 8007fd8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007fdc:	4628      	mov	r0, r5
 8007fde:	4798      	blx	r3
 8007fe0:	2000      	movs	r0, #0
 8007fe2:	e7e0      	b.n	8007fa6 <_raise_r+0x12>

08007fe4 <raise>:
 8007fe4:	4b02      	ldr	r3, [pc, #8]	; (8007ff0 <raise+0xc>)
 8007fe6:	4601      	mov	r1, r0
 8007fe8:	6818      	ldr	r0, [r3, #0]
 8007fea:	f7ff bfd3 	b.w	8007f94 <_raise_r>
 8007fee:	bf00      	nop
 8007ff0:	2000016c 	.word	0x2000016c

08007ff4 <_kill_r>:
 8007ff4:	b538      	push	{r3, r4, r5, lr}
 8007ff6:	4d07      	ldr	r5, [pc, #28]	; (8008014 <_kill_r+0x20>)
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	4604      	mov	r4, r0
 8007ffc:	4608      	mov	r0, r1
 8007ffe:	4611      	mov	r1, r2
 8008000:	602b      	str	r3, [r5, #0]
 8008002:	f7f9 fa89 	bl	8001518 <_kill>
 8008006:	1c43      	adds	r3, r0, #1
 8008008:	d102      	bne.n	8008010 <_kill_r+0x1c>
 800800a:	682b      	ldr	r3, [r5, #0]
 800800c:	b103      	cbz	r3, 8008010 <_kill_r+0x1c>
 800800e:	6023      	str	r3, [r4, #0]
 8008010:	bd38      	pop	{r3, r4, r5, pc}
 8008012:	bf00      	nop
 8008014:	20001efc 	.word	0x20001efc

08008018 <_getpid_r>:
 8008018:	f7f9 ba76 	b.w	8001508 <_getpid>

0800801c <_sbrk_r>:
 800801c:	b538      	push	{r3, r4, r5, lr}
 800801e:	4d06      	ldr	r5, [pc, #24]	; (8008038 <_sbrk_r+0x1c>)
 8008020:	2300      	movs	r3, #0
 8008022:	4604      	mov	r4, r0
 8008024:	4608      	mov	r0, r1
 8008026:	602b      	str	r3, [r5, #0]
 8008028:	f7f9 fa90 	bl	800154c <_sbrk>
 800802c:	1c43      	adds	r3, r0, #1
 800802e:	d102      	bne.n	8008036 <_sbrk_r+0x1a>
 8008030:	682b      	ldr	r3, [r5, #0]
 8008032:	b103      	cbz	r3, 8008036 <_sbrk_r+0x1a>
 8008034:	6023      	str	r3, [r4, #0]
 8008036:	bd38      	pop	{r3, r4, r5, pc}
 8008038:	20001efc 	.word	0x20001efc

0800803c <__errno>:
 800803c:	4b01      	ldr	r3, [pc, #4]	; (8008044 <__errno+0x8>)
 800803e:	6818      	ldr	r0, [r3, #0]
 8008040:	4770      	bx	lr
 8008042:	bf00      	nop
 8008044:	2000016c 	.word	0x2000016c

08008048 <__libc_init_array>:
 8008048:	b570      	push	{r4, r5, r6, lr}
 800804a:	4d0d      	ldr	r5, [pc, #52]	; (8008080 <__libc_init_array+0x38>)
 800804c:	4c0d      	ldr	r4, [pc, #52]	; (8008084 <__libc_init_array+0x3c>)
 800804e:	1b64      	subs	r4, r4, r5
 8008050:	10a4      	asrs	r4, r4, #2
 8008052:	2600      	movs	r6, #0
 8008054:	42a6      	cmp	r6, r4
 8008056:	d109      	bne.n	800806c <__libc_init_array+0x24>
 8008058:	4d0b      	ldr	r5, [pc, #44]	; (8008088 <__libc_init_array+0x40>)
 800805a:	4c0c      	ldr	r4, [pc, #48]	; (800808c <__libc_init_array+0x44>)
 800805c:	f000 f866 	bl	800812c <_init>
 8008060:	1b64      	subs	r4, r4, r5
 8008062:	10a4      	asrs	r4, r4, #2
 8008064:	2600      	movs	r6, #0
 8008066:	42a6      	cmp	r6, r4
 8008068:	d105      	bne.n	8008076 <__libc_init_array+0x2e>
 800806a:	bd70      	pop	{r4, r5, r6, pc}
 800806c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008070:	4798      	blx	r3
 8008072:	3601      	adds	r6, #1
 8008074:	e7ee      	b.n	8008054 <__libc_init_array+0xc>
 8008076:	f855 3b04 	ldr.w	r3, [r5], #4
 800807a:	4798      	blx	r3
 800807c:	3601      	adds	r6, #1
 800807e:	e7f2      	b.n	8008066 <__libc_init_array+0x1e>
 8008080:	080081c0 	.word	0x080081c0
 8008084:	080081c0 	.word	0x080081c0
 8008088:	080081c0 	.word	0x080081c0
 800808c:	080081c8 	.word	0x080081c8

08008090 <__retarget_lock_acquire_recursive>:
 8008090:	4770      	bx	lr

08008092 <__retarget_lock_release_recursive>:
 8008092:	4770      	bx	lr

08008094 <_free_r>:
 8008094:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008096:	2900      	cmp	r1, #0
 8008098:	d044      	beq.n	8008124 <_free_r+0x90>
 800809a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800809e:	9001      	str	r0, [sp, #4]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f1a1 0404 	sub.w	r4, r1, #4
 80080a6:	bfb8      	it	lt
 80080a8:	18e4      	addlt	r4, r4, r3
 80080aa:	f7ff ff45 	bl	8007f38 <__malloc_lock>
 80080ae:	4a1e      	ldr	r2, [pc, #120]	; (8008128 <_free_r+0x94>)
 80080b0:	9801      	ldr	r0, [sp, #4]
 80080b2:	6813      	ldr	r3, [r2, #0]
 80080b4:	b933      	cbnz	r3, 80080c4 <_free_r+0x30>
 80080b6:	6063      	str	r3, [r4, #4]
 80080b8:	6014      	str	r4, [r2, #0]
 80080ba:	b003      	add	sp, #12
 80080bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080c0:	f7ff bf40 	b.w	8007f44 <__malloc_unlock>
 80080c4:	42a3      	cmp	r3, r4
 80080c6:	d908      	bls.n	80080da <_free_r+0x46>
 80080c8:	6825      	ldr	r5, [r4, #0]
 80080ca:	1961      	adds	r1, r4, r5
 80080cc:	428b      	cmp	r3, r1
 80080ce:	bf01      	itttt	eq
 80080d0:	6819      	ldreq	r1, [r3, #0]
 80080d2:	685b      	ldreq	r3, [r3, #4]
 80080d4:	1949      	addeq	r1, r1, r5
 80080d6:	6021      	streq	r1, [r4, #0]
 80080d8:	e7ed      	b.n	80080b6 <_free_r+0x22>
 80080da:	461a      	mov	r2, r3
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	b10b      	cbz	r3, 80080e4 <_free_r+0x50>
 80080e0:	42a3      	cmp	r3, r4
 80080e2:	d9fa      	bls.n	80080da <_free_r+0x46>
 80080e4:	6811      	ldr	r1, [r2, #0]
 80080e6:	1855      	adds	r5, r2, r1
 80080e8:	42a5      	cmp	r5, r4
 80080ea:	d10b      	bne.n	8008104 <_free_r+0x70>
 80080ec:	6824      	ldr	r4, [r4, #0]
 80080ee:	4421      	add	r1, r4
 80080f0:	1854      	adds	r4, r2, r1
 80080f2:	42a3      	cmp	r3, r4
 80080f4:	6011      	str	r1, [r2, #0]
 80080f6:	d1e0      	bne.n	80080ba <_free_r+0x26>
 80080f8:	681c      	ldr	r4, [r3, #0]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	6053      	str	r3, [r2, #4]
 80080fe:	440c      	add	r4, r1
 8008100:	6014      	str	r4, [r2, #0]
 8008102:	e7da      	b.n	80080ba <_free_r+0x26>
 8008104:	d902      	bls.n	800810c <_free_r+0x78>
 8008106:	230c      	movs	r3, #12
 8008108:	6003      	str	r3, [r0, #0]
 800810a:	e7d6      	b.n	80080ba <_free_r+0x26>
 800810c:	6825      	ldr	r5, [r4, #0]
 800810e:	1961      	adds	r1, r4, r5
 8008110:	428b      	cmp	r3, r1
 8008112:	bf04      	itt	eq
 8008114:	6819      	ldreq	r1, [r3, #0]
 8008116:	685b      	ldreq	r3, [r3, #4]
 8008118:	6063      	str	r3, [r4, #4]
 800811a:	bf04      	itt	eq
 800811c:	1949      	addeq	r1, r1, r5
 800811e:	6021      	streq	r1, [r4, #0]
 8008120:	6054      	str	r4, [r2, #4]
 8008122:	e7ca      	b.n	80080ba <_free_r+0x26>
 8008124:	b003      	add	sp, #12
 8008126:	bd30      	pop	{r4, r5, pc}
 8008128:	20001dbc 	.word	0x20001dbc

0800812c <_init>:
 800812c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800812e:	bf00      	nop
 8008130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008132:	bc08      	pop	{r3}
 8008134:	469e      	mov	lr, r3
 8008136:	4770      	bx	lr

08008138 <_fini>:
 8008138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800813a:	bf00      	nop
 800813c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800813e:	bc08      	pop	{r3}
 8008140:	469e      	mov	lr, r3
 8008142:	4770      	bx	lr
